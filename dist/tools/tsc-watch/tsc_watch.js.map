{"version":3,"file":"tsc_watch.js","sourceRoot":"","sources":["../../../tools/tsc-watch/tsc_watch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* tslint:disable:no-console  */\nimport {spawn} from 'child_process';\nimport {platform} from 'os';\nimport {normalize} from 'path';\nimport {resolve} from 'url';\n\nenum State {\n  idle,\n  waiting,\n  error\n}\n\nexport const TSC = normalize('node_modules/.bin/tsc') + (/^win/.test(platform()) ? '.cmd' : '');\nexport type Command = (stdIn: any, stdErr: any) => Promise<number>;\n\nexport class TscWatch {\n  private tsconfig: string;\n  private start: string|RegExp;\n  private error: string|RegExp;\n  private complete: string|RegExp;\n  private onStartCmds: Array<string[]|Command>;\n  private onChangeCmds: Array<string[]|Command>;\n  private state: State;\n  private triggered: Promise<number> = null;\n  private runOnce: boolean = false;\n\n  constructor({tsconfig, start, error, complete, onStartCmds = null, onChangeCmds = null}: {\n    tsconfig: string,\n    error: string|RegExp,\n    start: string,\n    complete: string, onStartCmds?: Array<string[]|Command>, onChangeCmds?: Array<string[]|Command>\n  }) {\n    console.log('Watching:', tsconfig, 'in', process.cwd());\n    this.tsconfig = tsconfig;\n    this.start = start;\n    this.error = error;\n    this.complete = complete;\n    this.onStartCmds = onStartCmds || [];\n    this.onChangeCmds = onChangeCmds || [];\n  }\n\n  watch() {\n    const args = [TSC, '--emitDecoratorMetadata', '--project', this.tsconfig];\n    if (!this.runOnce) args.push('--watch');\n    const tsc =\n        this.runCmd(args, {}, (d) => this.consumeLine(d, false), (d) => this.consumeLine(d, true));\n    if (this.runOnce) {\n      tsc.then(() => this.triggerCmds(), code => process.exit(code));\n    }\n    this.state = State.waiting;\n    this.onStartCmds.forEach((cmd) => this.runCmd(cmd, null, () => null, () => null));\n  }\n\n  private runCmd(\n      argsOrCmd: string[]|Command, env?: {[k: string]: string}, stdOut = pipeStdOut,\n      stdErr = pipeStdErr): Promise<number> {\n    if (typeof argsOrCmd == 'function') {\n      return (argsOrCmd as Command)(stdErr, stdOut);\n    } else if (argsOrCmd instanceof Array) {\n      const args = argsOrCmd as Array<string>;\n      return <any>new Promise((resolve, reject) => {\n               const [cmd, ...options] = args;\n               console.log('=====>', cmd, options.join(' '));\n               const childProcess = spawn(cmd, options, {stdio: 'pipe'});\n               childProcess.stdout.on('data', stdOut);\n               childProcess.stderr.on('data', stdErr);\n               const onExit = () => childProcess.kill();\n               childProcess.on('close', (code: number) => {\n                 process.removeListener('exit', onExit);\n                 console.log('EXIT:', code, '<=====', args.join(' '));\n                 code ? reject(code) : resolve(code);\n               });\n               process.on('exit', onExit);\n             })\n          .catch(reportError);\n    } else {\n      throw new Error('Expecting function or an array of strings...');\n    }\n  }\n\n  run() {\n    this.runOnce = true;\n    this.watch();\n  }\n\n  runCmdsOnly() {\n    this.runOnce = true;\n    this.triggerCmds();\n  }\n\n  consumeLine(buffer: Buffer, isStdError: boolean) {\n    const line = '' + buffer;\n    if (contains(line, this.start)) {\n      console.log('==============================================================================');\n      stdOut(buffer, isStdError);\n      this.state = State.waiting;\n    } else if (contains(line, this.error)) {\n      stdOut(buffer, isStdError);\n      this.state = State.error;\n    } else if (contains(line, this.complete)) {\n      stdOut(buffer, isStdError);\n      console.log('------------------------------------------------------------------------------');\n      if (this.state == State.error) {\n        console.log('Errors found.... (response not triggered)');\n        if (this.runOnce) process.exit(1);\n        this.state = State.idle;\n      } else {\n        if (this.triggered) {\n          this.triggered.then(\n              () => this.triggerCmds(), (e) => console.log('Error while running commands....', e));\n        } else {\n          this.triggerCmds();\n        }\n      }\n    } else {\n      stdOut(buffer, isStdError);\n    }\n  }\n\n  triggerCmds() {\n    let cmdPromise: Promise<number> = Promise.resolve(0);\n    this.onChangeCmds.forEach(\n        (cmd: string[] | Command) => cmdPromise =\n            cmdPromise.then(() => this.runCmd(<string[]>cmd)));\n    cmdPromise.then(() => this.triggered = null, (code) => {\n      if (this.runOnce) {\n        if (typeof code != 'number') {\n          console.error('Error occurred while executing commands', code);\n          process.exit(1);\n        }\n        process.exit(code);\n      } else {\n        this.triggered = null;\n      }\n    });\n    this.triggered = cmdPromise;\n  }\n}\n\nfunction stdOut(data: Buffer, isStdError: boolean) {\n  if (isStdError) {\n    process.stderr.write(data);\n  } else {\n    process.stdout.write(data);\n  }\n}\n\nfunction contains(line: string, text: string | RegExp): boolean {\n  if (typeof text == 'string') {\n    return line.indexOf(text as string) != -1;\n  } else if (text instanceof RegExp) {\n    return (text as RegExp).test(line);\n  } else {\n    throw new Error('Unknown: ' + text);\n  }\n}\n\nexport function reportError(e: any) {\n  if (e.message && e.stack) {\n    console.error(e.message);\n    console.error(e.stack);\n  } else {\n    console.error(e);\n  }\n  // process.exit(1);\n  return Promise.reject(e);\n}\n\nfunction pipeStdOut(d: any) {\n  process.stdout.write(d);\n}\nfunction pipeStdErr(d: any) {\n  process.stderr.write(d);\n}\n"]}