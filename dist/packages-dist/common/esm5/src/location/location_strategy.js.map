{"version":3,"sources":["../../../../../../packages/common/src/location/location_strategy.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAAc,MAAA,eAAA,CAAA;AAOvB;;;;;;;;;;;;;;;;;;GAkBG;AACH;IAAA;IASA,CALC;IAKD,uBALC;AAKD,CATA,AAIC,IAAA;;AAOD;IAEA;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,WAAW,IAAG,CAAC,CAAC;IAE3D;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;IAEtE;;;;;;;OAOG;IACH,gBAAgB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,IAAG,CAAC,CAAC;IAEnF;;;;;;;OAOG;IACH,gBAAgB,CAAC,SAAS,CAAC,YAAY,GAAG,UAAS,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,IAAG,CAAC,CAAC;IAEtF;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAEnD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,IAAI,GAAG,cAAY,CAAC,CAAC;IAEhD;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,EAAE,IAAG,CAAC,CAAC;IAExD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,WAAW,GAAG,cAAY,CAAC,CAAC;AACvD,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAlEC,CAAM,IAAA,gBAAA,CAAM,aAAA,GAAgB,IAAI,cAAA,CAAsB,aAAE,CAAa,CAAC","file":"location_strategy.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {LocationChangeListener} from './platform_location';\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n * \n * This is used under the hood of the {\\@link Location} service.\n * \n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n * \n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n * \n * See these two classes for more.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class LocationStrategy {\n  abstract path(includeHash?: boolean): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n  abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract getBaseHref(): string;\n}\n\nfunction LocationStrategy_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?=} includeHash\n * @return {?}\n */\nLocationStrategy.prototype.path = function(includeHash) {};\n\n/**\n * @abstract\n * @param {?} internal\n * @return {?}\n */\nLocationStrategy.prototype.prepareExternalUrl = function(internal) {};\n\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {};\n\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {};\n\n/**\n * @abstract\n * @return {?}\n */\nLocationStrategy.prototype.forward = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nLocationStrategy.prototype.back = function() {};\n\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nLocationStrategy.prototype.onPopState = function(fn) {};\n\n/**\n * @abstract\n * @return {?}\n */\nLocationStrategy.prototype.getBaseHref = function() {};\n}\n\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {\\@link PathLocationStrategy}.\n * \n * If you're using {\\@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n * \n * ### Example\n * \n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n * \n * \\@NgModule({ \n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n */\nexport const /** @type {?} */ APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n"]}