{"version":3,"sources":["../../../../../../packages/common/src/directives/ng_switch.ts"],"names":[],"mappings":"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","file":"ng_switch.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\nexport class SwitchView {\nprivate _created = false;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n/**\n * @param {?} created\n * @return {?}\n */\nenforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\nfunction SwitchView_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchView.prototype._created;\n/** @type {?} */\nSwitchView.prototype._viewContainerRef;\n/** @type {?} */\nSwitchView.prototype._templateRef;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * \\@description \n * \n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n * \n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n * \n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n * \n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n * \n * \\@stable\n */\nexport class NgSwitch {\nprivate _defaultViews: SwitchView[];\nprivate _defaultUsed = false;\nprivate _caseCount = 0;\nprivate _lastCaseCheckIndex = 0;\nprivate _lastCasesMatched = false;\nprivate _ngSwitch: any;\n/**\n * @param {?} newValue\n * @return {?}\n */\nset ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_addCase(): number { return this._caseCount++; }\n/**\n * \\@internal\n * @param {?} view\n * @return {?}\n */\n_addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_matchCase(value: any): boolean {\n    const /** @type {?} */ matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n/**\n * @param {?} useDefault\n * @return {?}\n */\n\nprivate _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\n        const /** @type {?} */ defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngSwitch\": [{ type: Input },],\n};\n}\n\nfunction NgSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitch.ctorParameters;\n/** @type {?} */\nNgSwitch.propDecorators;\n/** @type {?} */\nNgSwitch.prototype._defaultViews;\n/** @type {?} */\nNgSwitch.prototype._defaultUsed;\n/** @type {?} */\nNgSwitch.prototype._caseCount;\n/** @type {?} */\nNgSwitch.prototype._lastCaseCheckIndex;\n/** @type {?} */\nNgSwitch.prototype._lastCasesMatched;\n/** @type {?} */\nNgSwitch.prototype._ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n *             given expression evaluate to respectively the same/different value as the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n * ```\n * \\@description \n * \n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n * \n * If multiple match expressions match the switch expression value, all of them are displayed.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchCase implements DoCheck {\nprivate _view: SwitchView;\n\n  \n  ngSwitchCase: any;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\nprivate ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n/**\n * @return {?}\n */\nngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngSwitchCase\": [{ type: Input },],\n};\n}\n\nfunction NgSwitchCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchCase.ctorParameters;\n/** @type {?} */\nNgSwitchCase.propDecorators;\n/** @type {?} */\nNgSwitchCase.prototype._view;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitchCase;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n * match the\n *             switch expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n * \n * \\@description \n * \n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n       ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgSwitchDefault_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchDefault.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchDefault.ctorParameters;\n}\n\n"]}