{"version":3,"sources":["../../../../../../packages/common/src/pipes/intl.ts"],"names":[],"mappings":"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","file":"intl.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\n\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} opts\n * @return {?}\n */\nstatic format(num: number, locale: string, style: NumberFormatStyle, opts: {\n    minimumIntegerDigits?: number,\n    minimumFractionDigits?: number,\n    maximumFractionDigits?: number,\n    currency?: string|null,\n    currencyAsSymbol?: boolean\n  } = {}): string {\n    const {minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency,\n           currencyAsSymbol = false} = opts;\n    const /** @type {?} */ options: Intl.NumberFormatOptions = {\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      style: NumberFormatStyle[style].toLowerCase()\n    };\n\n    if (style == NumberFormatStyle.Currency) {\n      options.currency = typeof currency == 'string' ? currency : undefined;\n      options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, options).format(num);\n  }\n}\n\ntype DateFormatterFn = (date: Date, locale: string) => string;\n\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n\nconst /** @type {?} */ PATTERN_ALIASES: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed during closure compilation.\n  'yMMMdjms': datePartGetterFactory(combine([\n    digitCondition('year', 1),\n    nameCondition('month', 3),\n    digitCondition('day', 1),\n    digitCondition('hour', 1),\n    digitCondition('minute', 1),\n    digitCondition('second', 1),\n  ])),\n  'yMdjm': datePartGetterFactory(combine([\n    digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n    digitCondition('hour', 1), digitCondition('minute', 1)\n  ])),\n  'yMMMMEEEEd': datePartGetterFactory(combine([\n    digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n    digitCondition('day', 1)\n  ])),\n  'yMMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n  'yMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n  'yMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n  'jms': datePartGetterFactory(combine(\n      [digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n  'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed.\n  'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n  'yy': datePartGetterFactory(digitCondition('year', 2)),\n  'y': datePartGetterFactory(digitCondition('year', 1)),\n  'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n  'MMM': datePartGetterFactory(nameCondition('month', 3)),\n  'MM': datePartGetterFactory(digitCondition('month', 2)),\n  'M': datePartGetterFactory(digitCondition('month', 1)),\n  'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n  'L': datePartGetterFactory(nameCondition('month', 1)),\n  'dd': datePartGetterFactory(digitCondition('day', 2)),\n  'd': datePartGetterFactory(digitCondition('day', 1)),\n  'HH': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n  'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n  'hh': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n  'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'jj': datePartGetterFactory(digitCondition('hour', 2)),\n  'j': datePartGetterFactory(digitCondition('hour', 1)),\n  'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n  'm': datePartGetterFactory(digitCondition('minute', 1)),\n  'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n  's': datePartGetterFactory(digitCondition('second', 1)),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit\n  // fractions\n  'sss': datePartGetterFactory(digitCondition('second', 3)),\n  'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n  'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n  'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n  'E': datePartGetterFactory(nameCondition('weekday', 1)),\n  'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'Z': timeZoneGetter('short'),\n  'z': timeZoneGetter('long'),\n  'ww': datePartGetterFactory({}),  // Week of year, padded (00-53). Week 01 is the week with the\n                                    // first Thursday of the year. not support ?\n  'w':\n      datePartGetterFactory({}),  // Week of year (0-53). Week 1 is the week with the first Thursday\n                                  // of the year not support ?\n  'G': datePartGetterFactory(nameCondition('era', 1)),\n  'GG': datePartGetterFactory(nameCondition('era', 2)),\n  'GGG': datePartGetterFactory(nameCondition('era', 3)),\n  'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = inner(date, locale);\n    return result.length == 1 ? '0' + result : result;\n  };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date: Date, locale: string, options: Intl.DateTimeFormatOptions): string {\n  return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter(timezone: string): DateFormatterFn {\n  // To workaround `Intl` API restriction for single timezone let format with 24 hours\n  const /** @type {?} */ options = {hour: '2-digit', hour12: false, timeZoneName: timezone};\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = intlDateFormat(date, locale, options);\n    // Then extract first 3 letters that related to hours\n    return result ? result.substring(3) : '';\n  };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(\n    options: Intl.DateTimeFormatOptions, value: boolean): Intl.DateTimeFormatOptions {\n  options.hour12 = value;\n  return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  result[prop] = len === 2 ? '2-digit' : 'numeric';\n  return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  if (len < 4) {\n    result[prop] = len > 1 ? 'short' : 'narrow';\n  } else {\n    result[prop] = 'long';\n  }\n\n  return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options: Intl.DateTimeFormatOptions[]): Intl.DateTimeFormatOptions {\n  return options.reduce((merged, opt) => ({...merged, ...opt}), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret: Intl.DateTimeFormatOptions): DateFormatterFn {\n  return (date: Date, locale: string): string => intlDateFormat(date, locale, ret);\n}\n\nconst /** @type {?} */ DATE_FORMATTER_CACHE = new Map<string, string[]>();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format: string, date: Date, locale: string): string {\n  const /** @type {?} */ fn = PATTERN_ALIASES[format];\n\n  if (fn) return fn(date, locale);\n\n  const /** @type {?} */ cacheKey = format;\n  let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\n\n  if (!parts) {\n    parts = [];\n    let /** @type {?} */ match: RegExpExecArray|null;\n    DATE_FORMATS_SPLIT.exec(format);\n\n    let /** @type {?} */ _format: string|null = format;\n    while (_format) {\n      match = DATE_FORMATS_SPLIT.exec(_format);\n      if (match) {\n        parts = parts.concat(match.slice(1));\n        _format = /** @type {?} */(( parts.pop()));\n      } else {\n        parts.push(_format);\n        _format = null;\n      }\n    }\n\n    DATE_FORMATTER_CACHE.set(cacheKey, parts);\n  }\n\n  return parts.reduce((text, part) => {\n    const /** @type {?} */ fn = DATE_FORMATS[part];\n    return text + (fn ? fn(date, locale) : partToTime(part));\n  }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part: string): string {\n  return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    return dateFormatter(pattern, date, locale);\n  }\n}\n"]}