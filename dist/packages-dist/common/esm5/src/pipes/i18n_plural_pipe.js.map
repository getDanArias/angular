{"version":3,"sources":["../../../../../../packages/common/src/pipes/i18n_plural_pipe.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,IAAE,EAAmB,MAAA,eAAA,CAAA;AAM5B,OALO,EAAA,cAAE,EAAe,iBAAA,EAAkB,MAAA,iBAAA,CAAA;AAM1C,OALO,EAAA,wBAAE,EAAwB,MAAA,+BAAA,CAAA;AAOjC,IAAM,gBAAgB,CALhB,qBAAA,GAAgC,IAAA,CAAK;AAM3C;;;;;;;;;;;;;;;;GAgBG;AACH;IACA;;OAEG;IACH,wBANsB,aAAe;QAAf,kBAAA,GAAA,aAAA,CAAe;IAAgB,CAAA;IAOrD;;;;OAIG;IACH,kCAVG,GAUH,UAVY,KAAO,EAAQ,SAAoC;QAW3D,EAAE,CAAC,CAAC,KAVC,IAAQ,IAAA,CAAK;YAAC,MAAA,CAAO,EAAA,CAAG;QAY7B,EAAE,CAAC,CAAC,OAVO,SAAA,KAAc,QAAA,IAAY,SAAA,KAAc,IAAA,CAAK,CAAC,CAAA;YAWvD,MAVM,wBAAA,CAAyB,cAAC,EAAe,SAAA,CAAU,CAAC;QAW5D,CAAC;QAED,IAAM,gBAAgB,CAVhB,GAAA,GAAM,iBAAA,CAAkB,KAAC,EAAM,MAAA,CAAO,IAAC,CAAI,SAAC,CAAS,EAAE,IAAA,CAAK,aAAC,CAAa,CAAC;QAYjF,MAAM,CAVC,SAAA,CAAU,GAAC,CAAG,CAAC,OAAC,CAAO,qBAAC,EAAsB,KAAA,CAAM,QAAC,EAAQ,CAAE,CAAC;IAWzE,CAAC;IAQH,qBAjBC;AAiBD,CA5BA,AAWC;;AAAM,yBAAA,GAA+C;IAWtD,EAVE,IAAA,EAAM,IAAA,EAhBN,IAAA,EAAA,CAAA,EAAK,IAAC,EAAK,YAAA,EAAc,IAAA,EAAM,IAAA,EAAK,EAAA,EAAA;CA2BrC,CAVC;AAWF,kBAAkB;AATX,6BAAA,GAA4F,cAAM,OAAA;IAWzG,EAAC,IAVC,EAAK,cAAA,GAAe;CAWrB,EAZwG,CAYxG,CAVC;AAaF;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,aAAa,CAAC;AACvC,CAAC","file":"i18n_plural_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {NgLocalization, getPluralCategory} from '../localization';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _INTERPOLATION_REGEXP: RegExp = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * \\@howToUse `expression | i18nPlural:mapping`\n * \\@description \n * \n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n * \n * \\@experimental\n */\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgLocalization, },\n];\n}\n\nfunction I18nPluralPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nPluralPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nPluralPipe.ctorParameters;\n/** @type {?} */\nI18nPluralPipe.prototype._localization;\n}\n\n"]}