{"version":3,"sources":["../../../../../../packages/common/src/pipes/number_pipe.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,MAAE,EAAO,SAAA,EAAW,IAAA,EAA0B,MAAA,eAAA,CAAA;AAMrD,OALO,EAAA,iBAAE,EAAkB,eAAA,EAAgB,MAAA,QAAA,CAAA;AAM3C,OALO,EAAA,wBAAE,EAAwB,MAAA,+BAAA,CAAA;AAOjC,IAAM,gBAAgB,CALhB,qBAAA,GAAwB,6BAAA,CAA8B;AAM5D;;;;;;;;;GASG;AACH,sBACI,IAde,EAAE,MAAQ,EAAQ,KAAgB,EAAQ,KAAO,EAehE,MAdkB,EAAM,QAA0B,EAelD,gBAd4B;IADJ,yBAAA,EAAA,eAA0B;IAelD,iCAAA,EAAA,wBAd4B;IAe9B,EAAE,CAAC,CAAC,KAdC,IAAQ,IAAA,CAAK;QAAC,MAAA,CAAO,IAAA,CAAK;IAgB/B,6BAAE;IACF,KAAK,GAdG,OAAO,KAAA,KAAU,QAAA,IAAY,SAAA,CAAU,KAAC,CAAK,GAAG,CAAA,KAAE,GAAO,KAAA,CAAM;IAevE,EAAE,CAAC,CAAC,OAdO,KAAA,KAAU,QAAA,CAAS,CAAC,CAAA;QAe7B,MAdM,wBAAA,CAAyB,IAAC,EAAK,KAAA,CAAM,CAAC;IAe9C,CAAC;IAED,IAAI,gBAAA,CAdA,MAAA,GAA2B,SAAA,CAAU;IAezC,IAAI,gBAAc,CAdd,WAAA,GAAgC,SAAA,CAAU;IAe9C,IAAI,gBAAS,CAdT,WAAA,GAAgC,SAAA,CAAU;IAe9C,EAAE,CAAC,CAAC,KAdC,KAAS,iBAAA,CAAkB,QAAC,CAAQ,CAAC,CAAA;QAexC,oCAAwB;QACxB,MAAM,GAdG,CAAA,CAAE;QAeX,WAAE,GAdY,CAAA,CAAE;QAehB,WAAW,GAdG,CAAA,CAAE;IAelB,CAAC;IAED,EAAE,CAAA,CAAA,MAdG,CAAM,CAAC,CAAA;QAeV,IAAM,gBAAgB,CAdhB,KAAA,GAAQ,MAAA,CAAO,KAAC,CAAK,qBAAC,CAAqB,CAAC;QAelD,EAAE,CAAC,CAAC,KAdC,KAAS,IAAA,CAAK,CAAC,CAAA;YAelB,MAdM,IAAI,KAAA,CAAO,MAAG,gDAAM,CAA6C,CAAC;QAe1E,CAAC;QACD,EAAE,CAAC,CAAC,KAdC,CAAK,CAAC,CAAC,IAAI,IAAA,CAAK,CAAC,CAAA;YAepB,MAAM,GAdG,iBAAA,CAAkB,KAAC,CAAK,CAAC,CAAC,CAAC,CAAC;QAevC,CAAC;QACD,EAAE,CAAA,CAAA,KAdG,CAAK,CAAC,CAAC,IAAI,IAAA,CAAK,CAAC,CAAA;YAexB,WAAA,GAdkB,iBAAA,CAAkB,KAAC,CAAK,CAAC,CAAC,CAAC,CAAC;QAe5C,CAAC;QACD,EAAE,CAAC,CAAC,KAdC,CAAK,CAAC,CAAC,IAAI,IAAA,CAAK,CAAC,CAAA;YAepB,WAAW,GAdG,iBAAA,CAAkB,KAAC,CAAK,CAAC,CAAC,CAAC,CAAC;QAe5C,CAAC;IACH,CAAC;IAED,MAAM,CAdC,eAAA,CAAgB,MAAC,CAAM,gBAAA,CAAA,CAAA,KAAS,CAAA,EAAQ,MAAA,EAAQ,KAAA,EAAO;QAe5D,oBAAoB,EAdE,MAAA;QAetB,qBAAqB,EAdE,WAAA;QAevB,qBAAqB,EAdE,WAAA;QAevB,QAAQ,EAdE,QAAA;QAeV,gBAAgB,EAdE,gBAAA;KAenB,CAdC,CAAC;AAeL,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH;IACA;;OAEG;IACH,qBAfyC,OAAS;QAAT,YAAA,GAAA,OAAA,CAAS;IAAQ,CAAA;IAiB1D;;;;OAIG;IACH,+BApBG,GAoBH,UApBY,KAAO,EAAK,MAAS;QAqB7B,MAAM,CApBC,YAAA,CAAa,WAAC,EAAY,IAAA,CAAK,OAAC,EAAQ,KAAA,EAAO,iBAAA,CAAkB,OAAC,EAAQ,MAAA,CAAO,CAAC;IAqB3F,CAAC;IAQH,kBA3BC;AA2BD,CArBA,AANC;;AAAM,sBAAA,GAA+C;IAqBtD,EApBE,IAAA,EAAM,IAAA,EARN,IAAA,EAAA,CAAA,EAAK,IAAC,EAAK,QAAA,EAAS,EAAA,EAAA;CA6BrB,CApBC;AAqBF,kBAAkB;AAnBX,0BAAA,GAA4F,cAAM,OAAA;IAqBzG,EAAC,IApBC,EAAK,SAAA,EAAW,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,MAAA,EAVvB,IAAA,EAAA,CAAA,SAAO,EAAA,EAAA,EAAA,EAAA;CA+BtB,EAtBwG,CAsBxG,CApBC;AAuBF;IACA,gBAPa;IAQb,WAAW,CAAC,UAPqB,CAAQ;IAQzC;;;OAGG;IACH,WAAW,CAAC,cAAc,CAAC;IAC3B,gBAfE;IAgBF,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;AAC9B,CAAC;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH;IACA;;OAEG;IACH,qBAzCyC,OAAS;QAAT,YAAA,GAAA,OAAA,CAAS;IAAQ,CAAA;IA2C1D;;;;OAIG;IACH,+BAvCG,GAuCH,UA9CY,KAAO,EAAK,MAAS;QA+C7B,MAAM,CA9CC,YAAA,CAAa,WAAC,EAAY,IAAA,CAAK,OAAC,EAAQ,KAAA,EAAO,iBAAA,CAAkB,OAAC,EAAQ,MAAA,CAAO,CAAC;IA+C3F,CAAC;IAQH,kBArDC;AAqDD,CArBA,AAhCC;;AAOM,sBAAA,GAA+C;IAwCtD,EAvCE,IAAA,EAAM,IAAA,EAfN,IAAA,EAAA,CAAA,EAAK,IAAC,EAAK,SAAA,EAAU,EAAA,EAAA;CAuDtB,CAvCC;AAwCF,kBAAkB;AAtCX,0BAAA,GAA4F,cAAM,OAAA;IAwCzG,EAAC,IAvCC,EAAK,SAAA,EAAW,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,MAAA,EAjBvB,IAAA,EAAA,CAAA,SAAO,EAAA,EAAA,EAAA,EAAA;CAyDtB,EAzCwG,CAyCxG,CAvCC;AA0CF;IACA,gBAAgB;IAChB,WAAW,CAAC,UAAU,CAAC;IACvB;;;OAGG;IACH,WArBO,CAAK,cAAW,CAAA;IAsBvB,gBArBc;IAsBd,WArBI,CAAA,SAAA,CAAA,OAAA,CAAA;AAsBJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IACA;;OAEG;IACH,sBAnEyC,OAAS;QAAT,YAAA,GAAA,OAAA,CAAS;IAAQ,CAAA;IAqE1D;;;;;;OAMG;IACH,gCA5DG,GA4DH,UACM,KA1EO,EAAK,YAAuB,EAAO,aAAyB,EA2EnE,MA1ES;QADG,6BAAA,EAAA,oBAAuB;QAAO,8BAAA,EAAA,qBAAyB;QA4ErE,MAAM,CA1EC,YAAA,CA2EH,YAAY,EA1EE,IAAA,CAAK,OAAC,EAAQ,KAAA,EAAO,iBAAA,CAAkB,QAAC,EAAS,MAAA,EAAQ,YAAA,EA2EvE,aAAa,CA1EC,CAAC;IA2ErB,CAAC;IAQH,mBAjFC;AAiFD,CA3BA,AAtDC;;AAcM,uBAAA,GAA+C;IA6DtD,EA5DE,IAAA,EAAM,IAAA,EA1BN,IAAA,EAAA,CAAA,EAAK,IAAC,EAAK,UAAA,EAAW,EAAA,EAAA;CAuFvB,CA5DC;AA6DF,kBAAkB;AA3DX,2BAAA,GAA4F,cAAM,OAAA;IA6DzG,EAAC,IA5DC,EAAK,SAAA,EAAW,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,MAAA,EA5BvB,IAAA,EAAA,CAAA,SAAO,EAAA,EAAA,EAAA,EAAA;CAyFtB,EA9DwG,CA8DxG,CA5DC;AA+DF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;AAC/B,CAAC;AAED;;;GAGG;AACH,2BAjG2B,IAAM;IAkG/B,IAAM,gBAAgB,CAjGhB,MAAA,GAAiB,QAAA,CAAS,IAAC,CAAI,CAAC;IAkGtC,EAAE,CAAC,CAAC,KAjGC,CAAK,MAAC,CAAM,CAAC,CAAC,CAAA;QAkGjB,MAjGM,IAAI,KAAA,CAAM,uCAAC,GAAyC,IAAA,CAAK,CAAC;IAkGlE,CAAC;IACD,MAAM,CAjGC,MAAA,CAAO;AAkGhB,CAAC;AACD;;;GAGG;AACH,MA/EC,oBArByB,KAAO;IAqG/B,MAAM,CApGC,CAAA,KAAE,CAAK,KAAC,GAAO,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC;AAqG3C,CAAC","file":"number_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NumberFormatStyle, NumberFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && isNumeric(value) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number|undefined = undefined;\n  let /** @type {?} */ minFraction: number|undefined = undefined;\n  let /** @type {?} */ maxFraction: number|undefined = undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode,\n        symbolDisplay);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text: string): number {\n  const /** @type {?} */ result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isNumeric(value: any): boolean {\n  return !isNaN(value - parseFloat(value));\n}\n"]}