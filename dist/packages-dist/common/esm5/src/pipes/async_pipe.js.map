{"version":3,"sources":["../../../../../../packages/common/src/pipes/async_pipe.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,iBAAE,EAA2C,IAAA,EAAqB,YAAA,EAAc,aAAA,EAAe,UAAA,EAAW,MAAA,eAAA,CAAA;AAQjH,OALO,EAAA,wBAAE,EAAwB,MAAA,+BAAA,CAAA;AAMjC;;GAEG;AACH,kCAAyB,CAAA;AAGzB;IACA,gBAAgB;IAChB,oBAAW,CAAA,SAAa,CAAA,kBAAuB,CAAA;IAC/C,gBAAgB;IAChB,oBAAa,CAAA,SAAa,CAAA,OAAA,CAAA;IAC1B,gBAAE;IACF,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;AACzC,CAAC;AASD;IAAA;IAmBA,CA9BC;IAYD;;;;OAIG;IACH,+CAxBG,GAwBH,UAxBqB,KAAsB,EAAE,iBAAmB;QAyB5D,MAAM,CAxBC,KAAA,CAAM,SAAC,CAAS,EAAC,IAAC,EAAK,iBAAA,EAAmB,KAAA,EAAO,UAAA,CAAI,IAAU,MAAM,CAAA,CAAE,CAAC,CAAA,EAAE,CAAC,CAAC;IAyBrF,CAAC;IACH;;;OAGG;IACH,oCA3BG,GA2BH,UA3BU,YAAc,IAAuB,YAAA,CAAa,WAAC,EAAW,CAAE,CAAC,CAAA;IA4B3E;;;OAGG;IACH,sCA9BG,GA8BH,UA9BY,YAAc,IAAuB,YAAA,CAAa,WAAC,EAAW,CAAE,CAAC,CAAA;IA+B7E,yBA9BC;AA8BD,CAnBA,AAXC,IAAA;AA+BD;IAAA;IAmBA,CAxCC;IAsBD;;;;OAIG;IACH,4CAlCG,GAkCH,UAlCqB,KAAmB,EAAE,iBAA+B;QAmCrE,MAAM,CAlCC,KAAA,CAAM,IAAC,CAAI,iBAAC,EAAkB,UAAA,CAAA,IAAO,MAAM,CAAA,CAAE,CAAC,CAAA,CAAE,CAAC;IAmC1D,CAAC;IACH;;;OAGG;IACH,iCArCG,GAqCH,UArCU,YAA0B,IAAQ,CAAA;IAsC5C;;;OAGG;IACH,mCAxCG,GAwCH,UAxCY,YAA0B,IAAQ,CAAA;IAyC9C,sBAxCC;AAwCD,CAnBA,AArBC,IAAA;AA0CD,IAAM,gBAAQ,CAxCR,gBAAA,GAAmB,IAAI,eAAA,EAAgB,CAAE;AAyC/C,IAAM,gBAAgB,CAxChB,mBAAA,GAAsB,IAAI,kBAAA,EAAmB,CAAE;AAyCrD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH;IAMA;;OAEG;IACH,mBAvCsB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;QAPlB,iBAAA,GAAoB,IAAA,CAAK;QACzB,yBAAA,GAA4B,IAAA,CAAK;QAEjC,kBAAA,GAAiD,IAAA,CAAK;QACtD,SAAA,GAA4D,IAAA,CAAK;QACjE,cAAA,GAAgC,CAAA,CAAE,IAAA,CAAA,CAAA,CAAO;IAEJ,CAAA;IAwC/C;;OAEG;IACH,+BAzCG,GAyCH;QACI,EAAE,CAAA,CAAA,IAzCG,CAAI,aAAC,CAAa,CAAC,CAAA;YA0CtB,IAAI,CAzCC,QAAC,EAAQ,CAAE;QA0ClB,CAAC;IACH,CAAC;IAMH;;;OAGG;IACH,6BA7CG,GA6CH,UA7CY,GAAwC;QA8ChD,EAAE,CAAC,CAAC,CA7CC,IAAC,CAAI,IAAC,CAAI,CAAC,CAAA;YA8ChB,EAAA,CAAA,CAAA,GA7CO,CAAG,CAAC,CAAA;gBA8CP,IAAI,CA7CC,UAAC,CAAU,GAAC,CAAG,CAAC;YA8CvB,CAAC;YACD,IAAG,CA7CE,oBAAC,GAAsB,IAAA,CAAK,YAAC,CAAY;YA8C9C,MAAM,CA7CC,IAAA,CAAK,YAAC,CAAY;QA8C3B,CAAC;QAED,EAAA,CAAA,CAAA,GA7CK,KAAO,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA;YA8CrB,IAAI,CA7CC,QAAC,EAAQ,CAAE;YA8ChB,MA7EJ,CAgCW,IAAA,CAAK,SAAC,CAAS,gBAAA,CAAA,CAAA,GAAO,CAAA,CAAI,CAAC;QA8CpC,CAAC;QAED,EAAE,CAAC,CAAC,IA7CC,CAAI,YAAC,KAAgB,IAAA,CAAK,oBAAC,CAAoB,CAAC,CAAA;YA8CnD,MAAM,CA7CC,IAAA,CAAK,oBAAC,CAAoB;QA8CnC,CAAC;QAED,IAAI,CA7CC,oBAAC,GAAsB,IAAA,CAAK,YAAC,CAAY;QA8C9C,MAAM,CA7CC,YAAA,CAAa,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,CAAC;IA8C9C,CAAC;IACH;;;OAGG;IA/CO,8BAAA,GAiDV,UAjDqB,GAAmD;QAiDxE,iBAKG;QAJC,IAAI,CAjDC,IAAC,GAAM,GAAA,CAAI;QAkDhB,IAAI,CAjDC,SAAC,GAAW,IAAA,CAAK,eAAC,CAAe,GAAC,CAAG,CAAC;QAkD3C,IAAI,CAjDC,aAAC,GAAe,IAAA,CAAK,SAAC,CAAS,kBAAC,CAkDjC,GAAG,EAjDE,UAAA,KAAQ,IAAW,OAAA,KAAA,CAAK,kBAAC,CAAkB,GAAC,EAAI,KAAA,CAAM,EAAnC,CAAmC,CAAC,CAAC;IAkDnE,CAAC;IACH;;;OAGG;IAnDO,mCAAA,GAqDV,UArD0B,GAAmD;QAsDzE,EAAE,CAAC,CAAC,UArDC,CAAU,GAAC,CAAG,CAAC,CAAC,CAAA;YAsDnB,MAAM,CArDC,gBAAA,CAAiB;QAsD1B,CAAC;QAED,EAAE,CAAC,CAAC,aArDC,CAAa,GAAC,CAAG,CAAC,CAAC,CAAA;YAsDtB,MAAM,CArDC,mBAAA,CAAoB;QAsD7B,CAAC;QAED,MArDM,wBAAA,CAAyB,SAAC,EAAU,GAAA,CAAI,CAAC;IAsDjD,CAAC;IACH;;OAEG;IAtDO,4BAAA,GAwDV;QACI,IAAI,CAxDC,SAAC,CAAS,OAAC,CAAO,gBAAA,CAAA,CAAA,CAAA,IAAC,CAAI,aAAC,CAAA,CAAA,CAAe,CAAC;QAyD7C,IAAI,CAxDC,YAAC,GAAc,IAAA,CAAK;QAyDzB,IAAI,CAxDC,oBAAC,GAAsB,IAAA,CAAK;QAyDjC,IAAI,CAxDC,aAAC,GAAe,IAAA,CAAK;QAyD1B,IAAI,CAxDC,IAAC,GAAM,IAAA,CAAK;IAyDnB,CAAC;IACH;;;;OAIG;IA3DO,sCAAA,GA6DV,UA7D6B,KAAO,EAAK,KAAO;QA8D5C,EAAE,CAAC,CAAC,KA7DC,KAAS,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA;YA8DvB,IAAI,CA7DC,YAAC,GAAc,KAAA,CAAM;YA8D1B,IAAI,CA7DC,IAAC,CAAI,YAAC,EAAY,CAAE;QA8D3B,CAAC;IACH,CAAC;IAQH,gBApEC;AAoED,CAzGA,AAqCC;;AAAM,oBAAA,GAA+C;IA8DtD,EA7DE,IAAA,EAAM,IAAA,EA7EN,IAAA,EAAA,CAAA,EAAK,IAAC,EAAK,OAAA,EAAS,IAAA,EAAM,KAAA,EAAM,EAAA,EAAA;CA2IjC,CA7DC;AA8DF,kBAAkB;AA5DX,wBAAA,GAA4F,cAAM,OAAA;IA8DzG,EAAC,IA7DC,EAAK,iBAAA,GAAkB;CA8DxB,EA/DwG,CA+DxG,CA7DC;AAgEF;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC;IACjC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACzC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC;IAClC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;AACzB,CAAC","file":"async_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ɵisObservable, ɵisPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ISubscription} from 'rxjs/Subscription';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * @record\n */\nfunction SubscriptionStrategy() {}\n\n\nfunction SubscriptionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nSubscriptionStrategy.prototype.createSubscription;\n/** @type {?} */\nSubscriptionStrategy.prototype.dispose;\n/** @type {?} */\nSubscriptionStrategy.prototype.onDestroy;\n}\n\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): ISubscription\n      |Promise<any>;\n  dispose(subscription: ISubscription|Promise<any>): void;\n  onDestroy(subscription: ISubscription|Promise<any>): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Observable<any>, updateLatestValue: any): ISubscription {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: ISubscription): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: ISubscription): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: Promise<any>): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: Promise<any>): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: any = null;\nprivate _latestReturnedValue: any = null;\nprivate _subscription: ISubscription|Promise<any>|null = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\nprivate _strategy: SubscriptionStrategy = /** @type {?} */(( null));\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>): T|null;\n  transform<T>(obj: Promise<T>): T|null;\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform( /** @type {?} */((obj as any)));\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\n\nprivate _dispose(): void {\n    this._strategy.dispose( /** @type {?} */((this._subscription)));\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\n\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n"]}