{"version":3,"sources":["../../../../../../packages/common/src/pipes/date_pipe.ts"],"names":[],"mappings":"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","file":"date_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {DateFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\nimport {isNumeric} from './number_pipe';\n\nconst /** @type {?} */ ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a date according to locale rules.\n * \\@howToUse `date_expression | date[:format]`\n * \\@description \n * \n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n * \n * \n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (1 PM)  | jj (1 PM) |\n *  | hour12    |   h    | -      | -            | -                 | h (1)     | hh (01)   |\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n * \n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n * \n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n * \n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n * \n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n * \n * ### Examples\n * \n * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n * in the _local_ time and locale is 'en-US':\n * \n * ```\n *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n * \n * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\n * \n * \\@stable\n */\nexport class DatePipe implements PipeTransform {\n/**\n * \\@internal\n */\nstatic _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} pattern\n * @return {?}\n */\ntransform(value: any, pattern: string = 'mediumDate'): string|null {\n    let /** @type {?} */ date: Date;\n\n    if (isBlank(value) || value !== value) return null;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (isNumeric(value)) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n/**\n * For ISO Strings without time the day, month and year must be extracted from the ISO String\n * before Date creation to avoid time offset and errors in the new Date.\n * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n * date, some browsers (e.g. IE 9) will throw an invalid Date error\n * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n * is applied\n * Note: ISO months are 0 for January, 1 for February, ...\n */\nconst [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DatePipe_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nDatePipe._ALIASES;\n/** @type {?} */\nDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatePipe.ctorParameters;\n/** @type {?} */\nDatePipe.prototype._locale;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isBlank(obj: any): boolean {\n  return obj == null || obj === '';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isDate(obj: any): obj is Date {\n  return obj instanceof Date && !isNaN(obj.valueOf());\n}\n/**\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match: RegExpMatchArray): Date {\n  const /** @type {?} */ date = new Date(0);\n  let /** @type {?} */ tzHour = 0;\n  let /** @type {?} */ tzMin = 0;\n  const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  if (match[9]) {\n    tzHour = toInt(match[9] + match[10]);\n    tzMin = toInt(match[9] + match[11]);\n  }\n  dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n  const /** @type {?} */ h = toInt(match[4] || '0') - tzHour;\n  const /** @type {?} */ m = toInt(match[5] || '0') - tzMin;\n  const /** @type {?} */ s = toInt(match[6] || '0');\n  const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction toInt(str: string): number {\n  return parseInt(str, 10);\n}\n"]}