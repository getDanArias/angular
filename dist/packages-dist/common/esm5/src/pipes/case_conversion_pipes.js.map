{"version":3,"sources":["../../../../../../packages/common/src/pipes/case_conversion_pipes.ts"],"names":[],"mappings":"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","file":"case_conversion_pipes.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n"]}