{"version":3,"sources":["../../../../../../packages/common/http/src/response.ts"],"names":[],"mappings":"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","file":"response.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\nexport type HttpEventType = number;\nexport let HttpEventType: any = {};\nHttpEventType.Sent = 0;\nHttpEventType.UploadProgress = 1;\nHttpEventType.ResponseHeader = 2;\nHttpEventType.DownloadProgress = 3;\nHttpEventType.Response = 4;\nHttpEventType.User = 5;\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n\n/**\n * Base interface for progress events.\n * \n * \\@experimental\n * @record\n */\nexport function HttpProgressEvent() {}\n\n\nfunction HttpProgressEvent_tsickle_Closure_declarations() {\n/**\n * Progress event type is either upload or download.\n * @type {?}\n */\nHttpProgressEvent.prototype.type;\n/**\n * Number of bytes uploaded or downloaded.\n * @type {?}\n */\nHttpProgressEvent.prototype.loaded;\n/**\n * Total number of bytes to upload or download. Depending on the request or\n * response, this may not be computable and thus may not be present.\n * @type {?|undefined}\n */\nHttpProgressEvent.prototype.total;\n}\n\n\n/**\n * Base interface for progress events.\n *\n * @experimental\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n/**\n * A download progress event.\n * \n * \\@experimental\n * @record\n */\nexport function HttpDownloadProgressEvent() {}\n\n\nfunction HttpDownloadProgressEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpDownloadProgressEvent.prototype.type;\n/**\n * The partial response body as downloaded so far.\n * \n * Only present if the responseType was `text`.\n * @type {?|undefined}\n */\nHttpDownloadProgressEvent.prototype.partialText;\n}\n\n\n/**\n * A download progress event.\n *\n * @experimental\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n/**\n * An upload progress event.\n * \n * \\@experimental\n * @record\n */\nexport function HttpUploadProgressEvent() {}\n\n\nfunction HttpUploadProgressEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpUploadProgressEvent.prototype.type;\n}\n\n\n/**\n * An upload progress event.\n *\n * @experimental\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n * \n * \\@experimental\n * @record\n */\nexport function HttpSentEvent() {}\n\n\nfunction HttpSentEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpSentEvent.prototype.type;\n}\n\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @experimental\n */\nexport interface HttpSentEvent { type: HttpEventType.Sent; }\n/**\n * A user-defined event.\n * \n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n * \n * \\@experimental\n * @record\n */\nexport function HttpUserEvent() {}\n\n\nfunction HttpUserEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpUserEvent.prototype.type;\n}\n\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @experimental\n */\nexport interface HttpUserEvent<T> { type: HttpEventType.User; }\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n * \n * It bundles the Error object with the actual response body that failed to parse.\n * \n * \\@experimental\n * @record\n */\nexport function HttpJsonParseError() {}\n\n\nfunction HttpJsonParseError_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpJsonParseError.prototype.error;\n/** @type {?} */\nHttpJsonParseError.prototype.text;\n}\n\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * @experimental\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @experimental\n */\nexport type HttpEvent<T> =\n    HttpSentEvent | HttpHeaderResponse | HttpResponse<T>| HttpProgressEvent | HttpUserEvent<T>;\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpResponseBase {\n/**\n * All response headers.\n */\nreadonly headers: HttpHeaders;\n/**\n * Response status code.\n */\nreadonly status: number;\n/**\n * Textual description of response status code.\n * \n * Do not depend on this.\n */\nreadonly statusText: string;\n/**\n * URL of the resource retrieved, or null if not available.\n */\nreadonly url: string|null;\n/**\n * Whether the status code falls in the 2xx range.\n */\nreadonly ok: boolean;\n/**\n * Type of the response, narrowed to either the full response or the header.\n */\nreadonly type: HttpEventType.Response|HttpEventType.ResponseHeader;\n/**\n * Super-constructor for all responses.\n * \n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n * @param {?} init\n * @param {?=} defaultStatus\n * @param {?=} defaultStatusText\n */\nconstructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = 200, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\nfunction HttpResponseBase_tsickle_Closure_declarations() {\n/**\n * All response headers.\n * @type {?}\n */\nHttpResponseBase.prototype.headers;\n/**\n * Response status code.\n * @type {?}\n */\nHttpResponseBase.prototype.status;\n/**\n * Textual description of response status code.\n * \n * Do not depend on this.\n * @type {?}\n */\nHttpResponseBase.prototype.statusText;\n/**\n * URL of the resource retrieved, or null if not available.\n * @type {?}\n */\nHttpResponseBase.prototype.url;\n/**\n * Whether the status code falls in the 2xx range.\n * @type {?}\n */\nHttpResponseBase.prototype.ok;\n/**\n * Type of the response, narrowed to either the full response or the header.\n * @type {?}\n */\nHttpResponseBase.prototype.type;\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n * \n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n * \n * \\@experimental\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n/**\n * Create a new `HttpHeaderResponse` with the given parameters.\n * @param {?=} init\n */\nconstructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n/**\n * Copy this `HttpHeaderResponse`, overriding its contents with the\n * given parameter hash.\n * @param {?=} update\n * @return {?}\n */\nclone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\nfunction HttpHeaderResponse_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpHeaderResponse.prototype.type;\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n * \n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n * \n * \\@experimental\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n/**\n * The response body, or `null` if one was not returned.\n */\nreadonly body: T|null;\n/**\n * Construct a new `HttpResponse`.\n * @param {?=} init\n */\nconstructor(init: {\n    body?: T | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body || null;\n  }\n\n  readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }): HttpResponse<V>;\n/**\n * @param {?=} update\n * @return {?}\n */\nclone(update: {\n    body?: any | null; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\nfunction HttpResponse_tsickle_Closure_declarations() {\n/**\n * The response body, or `null` if one was not returned.\n * @type {?}\n */\nHttpResponse.prototype.body;\n/** @type {?} */\nHttpResponse.prototype.type;\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n * \n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n * \n * \\@experimental\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n/**\n * Errors are never okay, even when the status code is in the 2xx success range.\n */\nreadonly ok = false;\n/**\n * @param {?} init\n */\nconstructor(init: {\n    error?: any; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message =\n          `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\nfunction HttpErrorResponse_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpErrorResponse.prototype.name;\n/** @type {?} */\nHttpErrorResponse.prototype.message;\n/** @type {?} */\nHttpErrorResponse.prototype.error;\n/**\n * Errors are never okay, even when the status code is in the 2xx success range.\n * @type {?}\n */\nHttpErrorResponse.prototype.ok;\n}\n\n"]}