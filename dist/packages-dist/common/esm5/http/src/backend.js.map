{"version":3,"sources":["../../../../../../packages/common/http/src/backend.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAaH;;;;;;;;;;;;GAYG;AACH;IAAA;IAEA,CALC;IAKD,kBALC;AAKD,CAFA,AAHC,IAAA;;AAOD;IAEA;;;;OAIG;IACH,WAAW,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,GAAG,IAAG,CAAC,CAAC;AAChD,CAAC;AAED;;;;;;;;;;GAUG;AACH;IAAA;IAEA,CAhBC;IAgBD,kBAhBC;AAgBD,CAFA,AAdC,IAAA;;AAkBD;IAEA;;;;OAIG;IACH,WAAW,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,GAAG,IAAG,CAAC,CAAC;AAChD,CAAC","file":"backend.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n * \n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n * \n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\nfunction HttpHandler_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nHttpHandler.prototype.handle = function(req) {};\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n * \n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n * \n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\nfunction HttpBackend_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nHttpBackend.prototype.handle = function(req) {};\n}\n\n"]}