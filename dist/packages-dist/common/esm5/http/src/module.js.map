{"version":3,"sources":["../../../../../../packages/common/http/src/module.ts"],"names":[],"mappings":"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","file":"module.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, ModuleWithProviders, NgModule, Optional} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n * \n * Meant to be used as a factory function within `HttpClientModule`.\n * \n * \\@experimental\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[] | null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n * \n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n * \n * \\@experimental\n * @return {?}\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n * \n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n * \n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n * \n * \\@experimental\n */\nexport class HttpClientXsrfModule {\n/**\n * Disable the default XSRF protection.\n * @return {?}\n */\nstatic disable(): ModuleWithProviders {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n/**\n * Configure XSRF protection to use the given cookie name or header name,\n * or the default names (as described above) if not provided.\n * @param {?=} options\n * @return {?}\n */\nstatic withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientXsrfModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientXsrfModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientXsrfModule.ctorParameters;\n}\n\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n * \n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n * \n * \\@experimental\n */\nexport class HttpClientModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  providers: [\n    HttpClient,\n    // HttpHandler is the backend + interceptors and is constructed\n    // using the interceptingHandler factory function.\n    {\n      provide: HttpHandler,\n      useFactory: interceptingHandler,\n      deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n    },\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientModule.ctorParameters;\n}\n\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n * \n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n * \n * \\@experimental\n */\nexport class HttpClientJsonpModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientJsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientJsonpModule.ctorParameters;\n}\n\n"]}