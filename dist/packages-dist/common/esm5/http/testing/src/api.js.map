{"version":3,"sources":["../../../../../../../packages/common/http/testing/src/api.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAaH;;;;;GAKG;AACH,MAAM,2BAA0B,CAAC;AAGjC;IACA,0BAA0B;IAC1B,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,0BAA0B;IAC1B,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC;AAC3B,CAAC;AAYD;;;;;;GAMG;AACH;IAAA;IAwFA,CArBC;IAqBD,4BArBC;AAqBD,CAxFA,AAmEC,IAAA;;AAuBD;IAEA;;;;;OAKG;IACH,qBAAqB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,KAAK,IAAG,CAAC,CAAC;IAE3D;;;;;;;;;;OAUG;IACH,qBAAqB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,GAAG,EAAE,WAAW,IAAG,CAAC,CAAC;IAE1E;;;;;;;;;;OAUG;IACH,qBAAqB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,MAAM,EAAE,WAAW,IAAG,CAAC,CAAC;IAE7E;;;;;;;;;;OAUG;IACH,qBAAqB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,OAAO,EAAE,WAAW,IAAG,CAAC,CAAC;IAE9E;;;;;;;;;;OAUG;IACH,qBAAqB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,KAAK,EAAE,WAAW,IAAG,CAAC,CAAC;IAE5E;;;;;;;;;OASG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,GAAG,EAAE,WAAW,IAAG,CAAC,CAAC;IAE3E;;;;;;;;;OASG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,MAAM,EAAE,WAAW,IAAG,CAAC,CAAC;IAE9E;;;;;;;;;OASG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,OAAO,EAAE,WAAW,IAAG,CAAC,CAAC;IAE/E;;;;;;;;;OASG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,KAAK,EAAE,WAAW,IAAG,CAAC,CAAC;IAE7E;;;;;;;;;;;OAWG;IACH,qBAAqB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,IAAI,IAAG,CAAC,CAAC;AAC3D,CAAC","file":"api.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpRequest} from '@angular/common/http';\n\nimport {TestRequest} from './request';\n/**\n * Defines a matcher for requests based on URL, method, or both.\n * \n * \\@experimental\n * @record\n */\nexport function RequestMatch() {}\n\n\nfunction RequestMatch_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nRequestMatch.prototype.method;\n/** @type {?|undefined} */\nRequestMatch.prototype.url;\n}\n\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @experimental\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpTestingController {\n  /**\n   * Search for requests that match the given parameter, without any expectations.\n   */\n  abstract match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[];\n\n  /**\n   * Expect that a single request has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(url: string, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean),\n      description?: string): TestRequest;\n\n  /**\n   * Expect that no requests have been made which match the given URL.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(url: string, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given parameters.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(params: RequestMatch, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given predicate function.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given condition.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Verify that no unmatched requests are outstanding.\n   *\n   * If any requests are outstanding, fail with an error message indicating which requests were not\n   * handled.\n   *\n   * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n   * were not explicitly matched.\n   */\n  abstract verify(opts?: {ignoreCancelled?: boolean}): void;\n}\n\nfunction HttpTestingController_tsickle_Closure_declarations() {\n\n/**\n * Search for requests that match the given parameter, without any expectations.\n * @abstract\n * @param {?} match\n * @return {?}\n */\nHttpTestingController.prototype.match = function(match) {};\n\n/**\n * Expect that a single request has been made which matches the given URL, and return its\n * mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} url\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(url, description) {};\n\n/**\n * Expect that a single request has been made which matches the given parameters, and return\n * its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} params\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(params, description) {};\n\n/**\n * Expect that a single request has been made which matches the given predicate function, and\n * return its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} matchFn\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(matchFn, description) {};\n\n/**\n * Expect that a single request has been made which matches the given condition, and return\n * its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(match, description) {};\n\n/**\n * Expect that no requests have been made which match the given URL.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} url\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(url, description) {};\n\n/**\n * Expect that no requests have been made which match the given parameters.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} params\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(params, description) {};\n\n/**\n * Expect that no requests have been made which match the given predicate function.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} matchFn\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(matchFn, description) {};\n\n/**\n * Expect that no requests have been made which match the given condition.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(match, description) {};\n\n/**\n * Verify that no unmatched requests are outstanding.\n * \n * If any requests are outstanding, fail with an error message indicating which requests were not\n * handled.\n * \n * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n * were not explicitly matched.\n * @abstract\n * @param {?=} opts\n * @return {?}\n */\nHttpTestingController.prototype.verify = function(opts) {};\n}\n\n"]}