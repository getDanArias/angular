{"version":3,"sources":["../../../../../../../packages/common/http/testing/src/request.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,iBAAE,EAA4C,WAAA,EAA0B,YAAA,EAAa,MAAA,sBAAA,CAAA;AAO5F;;;;;;;GAOG;AACH;IAUA;;;OAGG;IACH,qBAPqB,OAAyB,EAAU,QAAkC;QAArE,YAAA,GAAA,OAAA,CAAyB;QAAU,aAAA,GAAA,QAAA,CAAkC;QAD1F;;WAEG;QACH,eAJG,GAAY,KAAA,CAAM;IAEuE,CAAA;IAF5F,sBALM,kCAAA;QACN;;;WAGG;aACH,cAL6B,MAAA,CAAO,IAAA,CAAK,UAAC,CAAU,CAAC,CAAA;;;OAAA;IAgBrD;;;;;;;;OAQG;IACH,2BAVG,GAUH,UAVQ,IAA2E,EAAK,IAIlF;QAJkF,qBAAA,EAAA,SAIlF;QAWF,EAAE,CAAC,CAAC,IAVC,CAAI,SAAC,CAAS,CAAC,CAAA;YAWlB,MAVM,IAAI,KAAA,CAAM,mCAAC,CAAmC,CAAC;QAWvD,CAAC;QACD,IAAM,gBAAgB,CAVhB,GAAA,GAAM,IAAA,CAAK,OAAC,CAAO,aAAC,CAAa;QAWvC,IAAM,gBAAgB,CAVhB,OAAA,GAWF,CAAC,IAVC,CAAI,OAAC,YAAkB,WAAA,CAAY,GAAG,IAAA,CAAK,OAAC,GAAS,IAAI,WAAA,CAAY,IAAC,CAAI,OAAC,CAAO,CAAC;QAWzF,IAAI,GAVG,iBAAA,CAAkB,IAAC,CAAI,OAAC,CAAO,YAAC,EAAa,IAAA,CAAK,CAAC;QAW1D,IAAI,gBAAgB,CAVhB,UAAA,GAA+B,IAAA,CAAK,UAAC,CAAU;QAWnD,IAAI,gBAAgB,CAVhB,MAAA,GAAiB,IAAA,CAAK,MAAC,KAAU,SAAA,GAAY,IAAA,CAAK,MAAC,GAAQ,GAAA,CAAI;QAWnE,EAAE,CAAC,CAAC,IAVC,CAAI,MAAC,KAAU,SAAA,CAAU,CAAC,CAAA;YAW7B,EAAE,CAAC,CAAC,IAVC,KAAQ,IAAA,CAAK,CAAC,CAAA;gBAWjB,MAAM,GAVG,GAAA,CAAI;gBAWb,UAAU,GAVG,UAAA,IAAc,YAAA,CAAa;YAW1C,CAAC;YAVC,IAAA,CAAK,CAAA;gBAWL,UAAU,GAVG,UAAA,IAAc,IAAA,CAAK;YAWlC,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,UAVC,KAAc,SAAA,CAAU,CAAC,CAAA;YAW5B,MAVM,IAAI,KAAA,CAAM,sDAAC,CAAsD,CAAC;QAW1E,CAAC;QACD,EAAE,CAAC,CAAC,MAVC,IAAS,GAAA,IAAO,MAAA,GAAS,GAAA,CAAI,CAAC,CAAA;YAWjC,IAAI,CAVC,QAAC,CAAQ,IAAC,CAAI,IAAI,YAAA,CAAiB,EAAE,IAAC,MAAA,EAAK,OAAA,SAAA,EAAS,MAAA,QAAA,EAAQ,UAAA,YAAA,EAAY,GAAA,KAAA,EAAI,CAAC,CAAC,CAAC;YAWpF,IAAI,CAVC,QAAC,CAAQ,QAAC,EAAQ,CAAE;QAW3B,CAAC;QAVC,IAAA,CAAK,CAAA;YAWL,IAAI,CAVC,QAAC,CAAQ,KAAC,CAAK,IAAI,iBAAA,CAAkB,EAAC,KAAC,EAAM,IAAA,EAAM,OAAA,SAAA,EAAS,MAAA,QAAA,EAAQ,UAAA,YAAA,EAAY,GAAA,KAAA,EAAI,CAAC,CAAC,CAAC;QAW9F,CAAC;IACH,CAAC;IACH;;;;;OAKG;IACH,2BAZG,GAYH,UAZQ,KAAO,EAAY,IAIrB;QAJqB,qBAAA,EAAA,SAIrB;QAaF,EAAE,CAAC,CAAC,IAZC,CAAI,SAAC,CAAS,CAAC,CAAA;YAalB,MAZM,IAAI,KAAA,CAAM,iDAAC,CAAiD,CAAC;QAarE,CAAC;QACD,EAAE,CAAC,CAAC,IAZC,CAAI,MAAC,IAAS,IAAA,CAAK,MAAC,IAAS,GAAA,IAAO,IAAA,CAAK,MAAC,GAAQ,GAAA,CAAI,CAAC,CAAA;YAa1D,MAZM,IAAI,KAAA,CAAM,0CAAC,CAA0C,CAAC;QAa9D,CAAC;QACD,IAAM,gBAAgB,CAZhB,OAAA,GAaF,CAAC,IAZC,CAAI,OAAC,YAAkB,WAAA,CAAY,GAAG,IAAA,CAAK,OAAC,GAAS,IAAI,WAAA,CAAY,IAAC,CAAI,OAAC,CAAO,CAAC;QAazF,IAAI,CAZC,QAAC,CAAQ,KAAC,CAAK,IAAI,iBAAA,CAAkB;YAaxC,KAAK,OAAA;YACL,OAAO,SAAA;YACP,MAAM,EAZE,IAAA,CAAK,MAAC,IAAS,CAAA;YAavB,UAAU,EAZE,IAAA,CAAK,UAAC,IAAa,EAAA;YAa/B,GAAG,EAZE,IAAA,CAAK,OAAC,CAAO,aAAC;SAapB,CAZC,CAAC,CAAC;IAaN,CAAC;IACH;;;;;OAKG;IACH,2BAbG,GAaH,UAbQ,KAAqB;QAczB,EAAE,CAAC,CAAC,IAbC,CAAI,SAAC,CAAS,CAAC,CAAA;YAclB,MAbM,IAAI,KAAA,CAAM,4CAAC,CAA4C,CAAC;QAchE,CAAC;QACD,IAAI,CAbC,QAAC,CAAQ,IAAC,CAAI,KAAC,CAAK,CAAC;IAc5B,CAAC;IACH,kBAbC;AAaD,CAhGA,AAmFC,IAAA;;AAeD;IACA;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC;IACjC,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;IAC9B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC/B,CAAC;AAED;;;;GAIG;AACH,4BACI,IAzBkC;IA2BpC,EAAE,CAAC,CAAC,OA1BO,WAAA,KAAgB,WAAA,CAAY,CAAC,CAAA;QA2BtC,MA1BM,IAAI,KAAA,CAAM,2DAAC,CAA2D,CAAC;IA2B/E,CAAC;IACD,EAAE,CAAC,CAAC,IA1BC,YAAe,WAAA,CAAY,CAAC,CAAA;QA2B/B,MAAM,CA1BC,IAAA,CAAK;IA2Bd,CAAC;IACD,MA1BM,IAAI,KAAA,CAAM,yEAAC,CAAyE,CAAC;AA2B7F,CAAC;AACD;;;;GAIG;AACH,iBACI,IA1BkC;IA4BpC,EAAE,CAAC,CAAC,OA3BO,IAAA,KAAS,WAAA,CAAY,CAAC,CAAA;QA4B/B,MA3BM,IAAI,KAAA,CAAM,oDAAC,CAAoD,CAAC;IA4BxE,CAAC;IACD,EAAE,CAAC,CAAC,IA3BC,YAAe,IAAA,CAAK,CAAC,CAAA;QA4BxB,MAAM,CA3BC,IAAA,CAAK;IA4Bd,CAAC;IACD,EAAE,CAAC,CAAC,WA3BC,IAAc,IAAA,YAAgB,WAAA,CAAY,CAAC,CAAA;QA4B9C,MAAM,CA3BC,IAAI,IAAA,CAAK,CAAC,IAAC,CAAI,CAAC,CAAC;IA4B1B,CAAC;IACD,MA3BM,IAAI,KAAA,CAAM,kEAAC,CAAkE,CAAC;AA4BtF,CAAC;AACD;;;;;GAKG;AACH,qBACI,IA7BwF,EA8BxF,MA7BiB;IA6BjB,uBAAA,EAAA,eA7BiB;IA8BnB,EAAE,CAAC,CAAC,OA7BO,WAAA,KAAgB,WAAA,IAAe,IAAA,YAAgB,WAAA,CAAY,CAAC,CAAA;QA8BrE,MA7BM,IAAI,KAAA,CAAM,6BAAC,MAA2B,wCAAM,CAAqC,CAAC;IA8B1F,CAAC;IACD,EAAE,CAAC,CAAC,OA7BO,IAAA,KAAS,WAAA,IAAe,IAAA,YAAgB,IAAA,CAAK,CAAC,CAAA;QA8BvD,MA7BM,IAAI,KAAA,CAAM,6BAAC,MAA2B,iCAAM,CAA8B,CAAC;IA8BnF,CAAC;IACD,EAAE,CAAC,CAAC,OA7BO,IAAA,KAAS,QAAA,IAAY,OAAO,IAAA,KAAS,QAAA,IAAY,OAAO,IAAA,KAAS,QAAA;QA8BxE,KAAK,CA7BC,OAAC,CAAO,IAAC,CAAI,CAAC,CAAC,CAAA;QA8BvB,MAAM,CA7BC,IAAA,CAAK;IA8Bd,CAAC;IACD,MA7BM,IAAI,KAAA,CAAM,6BAAC,MAA2B,yCAAM,CAAsC,CAAC;AA8B3F,CAAC;AACD;;;;GAIG;AACH,qBACI,IA7BkC;IA+BpC,EAAE,CAAC,CAAC,OA9BO,IAAA,KAAS,QAAA,CAAS,CAAC,CAAA;QA+B5B,MAAM,CA9BC,IAAA,CAAK;IA+Bd,CAAC;IACD,EAAE,CAAC,CAAC,OA9BO,WAAA,KAAgB,WAAA,IAAe,IAAA,YAAgB,WAAA,CAAY,CAAC,CAAA;QA+BrE,MA9BM,IAAI,KAAA,CAAM,iEAAC,CAAiE,CAAC;IA+BrF,CAAC;IACD,EAAE,CAAC,CAAC,OA9BO,IAAA,KAAS,WAAA,IAAe,IAAA,YAAgB,IAAA,CAAK,CAAC,CAAA;QA+BvD,MA9BM,IAAI,KAAA,CAAM,0DAAC,CAA0D,CAAC;IA+B9E,CAAC;IACD,MAAM,CA9BC,IAAA,CAAK,SAAC,CAAS,WAAC,CAAW,IAAC,EAAK,MAAA,CAAO,CAAC,CAAC;AA+BnD,CAAC;AACD;;;;;GAKG;AACH,2BACI,YAhCc,EAAQ,IACoB;IAkC5C,MAAM,CAAC,CAAC,YAhCC,CAAY,CAAC,CAAA;QAiCpB,KAhCK,aAAA;YAiCH,EAAE,CAAC,CAAC,IAhCC,KAAQ,IAAA,CAAK,CAAC,CAAA;gBAiCjB,MAAM,CAhCC,IAAA,CAAK;YAiCd,CAAC;YACD,MAAM,CAhCC,kBAAA,CAAmB,IAAC,CAAI,CAAC;QAiClC,KAhCK,MAAA;YAiCH,EAAE,CAAC,CAAC,IAhCC,KAAQ,IAAA,CAAK,CAAC,CAAA;gBAiCjB,MAAM,CAhCC,IAAA,CAAK;YAiCd,CAAC;YACD,MAAM,CAhCC,OAAA,CAAQ,IAAC,CAAI,CAAC;QAiCvB,KAhCK,MAAA;YAiCH,EAAE,CAAC,CAAC,IAhCC,KAAQ,IAAA,CAAK,CAAC,CAAA;gBAiCjB,MAAM,CAhCC,MAAA,CAAO;YAiChB,CAAC;YACD,MAAM,CAhCC,WAAA,CAAY,IAAC,CAAI,CAAC;QAiC3B,KAhCK,MAAA;YAiCH,EAAE,CAAC,CAAC,IAhCC,KAAQ,IAAA,CAAK,CAAC,CAAA;gBAiCjB,MAAM,CAhCC,IAAA,CAAK;YAiCd,CAAC;YACD,MAAM,CAhCC,WAAA,CAAY,IAAC,CAAI,CAAC;QAiC3B;YACE,MAhCM,IAAI,KAAA,CAAM,+BAAC,YAAyC,CAAE,CAAC;IAiCjE,CAAC;AACH,CAAC","file":"request.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaders, HttpRequest, HttpResponse} from '@angular/common/http';\nimport {Observer} from 'rxjs/Observer';\n/**\n * A mock requests that was received and is ready to be answered.\n * \n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n * \n * \\@experimental\n */\nexport class TestRequest {\n/**\n * Whether the request was cancelled after it was sent.\n * @return {?}\n */\nget cancelled(): boolean { return this._cancelled; }\n/**\n * \\@internal set by `HttpClientTestingBackend`\n */\n_cancelled = false;\n/**\n * @param {?} request\n * @param {?} observer\n */\nconstructor(public request: HttpRequest<any>,\nprivate observer: Observer<HttpEvent<any>>) {}\n/**\n * Resolve the request by returning a body plus additional HTTP information (such as response\n * headers) if provided.\n * \n * Both successful and unsuccessful responses can be delivered via `flush()`.\n * @param {?} body\n * @param {?=} opts\n * @return {?}\n */\nflush(body: ArrayBuffer|Blob|string|number|Object|(string|number|Object|null)[]|null, opts: {\n    headers?: HttpHeaders | {[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const /** @type {?} */ url = this.request.urlWithParams;\n    const /** @type {?} */ headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let /** @type {?} */ statusText: string|undefined = opts.statusText;\n    let /** @type {?} */ status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n/**\n * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n * @param {?} error\n * @param {?=} opts\n * @return {?}\n */\nerror(error: ErrorEvent, opts: {\n    headers?: HttpHeaders | {[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const /** @type {?} */ headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams,\n    }));\n  }\n/**\n * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n * request.\n * @param {?} event\n * @return {?}\n */\nevent(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\nfunction TestRequest_tsickle_Closure_declarations() {\n/**\n * \\@internal set by `HttpClientTestingBackend`\n * @type {?}\n */\nTestRequest.prototype._cancelled;\n/** @type {?} */\nTestRequest.prototype.request;\n/** @type {?} */\nTestRequest.prototype.observer;\n}\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(\n    body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[],\n    format: string = 'JSON'): Object|string|number|(Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(\n    responseType: string, body: ArrayBuffer | Blob | string | number | Object |\n        (string | number | Object | null)[] | null): ArrayBuffer|Blob|string|number|Object|\n    (string | number | Object | null)[]|null {\n  switch (responseType) {\n    case 'arraybuffer':\n      if (body === null) {\n        return null;\n      }\n      return _toArrayBufferBody(body);\n    case 'blob':\n      if (body === null) {\n        return null;\n      }\n      return _toBlob(body);\n    case 'json':\n      if (body === null) {\n        return 'null';\n      }\n      return _toJsonBody(body);\n    case 'text':\n      if (body === null) {\n        return null;\n      }\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n"]}