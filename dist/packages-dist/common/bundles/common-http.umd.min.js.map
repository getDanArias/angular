{"version":3,"sources":["/Users/jasonaden/Projects/angular/dist/packages-dist/common/bundles/common-http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","commmon","http","core","rxjs_observable_of","rxjs_operator_concatMap","rxjs_operator_filter","rxjs_operator_map","tslib_1","common","Rx","this","_angular_core","_angular_common","rxjs_Observable","HttpParameterCodec","paramParser","rawParams","codec","map$$1","Map","length","params","split","forEach","param","eqIdx","indexOf","_a","decodeKey","slice","decodeValue","key","val","list","get","push","set","standardEncoding","v","encodeURIComponent","replace","mightHaveBody","method","isArrayBuffer","value","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpProgressEvent","HttpDownloadProgressEvent","HttpSentEvent","HttpUserEvent","addBody","options","body","headers","observe","reportProgress","responseType","withCredentials","HttpInterceptor","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","interceptingHandler","backend","interceptors","reduceRight","next","interceptor","HttpInterceptorHandler","jsonpCallbackContext","window","HttpHandler","HttpBackend","HttpUrlEncodingCodec","prototype","encodeKey","k","encodeValue","decodeURIComponent","HttpParams","updates","cloneFrom","encoder","map","fromString","has","init","res","getAll","keys","Array","from","append","clone","op","delete","toString","_this","eKey","join","update","concat","base","undefined","base_1","idx","splice","HttpHeaders","normalizedNames","lazyUpdate","lazyInit","line","index","name_1","toLowerCase","trim","maybeSetNormalizedName","Object","name","values","lcName","copyFrom","applyUpdate","other","apply","toDelete_1","existing","filter","fn","HttpRequest","url","third","fourth","toUpperCase","urlWithParams","qIdx","sep","serializeBody","isArray","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","_super","call","__extends","HttpResponse","HttpErrorResponse","message","error","HttpClient","handler","request","first","req","events$","concatMap","of","handle","res$","event","Error","head","jsonp","callbackParam","patch","post","put","decorators","Injectable","ctorParameters","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","removeEventListener","Inject","args","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","useFactory","deps","Optional","HttpClientJsonpModule","ɵinterceptingHandler","ɵa","ɵb","ɵc","ɵd","ɵg","ɵh","ɵe","ɵf","defineProperty"],"mappings":"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","file":"/Users/jasonaden/Projects/angular/dist/packages-dist/common/bundles/common-http.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.0-beta.3-14502f5b34\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/observable/of'), require('rxjs/operator/concatMap'), require('rxjs/operator/filter'), require('rxjs/operator/map'), require('tslib'), require('@angular/common'), require('rxjs/Observable')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/filter', 'rxjs/operator/map', 'tslib', '@angular/common', 'rxjs/Observable'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.commmon = global.ng.commmon || {}, global.ng.commmon.http = global.ng.commmon.http || {}),global.ng.core,global.rxjs_observable_of,global.rxjs_operator_concatMap,global.rxjs_operator_filter,global.rxjs_operator_map,global.tslib_1,global.ng.common,global.Rx));\n}(this, (function (exports,_angular_core,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_filter,rxjs_operator_map,tslib_1,_angular_common,rxjs_Observable) { 'use strict';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@experimental\n * @abstract\n */\nvar HttpHandler = (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@experimental\n * @abstract\n */\nvar HttpBackend = (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n *  \\@experimental\n *\n * @record\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */ function HttpParameterCodec() { }\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@experimental\n */\nvar HttpUrlEncodingCodec = (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immuatable - all mutation operations return a new instance.\n *\n * \\@experimental\n */\nvar HttpParams = (function () {\n    /**\n     * @param {?=} options\n     */\n    function HttpParams(options) {\n        if (options === void 0) { options = {}; }\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        this.map = !!options.fromString ? paramParser(options.fromString, this.encoder) : null;\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = function (param) {\n        this.init();\n        return ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = function (param) {\n        this.init();\n        var /** @type {?} */ res = ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = function (param) {\n        this.init();\n        return ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return ((((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                .join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = function (update) {\n        var /** @type {?} */ clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { /** @type {?} */ return ((_this.map)).set(key, /** @type {?} */ ((((((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @record\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@experimental\n */\nvar HttpHeaders = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@experimental\n */\nvar HttpRequest = (function () {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third) || null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar HttpEventType = {};\nHttpEventType.Sent = 0;\nHttpEventType.UploadProgress = 1;\nHttpEventType.ResponseHeader = 2;\nHttpEventType.DownloadProgress = 3;\nHttpEventType.Response = 4;\nHttpEventType.User = 5;\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@experimental\n * @record\n */\nfunction HttpProgressEvent() { }\n/**\n * A download progress event.\n *\n * \\@experimental\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\n/**\n * An upload progress event.\n *\n * \\@experimental\n * @record\n */\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@experimental\n * @record\n */\nfunction HttpSentEvent() { }\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@experimental\n * @record\n */\nfunction HttpUserEvent() { }\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@experimental\n * @record\n */\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@experimental\n * @abstract\n */\nvar HttpResponseBase = (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@experimental\n */\nvar HttpHeaderResponse = (function (_super) {\n    tslib_1.__extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@experimental\n */\nvar HttpResponse = (function (_super) {\n    tslib_1.__extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body || null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@experimental\n */\nvar HttpErrorResponse = (function (_super) {\n    tslib_1.__extends(HttpErrorResponse, _super);\n    /**\n     * @param {?} init\n     */\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@experimental\n */\nvar HttpClient = (function () {\n    /**\n     * @param {?} handler\n     */\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), options.body || null, {\n                headers: options.headers,\n                params: options.params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = rxjs_operator_concatMap.concatMap.call(rxjs_observable_of.of(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = rxjs_operator_filter.filter.call(events$, function (event) { return event instanceof HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return rxjs_operator_map.map.call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return rxjs_operator_map.map.call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return rxjs_operator_map.map.call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return rxjs_operator_map.map.call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    return HttpClient;\n}());\nHttpClient.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nHttpClient.ctorParameters = function () { return [\n    { type: HttpHandler, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@experimental\n * @record\n */\nfunction HttpInterceptor() { }\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@experimental\n */\nvar HttpInterceptorHandler = (function () {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@experimental\n */\nvar HTTP_INTERCEPTORS = new _angular_core.InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = function (req, next) {\n        return next.handle(req);\n    };\n    return NoopInterceptor;\n}());\nNoopInterceptor.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nNoopInterceptor.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@experimental\n * @abstract\n */\nvar JsonpCallbackContext = (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@experimental\n */\nvar JsonpClientBackend = (function () {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new rxjs_Observable.Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    return JsonpClientBackend;\n}());\nJsonpClientBackend.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = function () { return [\n    { type: JsonpCallbackContext, },\n    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_common.DOCUMENT,] },] },\n]; };\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@experimental\n */\nvar JsonpInterceptor = (function () {\n    /**\n     * @param {?} jsonp\n     */\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    return JsonpInterceptor;\n}());\nJsonpInterceptor.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = function () { return [\n    { type: JsonpClientBackend, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@experimental\n * @abstract\n */\nvar XhrFactory = (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@experimental\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = function () { return []; };\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@experimental\n */\nvar HttpXhrBackend = (function () {\n    /**\n     * @param {?} xhrFactory\n     */\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new rxjs_Observable.Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                xhr.responseType = (req.responseType.toLowerCase());\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                    // Strip a common XSSI prefix from string responses.\n                    // TODO: determine if this behavior should be optional and moved to an interceptor.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (ok && typeof body === 'string' && req.responseType === 'json') {\n                    // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                    try {\n                        body = JSON.parse(body);\n                    }\n                    catch (error) {\n                        // Even though the response status was 2xx, this is still an error.\n                        ok = false;\n                        // The parse error contains the text of the body that failed to parse.\n                        body = ({ error: error, text: body });\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    return HttpXhrBackend;\n}());\nHttpXhrBackend.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = function () { return [\n    { type: XhrFactory, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new _angular_core.InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new _angular_core.InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@experimental\n * @abstract\n */\nvar HttpXsrfTokenExtractor = (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = (function () {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = _angular_common.ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    return HttpXsrfCookieExtractor;\n}());\nHttpXsrfCookieExtractor.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_common.DOCUMENT,] },] },\n    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PLATFORM_ID,] },] },\n    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [XSRF_COOKIE_NAME,] },] },\n]; };\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = (function () {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    return HttpXsrfInterceptor;\n}());\nHttpXsrfInterceptor.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = function () { return [\n    { type: HttpXsrfTokenExtractor, },\n    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [XSRF_HEADER_NAME,] },] },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@experimental\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@experimental\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@experimental\n */\nvar HttpClientXsrfModule = (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    return HttpClientXsrfModule;\n}());\nHttpClientXsrfModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] },\n];\n/** @nocollapse */\nHttpClientXsrfModule.ctorParameters = function () { return []; };\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@experimental\n */\nvar HttpClientModule = (function () {\n    function HttpClientModule() {\n    }\n    return HttpClientModule;\n}());\nHttpClientModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                providers: [\n                    HttpClient,\n                    // HttpHandler is the backend + interceptors and is constructed\n                    // using the interceptingHandler factory function.\n                    {\n                        provide: HttpHandler,\n                        useFactory: interceptingHandler,\n                        deps: [HttpBackend, [new _angular_core.Optional(), new _angular_core.Inject(HTTP_INTERCEPTORS)]],\n                    },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] },\n];\n/** @nocollapse */\nHttpClientModule.ctorParameters = function () { return []; };\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@experimental\n */\nvar HttpClientJsonpModule = (function () {\n    function HttpClientJsonpModule() {\n    }\n    return HttpClientJsonpModule;\n}());\nHttpClientJsonpModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] },\n];\n/** @nocollapse */\nHttpClientJsonpModule.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.HttpBackend = HttpBackend;\nexports.HttpHandler = HttpHandler;\nexports.HttpClient = HttpClient;\nexports.HttpHeaders = HttpHeaders;\nexports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;\nexports.HttpInterceptor = HttpInterceptor;\nexports.JsonpClientBackend = JsonpClientBackend;\nexports.JsonpInterceptor = JsonpInterceptor;\nexports.HttpClientJsonpModule = HttpClientJsonpModule;\nexports.HttpClientModule = HttpClientModule;\nexports.HttpClientXsrfModule = HttpClientXsrfModule;\nexports.ɵinterceptingHandler = interceptingHandler;\nexports.HttpParameterCodec = HttpParameterCodec;\nexports.HttpParams = HttpParams;\nexports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;\nexports.HttpRequest = HttpRequest;\nexports.HttpDownloadProgressEvent = HttpDownloadProgressEvent;\nexports.HttpErrorResponse = HttpErrorResponse;\nexports.HttpEventType = HttpEventType;\nexports.HttpHeaderResponse = HttpHeaderResponse;\nexports.HttpProgressEvent = HttpProgressEvent;\nexports.HttpResponse = HttpResponse;\nexports.HttpResponseBase = HttpResponseBase;\nexports.HttpSentEvent = HttpSentEvent;\nexports.HttpUserEvent = HttpUserEvent;\nexports.HttpXhrBackend = HttpXhrBackend;\nexports.XhrFactory = XhrFactory;\nexports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;\nexports.ɵa = NoopInterceptor;\nexports.ɵb = JsonpCallbackContext;\nexports.ɵc = jsonpCallbackContext;\nexports.ɵd = BrowserXhr;\nexports.ɵg = HttpXsrfCookieExtractor;\nexports.ɵh = HttpXsrfInterceptor;\nexports.ɵe = XSRF_COOKIE_NAME;\nexports.ɵf = XSRF_HEADER_NAME;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http.umd.js.map\n"]}