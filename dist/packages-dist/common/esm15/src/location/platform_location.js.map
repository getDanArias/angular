{"version":3,"sources":["../../../../../packages/common/src/location/platform_location.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAAc,MAAA,eAAA,CAAA;AAMvB;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MANC;CAgBA;AAQD;IAEA;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,GAAG,cAAY,CAAC,CAAC;IAE9D;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,EAAE,IAAG,CAAC,CAAC;IAExD;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,YAAY,GAAG,UAAS,EAAE,IAAG,CAAC,CAAC;IAE1D;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEpD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,cAAY,CAAC,CAAC;IAElD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,IAAI,GAAG,cAAY,CAAC,CAAC;IAEhD;;;;;;OAMG;IACH,gBAAgB,CAAC,SAAS,CAAC,YAAY,GAAG,UAAS,KAAK,EAAE,KAAK,EAAE,GAAG,IAAG,CAAC,CAAC;IAEzE;;;;;;OAMG;IACH,gBAAgB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,KAAK,EAAE,KAAK,EAAE,GAAG,IAAG,CAAC,CAAC;IAEtE;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAEnD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,IAAI,GAAG,cAAY,CAAC,CAAC;AAChD,CAAC;AAED;;;GAGG;AACH,MA7EC,CAAM,MAAA,gBAAA,CAAM,oBAAA,GAAuB,IAAI,cAAA,CAA4B,sBAAE,CAAsB,CAAC;AA8E7F;;;;;GAKG;AACH,MAAM,kCAAiC,CAAC;AAGxC;IACA,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC;AACnC,CAAC;AASD;;;GAGG;AACH,MAAM,qCAAoC,CAAC;AAG3C;IACA;;MAEE;AACF,CAAC","file":"platform_location.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n}\n\nfunction PlatformLocation_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.getBaseHrefFromDOM = function() {};\n\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nPlatformLocation.prototype.onPopState = function(fn) {};\n\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nPlatformLocation.prototype.onHashChange = function(fn) {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.pathname = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.search = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.hash = function() {};\n\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nPlatformLocation.prototype.replaceState = function(state, title, url) {};\n\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nPlatformLocation.prototype.pushState = function(state, title, url) {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.forward = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.back = function() {};\n}\n\n/**\n * \\@whatItDoes indicates when a location is initialized\n * \\@experimental\n */\nexport const /** @type {?} */ LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n/**\n * A serializable version of the event from onPopState or onHashChange\n * \n * \\@experimental\n * @record\n */\nexport function LocationChangeEvent() {}\n\n\nfunction LocationChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nLocationChangeEvent.prototype.type;\n}\n\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n/**\n * \\@experimental\n * @record\n */\nexport function LocationChangeListener() {}\n\n\nfunction LocationChangeListener_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(e: LocationChangeEvent): any;\n*/\n}\n\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n"]}