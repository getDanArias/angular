{"version":3,"sources":["../../../../../packages/common/src/directives/ng_if.ts"],"names":[],"mappings":"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","file":"ng_if.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * ## Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * ## Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * ## Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * ## Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\n\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngIf\": [{ type: Input },],\n\"ngIfThen\": [{ type: Input },],\n\"ngIfElse\": [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\n/**\n * \\@stable\n */\nexport class NgIfContext {\npublic $implicit: any = null;\npublic ngIf: any = null;\n}\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n/** @type {?} */\nNgIfContext.prototype.ngIf;\n}\n\n"]}