{"version":3,"sources":["../../../../../packages/common/http/src/params.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH;;;;;;;;GAQG;AAdH,AAeA;;;GAZG,CAYH,MAAM,iCAAgC,CAAC;AAGvC;IACA,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC;IACvC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,WAAW,CAAC;IACzC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC;IACvC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,WAAW,CAAC;AACzC,CAAC;AAuBD;;;;;GAKG;AACH,MA3BC;IA4BD;;;OAGG;IACH,SA/BG,CAAS,CAAG,IAAkB,MAAA,CAAO,gBAAA,CAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;IAgC7D;;;OAGG;IACH,WAlCG,CAAW,CAAG,IAAkB,MAAA,CAAO,gBAAA,CAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;IAmC/D;;;OAGG;IACH,SArCG,CAAS,CAAG,IAAkB,MAAA,CAAO,kBAAA,CAAmB,CAAC,CAAC,CAAC,CAAC,CAAA;IAsC/D;;;OAGG;IACH,WAxCG,CAAW,CAAG,IAAU,MAAA,CAAO,kBAAA,CAAmB,CAAC,CAAC,CAAC,CAAC,CAAA;CACxD;AAyCD;;;;GAIG;AACH,qBA3CqB,SAAW,EAAQ,KAAO;IA4C7C,MAAM,gBAAgB,CA3ChB,GAAA,GAAM,IAAI,GAAA,EAAqB,CAAG;IA4CxC,EAAE,CAAC,CAAC,SA3CC,CAAS,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;QA4CxB,MAAM,gBAAgB,CA3ChB,MAAA,GAAmB,SAAA,CAAU,KAAC,CAAK,GAAC,CAAG,CAAC;QA4C9C,MAAM,CA3CC,OAAC,CAAO,CAAC,KAAO;YA4CrB,MAAM,gBAAgB,CA3ChB,KAAA,GAAQ,KAAA,CAAM,OAAC,CAAO,GAAC,CAAG,CAAC;YA4CjC,MA3CM,CAAA,GAAE,EAAI,GAAA,CAAI,GAAa,KAAA,IAAS,CAAA,CAAE;gBA4CpC,CAAC,KA3CC,CAAK,SAAC,CAAS,KAAC,CAAK,EAAE,EAAA,CAAG;gBA4C5B,CAAC,KA3CC,CAAK,SAAC,CAAS,KAAC,CAAK,KAAC,CAAK,CAAC,EAAE,KAAA,CAAM,CAAC,EAAE,KAAA,CAAM,WAAC,CAAW,KAAC,CAAK,KAAC,CAAK,KAAC,GAAO,CAAA,CAAE,CAAC,CAAC,CAAC;YA4CxF,MAAM,gBAAgB,CA3ChB,IAAA,GAAO,GAAA,CAAI,GAAC,CAAG,GAAC,CAAG,IAAI,EAAA,CAAG;YA4ChC,IAAI,CA3CC,IAAC,CAAI,GAAC,CAAG,CAAC;YA4Cf,GAAG,CA3CC,GAAC,CAAG,GAAC,EAAI,IAAA,CAAK,CAAC;QA4CrB,CAAC,CA3CC,CAAC;IA4CL,CAAC;IACD,MAAM,CA3CC,GAAA,CAAI;AA4Cb,CAAC;AACD;;;GAGG;AACH,0BA/C0B,CAAG;IAgD3B,MAAM,CA/CC,kBAAA,CAAmB,CAAC,CAAC;SAgDvB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI;SAgDrB,OA/CC,CAAO,OAAC,EAAQ,GAAA,CAAI,CAAC;AAgD7B,CAAC;AACD;;GAEG;AACH,oBAAmB,CAAC;AAGpB;IACA,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;IACvB,0BAA0B;IAC1B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;IACvB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;AACpB,CAAC;AAQD;;;;;;;GAOG;AACH,MA7DC;IAkED;;OAEG;IACH,YA/DG,UAGG,EAAA;QANI,YAAA,GAAyB,IAAA,CAAK;QAC9B,cAAA,GAA6B,IAAA,CAAK;QAqExC,IAAI,CA/DC,OAAC,GAAS,OAAA,CAAQ,OAAC,IAAU,IAAI,oBAAA,EAAqB,CAAE;QAgE7D,IAAI,CA/DC,GAAC,GAAK,CAAA,CAAE,OAAC,CAAO,UAAC,GAAY,WAAA,CAAY,OAAC,CAAO,UAAC,EAAW,IAAA,CAAK,OAAC,CAAO,GAAG,IAAA,CAAK;IAgEzF,CAAC;IACH;;;;OAIG;IACH,GAhEG,CAAG,KAAO;QAiET,IAAI,CAhEC,IAAC,EAAI,CAAE;QAiEZ,MAAM,CAAiB,CAAC,CAhEjB,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,KAAC,CAAK,CAAC;IAiE/B,CAAC;IACH;;;;OAIG;IACH,GAjEG,CAAG,KAAO;QAkET,IAAI,CAjEC,IAAC,EAAI,CAAE;QAkEZ,MAAM,gBAAgB,CAjEhB,GAAA,GAAI,CAAA,CAAE,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,KAAC,CAAK,CAAC;QAkElC,MAAM,CAjEC,CAAA,CAAE,GAAC,GAAK,GAAA,CAAI,CAAC,CAAC,GAAG,IAAA,CAAK;IAkE/B,CAAC;IACH;;;;OAIG;IACH,MAlEG,CAAM,KAAO;QAmEZ,IAAI,CAlEC,IAAC,EAAI,CAAE;QAmEZ,MAAM,CAAiB,CAAC,CAlEjB,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,KAAC,CAAK,IAAI,IAAA,CAAK;IAmEvC,CAAC;IACH;;;OAGG;IACH,IAlEG;QAmEC,IAAI,CAlEC,IAAC,EAAI,CAAE;QAmEZ,MAAM,CAlEC,KAAA,CAAM,IAAC,CAAI,gBAAA,CAAA,CAAA,CAAA,IAAC,CAAI,GAAC,CAAA,CAAA,CAAK,IAAC,EAAI,CAAE,CAAC;IAmEvC,CAAC;IACH;;;;;OAKG;IACH,MApEG,CAAM,KAAO,EAAQ,KAAO,IAAsB,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,EAAC,KAAC,EAAM,KAAA,EAAO,EAAA,EAAI,GAAA,EAAI,CAAC,CAAC,CAAC,CAAA;IAqEjG;;;;;OAKG;IACH,GAtEG,CAAG,KAAO,EAAQ,KAAO,IAAsB,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,EAAC,KAAC,EAAM,KAAA,EAAO,EAAA,EAAI,GAAA,EAAI,CAAC,CAAC,CAAC,CAAA;IAuE9F;;;;;;;OAOG;IACH,MAxEG,CAAM,KAAQ,EAAQ,KAAQ,IAAsB,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,EAAC,KAAC,EAAM,KAAA,EAAO,EAAA,EAAI,GAAA,EAAI,CAAC,CAAC,CAAC,CAAA;IAyEnG;;;;OAIG;IACH,QAxEG;QAyEC,IAAI,CAxEC,IAAC,EAAI,CAAE;QAyEZ,MAAM,CAxEC,IAAA,CAAK,IAAC,EAAI;aAyEZ,GAxEC,CAAG,GAAC;YAyEJ,MAAM,gBAAgB,CAxEhB,IAAA,GAAO,IAAA,CAAK,OAAC,CAAO,SAAC,CAAS,GAAC,CAAG,CAAC;YAyEzC,MAAM,CAAiB,CAAC,CAAkB,CAAC,CAxEpC,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,GAAC,CAAG,CAAA,CAAA,CAAG,GAAC,CAAG,KAAC,IAAQ,IAAA,GAAO,GAAA,GAAM,IAAA,CAAK,OAAC,CAAO,WAAC,CAAW,KAAC,CAAK,CAAC;iBAyElF,IAxEC,CAAI,GAAC,CAAG,CAAC;QAyEjB,CAAC,CAxEC;aAyED,IAxEC,CAAI,GAAC,CAAG,CAAC;IAyEjB,CAAC;IACH;;;OAGG;IA1EO,KAAA,CAAM,MAAQ;QA6EpB,MAAM,gBAAgB,CA5EhB,KAAA,GAAQ,IAAI,UAAA,CAAW,EAAC,OAAC,EAAQ,IAAA,CAAK,OAAC,EAAO,CAAC,CAAC;QA6EtD,KAAK,CA5EC,SAAC,GAAW,IAAA,CAAK,SAAC,IAAY,IAAA,CAAK;QA6EzC,KAAK,CA5EC,OAAC,GAAS,CAAA,IAAE,CAAI,OAAC,IAAU,EAAA,CAAG,CAAC,MAAC,CAAM,CAAC,MAAC,CAAM,CAAC,CAAC;QA6EtD,MAAM,CA5EC,KAAA,CAAM;IA6Ef,CAAC;IACH;;OAEG;IA7EO,IAAA;QAgFN,EAAE,CAAC,CAAC,IA/EC,CAAI,GAAC,KAAO,IAAA,CAAK,CAAC,CAAA;YAgFrB,IAAI,CA/EC,GAAC,GAAK,IAAI,GAAA,EAAqB,CAAG;QAgFzC,CAAC;QACD,EAAE,CAAC,CAAC,IA/EC,CAAI,SAAC,KAAa,IAAA,CAAK,CAAC,CAAA;YAgF3B,IAAI,CA/EC,SAAC,CAAS,IAAC,EAAI,CAAE;YAgFtB,IAAI,CA/EC,SAAC,CAAS,IAAC,EAAI,CAAE,OAAC,CAAO,GAAC,IAAG,CAAA,CAAG,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,GAAC,EAAG,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAC,IAAA,CAAK,SAAC,CAAA,CAAA,CAAW,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,GAAC,CAAG,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA,gBAAA;YAAA,CAAA,CAgF7F,IAAI,CA/EC,OAAC,CAAA,CAAA,CAAS,OAAC,CAAO,MAAC;gBAgFtB,MAAM,CAAC,CAAC,MA/EC,CAAM,EAAC,CAAE,CAAC,CAAA;oBAgFjB,KA/EK,GAAA,CAAI;oBAgFT,KA/EK,GAAA;wBAgFH,MAAM,gBAAgB,CA/EhB,IAAA,GAAO,CAAA,MAAE,CAAM,EAAC,KAAM,GAAA,GAAI,CAAA,CAAE,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,MAAC,CAAM,KAAC,CAAK,GAAG,SAAA,CAAU,IAAI,EAAA,CAAG;wBAgFlF,IAAI,CA/EC,IAAC,CAAI,gBAAA,CAAA,CAAA,CAAA,MAAC,CAAM,KAAC,CAAA,CAAA,CAAO,CAAC,CAAA,gBAAA;wBAAA,CAAA,CAgF1B,IAAI,CA/EC,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,MAAC,CAAM,KAAC,EAAM,IAAA,CAAK,CAAC;wBAgFnC,KAAK,CAAC;oBACR,KA/EK,GAAA;wBAgFH,EAAE,CAAC,CAAC,MA/EC,CAAM,KAAC,KAAS,SAAA,CAAU,CAAC,CAAA;4BAgF9B,IAAI,gBAAgB,CA/EhB,IAAA,GAAK,CAAA,CAAE,IAAA,CAAK,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,MAAC,CAAM,KAAC,CAAK,IAAI,EAAA,CAAG;4BAgF9C,MAAM,gBAAgB,CA/EhB,GAAA,GAAM,IAAA,CAAK,OAAC,CAAO,MAAC,CAAM,KAAC,CAAK,CAAC;4BAgFvC,EAAE,CAAC,CAAC,GA/EC,KAAO,CAAA,CAAE,CAAC,CAAC,CAAA;gCAgFd,IAAI,CA/EC,MAAC,CAAM,GAAC,EAAI,CAAA,CAAE,CAAC;4BAgFtB,CAAC;4BACD,EAAE,CAAC,CAAC,IA/EC,CAAI,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;gCAAA,CAAA,CAgFnB,IAAI,CA/EC,GAAC,CAAA,CAAA,CAAK,GAAC,CAAG,MAAC,CAAM,KAAC,EAAM,IAAA,CAAK,CAAC;4BAgFrC,CAAC;4BA/EC,IAAA,CAAK,CAAA;gCAAA,CAAA,CAgFL,IAAI,CA/EC,GAAC,CAAA,CAAA,CAAK,MAAC,CAAM,MAAC,CAAM,KAAC,CAAK,CAAC;4BAgFlC,CAAC;wBACH,CAAC;wBA/EC,IAAA,CAAK,CAAA;4BAAA,CAAA,CAgFL,IAAI,CA/EC,GAAC,CAAA,CAAA,CAAK,MAAC,CAAM,MAAC,CAAM,KAAC,CAAK,CAAC;4BAgFhC,KAAK,CAAC;wBACR,CAAC;gBACL,CAAC;YACH,CAAC,CA/EC,CAAC;YAgFH,IAAI,CA/EC,SAAC,GAAW,IAAA,CAAK;QAgFxB,CAAC;IACH,CAAC;CA9EF;AAiFD;IACA,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC;IACzB,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;IAC7B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;IAC7B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;AAC/B,CAAC","file":"params.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n * \n * Used by `HttpParams`.\n * \n *  \\@experimental\n * \n * @record\n */\nexport function HttpParameterCodec() {}\n\n\nfunction HttpParameterCodec_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpParameterCodec.prototype.encodeKey;\n/** @type {?} */\nHttpParameterCodec.prototype.encodeValue;\n/** @type {?} */\nHttpParameterCodec.prototype.decodeKey;\n/** @type {?} */\nHttpParameterCodec.prototype.decodeValue;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n *  @experimental\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n * \n * \\@experimental\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n/**\n * @param {?} k\n * @return {?}\n */\ndecodeKey(k: string): string { return decodeURIComponent(k); }\n/**\n * @param {?} v\n * @return {?}\n */\ndecodeValue(v: string) { return decodeURIComponent(v); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update() {}\n\n\nfunction Update_tsickle_Closure_declarations() {\n/** @type {?} */\nUpdate.prototype.param;\n/** @type {?|undefined} */\nUpdate.prototype.value;\n/** @type {?} */\nUpdate.prototype.op;\n}\n\n\ninterface Update {\n  param: string;\n  value?: string;\n  op: 'a'|'d'|'s';\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n * \n * This class is immuatable - all mutation operations return a new instance.\n * \n * \\@experimental\n */\nexport class HttpParams {\nprivate map: Map<string, string[]>|null;\nprivate encoder: HttpParameterCodec;\nprivate updates: Update[]|null = null;\nprivate cloneFrom: HttpParams|null = null;\n/**\n * @param {?=} options\n */\nconstructor(options: {\n    fromString?: string,\n    encoder?: HttpParameterCodec,\n  } = {}) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    this.map = !!options.fromString ? paramParser(options.fromString, this.encoder) : null;\n  }\n/**\n * Check whether the body has one or more values for the given parameter name.\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean {\n    this.init();\n    return /** @type {?} */(( this.map)).has(param);\n  }\n/**\n * Get the first value for the given parameter name, or `null` if it's not present.\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    this.init();\n    const /** @type {?} */ res = /** @type {?} */(( this.map)).get(param);\n    return !!res ? res[0] : null;\n  }\n/**\n * Get all values for the given parameter name, or `null` if it's not present.\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[]|null {\n    this.init();\n    return /** @type {?} */(( this.map)).get(param) || null;\n  }\n/**\n * Get all the parameter names for this body.\n * @return {?}\n */\nkeys(): string[] {\n    this.init();\n    return Array.from( /** @type {?} */((this.map)).keys());\n  }\n/**\n * Construct a new body with an appended value for the given parameter name.\n * @param {?} param\n * @param {?} value\n * @return {?}\n */\nappend(param: string, value: string): HttpParams { return this.clone({param, value, op: 'a'}); }\n/**\n * Construct a new body with a new value for the given parameter name.\n * @param {?} param\n * @param {?} value\n * @return {?}\n */\nset(param: string, value: string): HttpParams { return this.clone({param, value, op: 's'}); }\n/**\n * Construct a new body with either the given value for the given parameter\n * removed, if a value is given, or all values for the given parameter removed\n * if not.\n * @param {?} param\n * @param {?=} value\n * @return {?}\n */\ndelete (param: string, value?: string): HttpParams { return this.clone({param, value, op: 'd'}); }\n/**\n * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n * separated by `&`s.\n * @return {?}\n */\ntoString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const /** @type {?} */ eKey = this.encoder.encodeKey(key);\n          return /** @type {?} */(( /** @type {?} */(( this.map)).get(key))).map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        .join('&');\n  }\n/**\n * @param {?} update\n * @return {?}\n */\n\nprivate clone(update: Update): HttpParams {\n    const /** @type {?} */ clone = new HttpParams({encoder: this.encoder});\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n/**\n * @return {?}\n */\n\nprivate init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => /** @type {?} */(( this.map)).set(key, /** @type {?} */(( /** @type {?} */(( /** @type {?} */(( this.cloneFrom)).map)).get(key))))); /** @type {?} */((\n      this.updates)).forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */(( this.map)).get(update.param) : undefined) || [];\n            base.push( /** @type {?} */((update.value))); /** @type {?} */((\n            this.map)).set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let /** @type {?} */ base = /** @type {?} */(( this.map)).get(update.param) || [];\n              const /** @type {?} */ idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) { /** @type {?} */((\n                this.map)).set(update.param, base);\n              } else { /** @type {?} */((\n                this.map)).delete(update.param);\n              }\n            } else { /** @type {?} */((\n              this.map)).delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = null;\n    }\n  }\n}\n\nfunction HttpParams_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpParams.prototype.map;\n/** @type {?} */\nHttpParams.prototype.encoder;\n/** @type {?} */\nHttpParams.prototype.updates;\n/** @type {?} */\nHttpParams.prototype.cloneFrom;\n}\n\n"]}