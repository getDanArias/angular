{"version":3,"sources":["../../../../../packages/animations/src/animation_builder.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AACH;IAAA;IAEA,CALC;IAKD,uBALC;AAKD,CAFA,AAHC,IAAA;;AAOD;IAEA;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,SAAS,IAAG,CAAC,CAAC;AAC1D,CAAC;AAED;;;;;;GAMG;AACH;IAAA;IAEA,CAhBC;IAgBD,uBAhBC;AAgBD,CAFA,AAdC,IAAA;;AAkBD;IAEA;;;;;OAKG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,OAAO,EAAE,OAAO,IAAG,CAAC,CAAC;AAClE,CAAC","file":"animation_builder.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationMetadata, AnimationOptions} from './animation_metadata';\nimport {AnimationPlayer} from './players/animation_player';\n/**\n * AnimationBuilder is an injectable service that is available when the {\\@link\n * BrowserAnimationsModule BrowserAnimationsModule} or {\\@link NoopAnimationsModule\n * NoopAnimationsModule} modules are used within an application.\n * \n * The purpose if this service is to produce an animation sequence programmatically within an\n * angular component or directive.\n * \n * Programmatic animations are first built and then a player is created when the build animation is\n * attached to an element.\n * \n * ```ts\n * // remember to include the BrowserAnimationsModule module for this to work...\n * import {AnimationBuilder} from '\\@angular/animations';\n * \n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n * \n *   makeAnimation(element: any) {\n *     // first build the animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n * \n *     // then create a player from it\n *     const player = myAnimation.create(element);\n * \n *     player.play();\n *   }\n * }\n * ```\n * \n * When an animation is built an instance of {\\@link AnimationFactory AnimationFactory} will be\n * returned. Using that an {\\@link AnimationPlayer AnimationPlayer} can be created which can then be\n * used to start the animation.\n * \n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationBuilder {\n  abstract build(animation: AnimationMetadata|AnimationMetadata[]): AnimationFactory;\n}\n\nfunction AnimationBuilder_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} animation\n * @return {?}\n */\nAnimationBuilder.prototype.build = function(animation) {};\n}\n\n/**\n * An instance of `AnimationFactory` is returned from {\\@link AnimationBuilder#build\n * AnimationBuilder.build}.\n * \n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationFactory {\n  abstract create(element: any, options?: AnimationOptions): AnimationPlayer;\n}\n\nfunction AnimationFactory_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} element\n * @param {?=} options\n * @return {?}\n */\nAnimationFactory.prototype.create = function(element, options) {};\n}\n\n"]}