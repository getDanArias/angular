{"version":3,"sources":["../../../../../packages/http/src/backends/xhr_backend.ts"],"names":[],"mappings":"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","file":"xhr_backend.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n */\nresponse: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const /** @type {?} */ _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const /** @type {?} */ onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let /** @type {?} */ status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let /** @type {?} */ body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const /** @type {?} */ headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n        const /** @type {?} */ statusText: string = _xhr.statusText || 'OK';\n\n        let /** @type {?} */ responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const /** @type {?} */ response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const /** @type {?} */ onError = (err: ErrorEvent) => {\n        let /** @type {?} */ responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader( /** @type {?} */((name)), values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n"]}