{"version":3,"sources":["../../../../../packages/http/src/headers.ts"],"names":[],"mappings":"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","file":"headers.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const /** @type {?} */ values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\n\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n\n"]}