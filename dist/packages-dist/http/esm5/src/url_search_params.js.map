{"version":3,"sources":["../../../../../packages/http/src/url_search_params.ts"],"names":[],"mappings":"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","file":"url_search_params.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n"]}