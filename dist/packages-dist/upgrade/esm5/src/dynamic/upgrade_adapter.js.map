{"version":3,"sources":["../../../../../../packages/upgrade/src/dynamic/upgrade_adapter.ts"],"names":[],"mappings":"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","file":"upgrade_adapter.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Directive, Injector, NgModule, NgModuleRef, NgZone, StaticProvider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, LAZY_MODULE_REF, NG_ZONE_KEY} from '../common/constants';\nimport {downgradeComponent} from '../common/downgrade_component';\nimport {downgradeInjectable} from '../common/downgrade_injectable';\nimport {Deferred, controllerKey, onError} from '../common/util';\n\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\n\nlet /** @type {?} */ upgradeCount: number = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n * \n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n * \n * ## Mental Model\n * \n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n * \n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n * \n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * \n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * \n * ```\n * \n * \\@stable\n */\nexport class UpgradeAdapter {\nprivate idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\nprivate downgradedComponents: Type<any>[] = [];\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n */\n\nprivate ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\nprivate upgradedProviders: StaticProvider[] = [];\nprivate ngZone: NgZone;\nprivate ng1Module: angular.IModule;\nprivate moduleRef: NgModuleRef<any>|null = null;\nprivate ng2BootstrapDeferred: Deferred<angular.IInjectorService>;\n/**\n * @param {?} ng2AppModule\n * @param {?=} compilerOptions\n */\nconstructor(private ng2AppModule: Type<any>,\nprivate compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n    }\n  }\n/**\n * Allows Angular Component to be used from AngularJS.\n * \n * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n * Angular Component. The adapter will bootstrap Angular component from within the\n * AngularJS template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in AngularJS template. This means that the\n *    host element is controlled by AngularJS, but the component's view will be controlled by\n *    Angular.\n * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n *    syntax. This has to be done, this way because we must follow Angular components do not\n *    declare how the attributes should be interpreted.\n * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n *    implement this interface are eligible.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n *   - ng-model: `<comp ng-model=\"name\">`\n * - Content projection: yes\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n * \n * \\@Component({ \n *   selector: 'greet',\n *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n * })\n * class Greeter {\n *   \\@Input() salutation: string;\n *   \\@Input() name: string;\n * }\n * \n * \\@NgModule({ \n *   declarations: [Greeter],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML =\n *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n * });\n * ```\n * @param {?} component\n * @return {?}\n */\ndowngradeNg2Component(component: Type<any>): Function {\n    this.downgradedComponents.push(component);\n\n    return downgradeComponent({component});\n  }\n/**\n * Allows AngularJS Component to be used from Angular.\n * \n * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n * directive. The adapter will bootstrap AngularJS component from within the Angular\n * template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in Angular template. This means that the\n *    host element is controlled by Angular, but the component's view will be controlled by\n *    AngularJS.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n * - Transclusion: yes\n * - Only some of the features of\n *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n *   supported:\n *   - `compile`: not supported because the host element is owned by Angular, which does\n *     not allow modifying DOM structure during compilation.\n *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n *   - `controllerAs`: supported.\n *   - `bindToController`: supported.\n *   - `link`: supported. (NOTE: only pre-link function is supported.)\n *   - `name`: supported.\n *   - `priority`: ignored.\n *   - `replace`: not supported.\n *   - `require`: supported.\n *   - `restrict`: must be set to 'E'.\n *   - `scope`: supported.\n *   - `template`: supported.\n *   - `templateUrl`: supported.\n *   - `terminal`: ignored.\n *   - `transclude`: supported.\n * \n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * \n * module.directive('greet', function() {\n *   return {\n *     scope: {salutation: '=', name: '=' },\n *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n *   };\n * });\n * \n * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n * \n * \\@Component({ \n *   selector: 'ng2',\n *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2></ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n * });\n * ```\n * @param {?} name\n * @return {?}\n */\nupgradeNg1Component(name: string): Type<any> {\n    if (( /** @type {?} */((<any>this.ng1ComponentsToBeUpgraded))).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n/**\n * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n * Use this instead of `angular.mock.module()` to load the upgrade module into\n * the AngularJS testing injector.\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * \n * // configure the adapter with upgrade/downgrade components and services\n * upgradeAdapter.downgradeNg2Component(MyComponent);\n * \n * let upgradeAdapterRef: UpgradeAdapterRef;\n * let $compile, $rootScope;\n * \n * // We must register the adapter before any calls to `inject()`\n * beforeEach(() => {\n *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n * });\n * \n * beforeEach(inject((_$compile_, _$rootScope_) => {\n *   $compile = _$compile_;\n *   $rootScope = _$rootScope_;\n * }));\n * \n * it(\"says hello\", (done) => {\n *   upgradeAdapterRef.ready(() => {\n *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n *     $rootScope.$apply();\n *     expect(element.html()).toContain(\"Hello World\");\n *     done();\n *   })\n * });\n * \n * ```\n * \n * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n * run assertions once the Angular components are ready to test through AngularJS.\n */\nregisterForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const /** @type {?} */ windowNgMock = ( /** @type {?} */((window as any)))['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n/**\n * Bootstrap a hybrid AngularJS / Angular application.\n * \n * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n * AngularJS, this bootstrap is asynchronous.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(MyNg2Module);\n * const module = angular.module('myExample', []);\n * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n * \n * module.directive('ng1', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n * })\n * class Ng2 {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * ```\n * @param {?} element\n * @param {?=} modules\n * @param {?=} config\n * @return {?}\n */\nbootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const /** @type {?} */ windowAngular = ( /** @type {?} */((window as any)) /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], /** @type {?} */(( config))); });\n    const /** @type {?} */ ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const /** @type {?} */ originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => { /** @type {?} */((\n      angular.element(element).data))(controllerKey(INJECTOR_KEY), /** @type {?} */(( this.moduleRef)).injector); /** @type {?} */((\n      this.moduleRef)).injector.get(NgZone).run(\n          () => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n/**\n * Allows AngularJS service to be accessible from Angular.\n * \n * \n * ### Example\n * \n * ```\n * class Login { ... }\n * class Server { ... }\n * \n * \\@Injectable() \n * class Example {\n *   constructor(\\@Inject('server') server, login: Login) {\n *     ...\n *   }\n * }\n * \n * const module = angular.module('myExample', []);\n * module.service('server', Server);\n * module.service('login', Login);\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * adapter.upgradeNg1Provider('server');\n * adapter.upgradeNg1Provider('login', {asToken: Login});\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng2Injector.get(Example);\n * });\n * \n * ```\n * @param {?} name\n * @param {?=} options\n * @return {?}\n */\nupgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const /** @type {?} */ token = options && options.asToken || name;\n    this.upgradedProviders.push({\n      provide: token,\n      useFactory: ($injector: angular.IInjectorService) => $injector.get(name),\n      deps: [$INJECTOR]\n    });\n  }\n/**\n * Allows Angular service to be accessible from AngularJS.\n * \n * \n * ### Example\n * \n * ```\n * class Example {\n * }\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * \n * const module = angular.module('myExample', []);\n * module.factory('example', adapter.downgradeNg2Provider(Example));\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng1Injector.get('example');\n * });\n * \n * ```\n * @param {?} token\n * @return {?}\n */\ndowngradeNg2Provider(token: any): Function { return downgradeInjectable(token); }\n/**\n * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n * hybrid application.\n * \n * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n * \n * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n * @return {?} The AngularJS upgrade module that is declared by this method\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * upgradeAdapter.declareNg1Module(['heroApp']);\n * ```\n */\n\nprivate declareNg1Module(modules: string[] = []): angular.IModule {\n    const /** @type {?} */ delayApplyExps: Function[] = [];\n    let /** @type {?} */ original$applyFn: Function;\n    let /** @type {?} */ rootScopePrototype: any;\n    let /** @type {?} */ rootScope: angular.IRootScopeService;\n    const /** @type {?} */ upgradeAdapter = this;\n    const /** @type {?} */ ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const /** @type {?} */ platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(INJECTOR_KEY, () => /** @type {?} */(( this.moduleRef)).injector.get(Injector))\n        .factory(\n            LAZY_MODULE_REF,\n            [INJECTOR_KEY, (injector: Injector) => ({injector, needsInNgZone: false})])\n        .constant(NG_ZONE_KEY, this.ngZone)\n        .factory(COMPILER_KEY, () => /** @type {?} */(( this.moduleRef)).injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator($ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has($$TESTABILITY)) {\n              provide.decorator($$TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const /** @type {?} */ originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const /** @type {?} */ newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const /** @type {?} */ ng2Testability: Testability = /** @type {?} */((\n                          upgradeAdapter.moduleRef)).injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\nclass DynamicNgUpgradeModule {\nconstructor() {}\n/**\n * @return {?}\n */\nngDoBootstrap() {}\n              static decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n                providers: [\n                  {provide: $INJECTOR, useFactory: () => ng1Injector},\n                  {provide: $COMPILE, useFactory: () => ng1Injector.get($COMPILE)},\n                  this.upgradedProviders\n                ],\n                imports: [this.ng2AppModule],\n                entryComponents: this.downgradedComponents\n              }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction DynamicNgUpgradeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDynamicNgUpgradeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDynamicNgUpgradeModule.ctorParameters;\n}\n\n              ( /** @type {?} */((platformRef as any)))\n                  ._bootstrapModuleWithZone(\n                      DynamicNgUpgradeModule, this.compilerOptions, this.ngZone)\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let /** @type {?} */ subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\nfunction UpgradeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapter.prototype.idPrefix;\n/** @type {?} */\nUpgradeAdapter.prototype.downgradedComponents;\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n * @type {?}\n */\nUpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n/** @type {?} */\nUpgradeAdapter.prototype.upgradedProviders;\n/** @type {?} */\nUpgradeAdapter.prototype.ngZone;\n/** @type {?} */\nUpgradeAdapter.prototype.ng1Module;\n/** @type {?} */\nUpgradeAdapter.prototype.moduleRef;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2BootstrapDeferred;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2AppModule;\n/** @type {?} */\nUpgradeAdapter.prototype.compilerOptions;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) { /** @type {?} */((\n    // store the promise on the element\n    element.data))(controllerKey(INJECTOR_KEY), this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector; /** @type {?} */((\n\n    // reset the element data to point to the real injector\n    this.element.data))(controllerKey(INJECTOR_KEY), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = /** @type {?} */(( null));\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n * \n * \\@stable\n */\nexport class UpgradeAdapterRef {\nprivate _readyFn: ((upgradeAdapterRef?: UpgradeAdapterRef) => void)|null = null;\npublic ng1RootScope: angular.IRootScopeService = /** @type {?} */(( null));\npublic ng1Injector: angular.IInjectorService = /** @type {?} */(( null));\npublic ng2ModuleRef: NgModuleRef<any> = /** @type {?} */(( null));\npublic ng2Injector: Injector = /** @type {?} */(( null));\n/**\n * @param {?} ngModuleRef\n * @param {?} ng1Injector\n * @return {?}\n */\n\nprivate _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n/**\n * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n * application has been bootstrapped.\n * \n * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n * require a call to `$apply()`.\n * @param {?} fn\n * @return {?}\n */\n\npublic ready(fn: (upgradeAdapterRef: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n/**\n * Dispose of running hybrid AngularJS / Angular application.\n * @return {?}\n */\n\npublic dispose() { /** @type {?} */((\n    this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */((\n    this.ng2ModuleRef)).destroy();\n  }\n}\n\nfunction UpgradeAdapterRef_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapterRef.prototype._readyFn;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1RootScope;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1Injector;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2ModuleRef;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2Injector;\n}\n\n"]}