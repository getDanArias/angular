{"version":3,"sources":["../../../../../../packages/router/testing/src/router_testing_module.ts"],"names":[],"mappings":"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","file":"router_testing_module.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy} from '@angular/common';\nimport {MockLocationStrategy, SpyLocation} from '@angular/common/testing';\nimport {Compiler, Injectable, Injector, ModuleWithProviders, NgModule, NgModuleFactory, NgModuleFactoryLoader, Optional} from '@angular/core';\nimport {ChildrenOutletContexts, NoPreloading, PreloadingStrategy, ROUTES, Route, Router, RouterModule, Routes, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS as ROUTER_PROVIDERS, ɵflatten as flatten} from '@angular/router';\n/**\n * \\@whatItDoes Allows to simulate the loading of ng modules in tests.\n * \n * \\@howToUse \n * \n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n * \n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({ \n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n * \n * class LoadedModule {}\n * \n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n * \n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n * \n * router.navigateByUrl('/lazy/loaded');\n * ```\n * \n * \\@stable\n */\nexport class SpyNgModuleFactoryLoader implements NgModuleFactoryLoader {\n/**\n * \\@docsNotRequired\n */\n\nprivate _stubbedModules: {[path: string]: Promise<NgModuleFactory<any>>} = {};\n/**\n * \\@docsNotRequired\n * @param {?} modules\n * @return {?}\n */\nset stubbedModules(modules: {[path: string]: any}) {\n    const /** @type {?} */ res: {[path: string]: any} = {};\n    for (const /** @type {?} */ t of Object.keys(modules)) {\n      res[t] = this.compiler.compileModuleAsync(modules[t]);\n    }\n    this._stubbedModules = res;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nget stubbedModules(): {[path: string]: any} { return this._stubbedModules; }\n/**\n * @param {?} compiler\n */\nconstructor(private compiler: Compiler) {}\n/**\n * @param {?} path\n * @return {?}\n */\nload(path: string): Promise<NgModuleFactory<any>> {\n    if (this._stubbedModules[path]) {\n      return this._stubbedModules[path];\n    } else {\n      return /** @type {?} */(( <any>Promise.reject(new Error(`Cannot find module ${path}`))));\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Compiler, },\n];\n}\n\nfunction SpyNgModuleFactoryLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nSpyNgModuleFactoryLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSpyNgModuleFactoryLoader.ctorParameters;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nSpyNgModuleFactoryLoader.prototype._stubbedModules;\n/** @type {?} */\nSpyNgModuleFactoryLoader.prototype.compiler;\n}\n\n/**\n * Router setup factory function used for testing.\n * \n * \\@stable\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    urlHandlingStrategy?: UrlHandlingStrategy) {\n  const /** @type {?} */ router = new Router( /** @type {?} */((\n      null)), urlSerializer, contexts, location, injector, loader, compiler, flatten(routes));\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n  return router;\n}\n/**\n * \\@whatItDoes Sets up the router to be used for testing.\n * \n * \\@howToUse \n * \n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}])]\n *       )\n *     ]\n *   });\n * });\n * ```\n * \n * \\@description \n * \n * The modules sets up the router to be used for testing.\n * It provides spy implementations of {\\@link Location}, {\\@link LocationStrategy}, and {\\@link\n * NgModuleFactoryLoader}.\n * \n * \\@stable\n */\nexport class RouterTestingModule {\n/**\n * @param {?} routes\n * @return {?}\n */\nstatic withRoutes(routes: Routes): ModuleWithProviders {\n    return {ngModule: RouterTestingModule, providers: [provideRoutes(routes)]};\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  exports: [RouterModule],\n  providers: [\n    ROUTER_PROVIDERS, {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n    {provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader}, {\n      provide: Router,\n      useFactory: setupTestingRouter,\n      deps: [\n        UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n        ROUTES, [UrlHandlingStrategy, new Optional()]\n      ]\n    },\n    {provide: PreloadingStrategy, useExisting: NoPreloading}, provideRoutes([])\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction RouterTestingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterTestingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterTestingModule.ctorParameters;\n}\n\n"]}