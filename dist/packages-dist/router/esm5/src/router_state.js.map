{"version":3,"sources":["../../../../../packages/router/src/router_state.ts"],"names":[],"mappings":"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","file":"router_state.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {map} from 'rxjs/operator/map';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n * \n * See {\\@link ActivatedRoute} for more information.\n * \n * \\@stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} snapshot\n */\nconstructor(\n      root: TreeNode<ActivatedRoute>,\npublic snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState( /** @type {?} */((<RouterState>this)), root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.snapshot.toString(); }\n}\n\nfunction RouterState_tsickle_Closure_declarations() {\n/**\n * The current snapshot of the router state\n * @type {?}\n */\nRouterState.prototype.snapshot;\n}\n\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>| null): RouterState {\n  const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const /** @type {?} */ emptyParams = new BehaviorSubject({});\n  const /** @type {?} */ emptyData = new BehaviorSubject({});\n  const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n  const /** @type {?} */ fragment = new BehaviorSubject('');\n  const /** @type {?} */ activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>| null): RouterStateSnapshot {\n  const /** @type {?} */ emptyParams = {};\n  const /** @type {?} */ emptyData = {};\n  const /** @type {?} */ emptyQueryParams = {};\n  const /** @type {?} */ fragment = '';\n  const /** @type {?} */ activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({...}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRoute {\n/**\n * The current snapshot of this route\n */\nsnapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_futureSnapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_routerState: RouterState;\n/**\n * \\@internal\n */\n_paramMap: Observable<ParamMap>;\n/**\n * \\@internal\n */\n_queryParamMap: Observable<ParamMap>;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} futureSnapshot\n */\nconstructor(\npublic url: Observable<UrlSegment[]>,\npublic params: Observable<Params>,\npublic queryParams: Observable<Params>,\npublic fragment: Observable<string>,\npublic data: Observable<Data>,\npublic outlet: string,\npublic component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route|null { return this._futureSnapshot.routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRoute { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRoute|null { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRoute|null { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRoute[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\nget paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = map.call(this.params, (p: Params): ParamMap => convertToParamMap(p));\n    }\n    return this._paramMap;\n  }\n/**\n * @return {?}\n */\nget queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          map.call(this.queryParams, (p: Params): ParamMap => convertToParamMap(p));\n    }\n    return this._queryParamMap;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n/**\n * The current snapshot of this route\n * @type {?}\n */\nActivatedRoute.prototype.snapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._futureSnapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._routerState;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._paramMap;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._queryParamMap;\n/**\n * An observable of the URL segments matched by this route\n * @type {?}\n */\nActivatedRoute.prototype.url;\n/**\n * An observable of the matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRoute.prototype.params;\n/**\n * An observable of the query parameters shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.queryParams;\n/**\n * An observable of the URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.fragment;\n/**\n * An observable of the static and resolved data of this route.\n * @type {?}\n */\nActivatedRoute.prototype.data;\n/**\n * The outlet name of the route. It's a constant\n * @type {?}\n */\nActivatedRoute.prototype.outlet;\n/** @type {?} */\nActivatedRoute.prototype.component;\n}\n\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route: ActivatedRouteSnapshot): Inherited {\n  const /** @type {?} */ pathToRoot = route.pathFromRoot;\n\n  let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\n  while (inhertingStartingFrom >= 1) {\n    const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n    const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n    // current route is an empty path => inherits its parent's params and data\n    if (current.routeConfig && current.routeConfig.path === '') {\n      inhertingStartingFrom--;\n\n      // parent is componentless => current route should inherit its params and data\n    } else if (!parent.component) {\n      inhertingStartingFrom--;\n\n    } else {\n      break;\n    }\n  }\n\n  return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n    const /** @type {?} */ params = {...res.params, ...curr.params};\n    const /** @type {?} */ data = {...res.data, ...curr.data};\n    const /** @type {?} */ resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, /** @type {?} */(( <any>{params: {}, data: {}, resolve: {}})));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'./my-component.html'}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRouteSnapshot {\n/**\n * \\@internal *\n */\n_routeConfig: Route|null;\n/**\n * \\@internal *\n */\n_urlSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_lastPathIndex: number;\n/**\n * \\@internal\n */\n_resolve: ResolveData;\n/**\n * \\@internal\n */\n_resolvedData: Data;\n/**\n * \\@internal\n */\n_routerState: RouterStateSnapshot;\n/**\n * \\@internal\n */\n_paramMap: ParamMap;\n/**\n * \\@internal\n */\n_queryParamMap: ParamMap;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} routeConfig\n * @param {?} urlSegment\n * @param {?} lastPathIndex\n * @param {?} resolve\n */\nconstructor(\npublic url: UrlSegment[],\npublic params: Params,\npublic queryParams: Params,\npublic fragment: string,\npublic data: Data,\npublic outlet: string,\npublic component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route|null { return this._routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRouteSnapshot { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRouteSnapshot|null { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRouteSnapshot|null { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\nget paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n/**\n * @return {?}\n */\nget queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\n    const /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routeConfig;\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._urlSegment;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._lastPathIndex;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolve;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolvedData;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routerState;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._paramMap;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._queryParamMap;\n/**\n * The URL segments matched by this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.url;\n/**\n * The matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.params;\n/**\n * The query parameters shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.queryParams;\n/**\n * The URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.fragment;\n/**\n * The static and resolved data of this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.data;\n/**\n * The outlet name of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.outlet;\n/**\n * The component of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.component;\n}\n\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n * \n * \\@stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n/**\n * \\@internal\n * @param {?} url\n * @param {?} root\n */\nconstructor(\npublic url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState( /** @type {?} */((<RouterStateSnapshot>this)), root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return serializeNode(this._root); }\n}\n\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n/**\n * The url from which this snapshot was created\n * @type {?}\n */\nRouterStateSnapshot.prototype.url;\n}\n\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const /** @type {?} */ currentSnapshot = route.snapshot;\n    const /** @type {?} */ nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      ( /** @type {?} */((<any>route.queryParams))).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      ( /** @type {?} */((<any>route.fragment))).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      ( /** @type {?} */((<any>route.params))).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      ( /** @type {?} */((<any>route.url))).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      ( /** @type {?} */((<any>route.data))).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */(( b.parent))));\n}"]}