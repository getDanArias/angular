{"version":3,"sources":["../../../../../packages/router/src/create_url_tree.ts"],"names":[],"mappings":"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","file":"create_url_tree.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let /** @type {?} */ qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n/**\n * @param {?} isAbsolute\n * @param {?} numberOfDoubleDots\n * @param {?} commands\n */\nconstructor(\npublic isAbsolute: boolean,\npublic numberOfDoubleDots: number,\npublic commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const /** @type {?} */ cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n/**\n * @return {?}\n */\n\npublic toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\nfunction Navigation_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigation.prototype.isAbsolute;\n/** @type {?} */\nNavigation.prototype.numberOfDoubleDots;\n/** @type {?} */\nNavigation.prototype.commands;\n}\n\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let /** @type {?} */ numberOfDoubleDots = 0;\n  let /** @type {?} */ isAbsolute = false;\n\n  const /** @type {?} */ res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const /** @type {?} */ outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n/**\n * @param {?} segmentGroup\n * @param {?} processChildren\n * @param {?} index\n */\nconstructor(\npublic segmentGroup: UrlSegmentGroup,\npublic processChildren: boolean,\npublic index: number) {\n  }\n}\n\nfunction Position_tsickle_Closure_declarations() {\n/** @type {?} */\nPosition.prototype.segmentGroup;\n/** @type {?} */\nPosition.prototype.processChildren;\n/** @type {?} */\nPosition.prototype.index;\n}\n\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let /** @type {?} */ g = group;\n  let /** @type {?} */ ci = index;\n  let /** @type {?} */ dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = /** @type {?} */(( g.parent));\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n  const /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const /** @type {?} */ outlets = getOutlets(commands);\n    const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let /** @type {?} */ currentCommandIndex = 0;\n  let /** @type {?} */ currentPathIndex = startIndex;\n\n  const /** @type {?} */ noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n    const /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n    const /** @type {?} */ next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n\n  let /** @type {?} */ i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const /** @type {?} */ p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const /** @type {?} */ curr = getPath(commands[i]);\n    const /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const /** @type {?} */ res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n"]}