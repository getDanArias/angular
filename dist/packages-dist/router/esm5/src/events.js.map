{"version":3,"sources":["../../../../../packages/router/src/events.ts"],"names":[],"mappings":"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","file":"events.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {RouterStateSnapshot} from './router_state';\n/**\n * \\@whatItDoes Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n * \n * Example:\n * \n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n * \n * \\@experimental\n */\nexport class RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n */\nconstructor(\npublic id: number,\npublic url: string) {}\n}\n\nfunction RouterEvent_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRouterEvent.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRouterEvent.prototype.url;\n}\n\n/**\n * \\@whatItDoes Base for events tied to a specific `Route`, as opposed to events for the Router\n * lifecycle. `RouteEvent`s may be fired multiple times during a single navigation and will\n * always receive the `Route` they pertain to.\n * \n * Example:\n * \n * ```\n * class MyService {\n *   constructor(public router: Router, spinner: Spinner) {\n *     router.events.filter(e => e instanceof RouteEvent).subscribe(e => {\n *       if (e instanceof ChildActivationStart) {\n *         spinner.start(e.route);\n *       } else if (e instanceof ChildActivationEnd) {\n *         spinner.end(e.route);\n *       }\n *     });\n *   }\n * }\n * ```\n * \n * \\@experimental\n */\nexport class RouteEvent {\n/**\n * @param {?} route\n */\nconstructor(\npublic route: Route) {}\n}\n\nfunction RouteEvent_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRouteEvent.prototype.route;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n * \n * \\@stable\n */\nexport class NavigationStart extends RouterEvent {\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n * \n * \\@stable\n */\nexport class NavigationEnd extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\nfunction NavigationEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.urlAfterRedirects;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n * \n * \\@stable\n */\nexport class NavigationCancel extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} reason\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic reason: string) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\nfunction NavigationCancel_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.reason;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n * \n * \\@stable\n */\nexport class NavigationError extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} error\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic error: any) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\nfunction NavigationError_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.error;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n * \n * \\@stable\n */\nexport class RoutesRecognized extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction RoutesRecognized_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents the start of the Guard phase of routing.\n * \n * \\@experimental\n */\nexport class GuardsCheckStart extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction GuardsCheckStart_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckStart.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckStart.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents the end of the Guard phase of routing.\n * \n * \\@experimental\n */\nexport class GuardsCheckEnd extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n * @param {?} shouldActivate\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot,\npublic shouldActivate: boolean) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\nfunction GuardsCheckEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckEnd.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckEnd.prototype.state;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckEnd.prototype.shouldActivate;\n}\n\n/**\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n * \n * \\@experimental\n */\nexport class ResolveStart extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction ResolveStart_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveStart.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveStart.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\n * {\\@link ResolveStart} for use of this experimental API.\n * \n * \\@experimental\n */\nexport class ResolveEnd extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction ResolveEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveEnd.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveEnd.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadStart extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadEnd extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationEnd} for use of this experimental API.\n * \n * \\@experimental\n */\nexport class ChildActivationStart extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `ChildActivationStart(path: '${this.route.path}')`; }\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationStart} for use of this experimental API.\n * \n * \\@experimental\n */\nexport class ChildActivationEnd extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `ChildActivationEnd(path: '${this.route.path}')`; }\n}\n\n/**\n * @whatItDoes Represents a router event, allowing you to track the lifecycle of the router.\n *\n * The sequence of router events is:\n *\n * - {@link NavigationStart},\n * - {@link RouteConfigLoadStart},\n * - {@link RouteConfigLoadEnd},\n * - {@link RoutesRecognized},\n * - {@link GuardsCheckStart},\n * - {@link ChildActivationStart},\n * - {@link GuardsCheckEnd},\n * - {@link ResolveStart},\n * - {@link ResolveEnd},\n * - {@link ChildActivationEnd}\n * - {@link NavigationEnd},\n * - {@link NavigationCancel},\n * - {@link NavigationError}\n *\n * @stable\n */\nexport type Event = RouterEvent | RouteEvent;\n"]}