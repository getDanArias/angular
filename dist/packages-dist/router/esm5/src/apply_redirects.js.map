{"version":3,"sources":["../../../../../packages/router/src/apply_redirects.ts"],"names":[],"mappings":"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","file":"apply_redirects.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, waitForMap, wrapIntoObservable} from './utils/collection';\nclass NoMatch {\npublic segmentGroup: UrlSegmentGroup|null;\n/**\n * @param {?=} segmentGroup\n */\nconstructor(segmentGroup?: UrlSegmentGroup) { this.segmentGroup = segmentGroup || null; }\n}\n\nfunction NoMatch_tsickle_Closure_declarations() {\n/** @type {?} */\nNoMatch.prototype.segmentGroup;\n}\n\nclass AbsoluteRedirect {\n/**\n * @param {?} urlTree\n */\nconstructor(public urlTree: UrlTree) {}\n}\n\nfunction AbsoluteRedirect_tsickle_Closure_declarations() {\n/** @type {?} */\nAbsoluteRedirect.prototype.urlTree;\n}\n\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n * \n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\nprivate allowRedirects: boolean = true;\nprivate ngModule: NgModuleRef<any>;\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n */\nconstructor(\n      moduleInjector: Injector,\nprivate configLoader: RouterConfigLoader,\nprivate urlSerializer: UrlSerializer,\nprivate urlTree: UrlTree,\nprivate config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n/**\n * @return {?}\n */\napply(): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, /** @type {?} */(( this.urlTree.fragment))));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} tree\n * @return {?}\n */\n\nprivate match(tree: UrlTree): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */(( tree.fragment))));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n\nprivate noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n/**\n * @param {?} rootCandidate\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\n\nprivate createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(ngModule, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @return {?}\n */\n\nprivate expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} segments\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\n\nprivate expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ routes$ = of (...routes);\n    const /** @type {?} */ processedRoutes$ = map.call(routes$, (r: any) => {\n      const /** @type {?} */ expanded$ = this.expandSegmentAgainstRoute(\n          ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch) {\n          return of (null);\n        }\n\n        throw e;\n      });\n    });\n    const /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        }\n\n        throw new NoMatch(segmentGroup);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} paths\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\n\nprivate expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */(( route.redirectTo)), {});\n    if ( /** @type {?} */((route.redirectTo)).startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      const /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const /** @type {?} */ newTree = this.applyRedirectCommands(\n        consumedSegments, /** @type {?} */(( route.redirectTo)), /** @type {?} */(( <any>positionalParamSegments)));\n    if ( /** @type {?} */((route.redirectTo)).startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} rawSegmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\n\nprivate matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(\n            this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n              route._loadedConfig = cfg;\n              return new UrlSegmentGroup(segments, {});\n            });\n      }\n\n      return of (new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\n\n    return mergeMap.call(childConfig$, (routerConfig: LoadedRouterConfig) => {\n      const /** @type {?} */ childModule = routerConfig.module;\n      const /** @type {?} */ childConfig = routerConfig.routes;\n\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const /** @type {?} */ expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return map.call(\n            expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const /** @type {?} */ expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return map.call(\n          expanded$, (cs: UrlSegmentGroup) =>\n                         new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\n\nprivate getChildConfig(ngModule: NgModuleRef<any>, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of (new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of (route._loadedConfig);\n      }\n\n      return mergeMap.call(runCanLoadGuard(ngModule.injector, route), (shouldLoad: boolean) => {\n\n        if (shouldLoad) {\n          return map.call(\n              this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n                route._loadedConfig = cfg;\n                return cfg;\n              });\n        }\n\n        return canLoadFails(route);\n      });\n    }\n\n    return of (new LoadedRouterConfig([], ngModule));\n  }\n/**\n * @param {?} route\n * @param {?} urlTree\n * @return {?}\n */\n\nprivate lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let /** @type {?} */ res: UrlSegment[] = [];\n    let /** @type {?} */ c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect( /** @type {?} */((route.redirectTo)));\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n/**\n * @param {?} segments\n * @param {?} redirectTo\n * @param {?} posParams\n * @return {?}\n */\n\nprivate applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} urlTree\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\n\nprivate applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n/**\n * @param {?} redirectToParams\n * @param {?} actualParams\n * @return {?}\n */\n\nprivate createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const /** @type {?} */ res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      const /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const /** @type {?} */ sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n/**\n * @param {?} redirectTo\n * @param {?} group\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\n\nprivate createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let /** @type {?} */ children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToSegments\n * @param {?} actualSegments\n * @param {?} posParams\n * @return {?}\n */\n\nprivate createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToUrlSegment\n * @param {?} posParams\n * @return {?}\n */\n\nprivate findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n/**\n * @param {?} redirectToUrlSegment\n * @param {?} actualSegments\n * @return {?}\n */\n\nprivate findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let /** @type {?} */ idx = 0;\n    for (const /** @type {?} */ s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction ApplyRedirects_tsickle_Closure_declarations() {\n/** @type {?} */\nApplyRedirects.prototype.allowRedirects;\n/** @type {?} */\nApplyRedirects.prototype.ngModule;\n/** @type {?} */\nApplyRedirects.prototype.configLoader;\n/** @type {?} */\nApplyRedirects.prototype.urlSerializer;\n/** @type {?} */\nApplyRedirects.prototype.urlTree;\n/** @type {?} */\nApplyRedirects.prototype.config;\n}\n\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector: Injector, route: Route): Observable<boolean> {\n  const /** @type {?} */ canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n\n  const /** @type {?} */ obs = map.call(from(canLoad), (injectionToken: any) => {\n    const /** @type {?} */ guard = moduleInjector.get(injectionToken);\n    return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n  });\n\n  return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n\n    return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n\n  if (!res) {\n    return {\n      matched: false,\n      consumedSegments: /** @type {?} */(( <any[]>[])),\n      lastChild: 0,\n      positionalParamSegments: {},\n    };\n  }\n\n  return {\n    matched: true,\n    consumedSegments: /** @type {?} */(( res.consumed)),\n    lastChild: /** @type {?} */(( res.consumed.length)),\n    positionalParamSegments: /** @type {?} */(( res.posParams)),\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n  }\n\n  return {segmentGroup, slicedSegments};\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return {...children, ...res};\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n"]}