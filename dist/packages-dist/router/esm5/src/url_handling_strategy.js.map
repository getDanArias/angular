{"version":3,"sources":["../../../../../packages/router/src/url_handling_strategy.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH;;;;;GAKG;AACH;IAAA;IAqBA,CALC;IAKD,0BALC;AAKD,CArBA,AAgBC,IAAA;;AAOD;IAEA;;;;;;;;;;OAUG;IACH,mBAAmB,CAAC,SAAS,CAAC,gBAAgB,GAAG,UAAS,GAAG,IAAG,CAAC,CAAC;IAElE;;;;;;OAMG;IACH,mBAAmB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,GAAG,IAAG,CAAC,CAAC;IAEzD;;;;;;OAMG;IACH,mBAAmB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,UAAU,EAAE,MAAM,IAAG,CAAC,CAAC;AACtE,CAAC;AAED;;GAEG;AACH;IAAA;IAiBA,CApDC;IAoCD;;;OAGG;IACH,qDA3CG,GA2CH,UA3CmB,GAAK,IAAoB,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA4CzD;;;OAGG;IACH,4CA/CG,GA+CH,UA/CU,GAAK,IAAoB,MAAA,CAAO,GAAA,CAAI,CAAC,CAAA;IAgD/C;;;;OAIG;IACH,0CApDG,GAoDH,UApDQ,UAAY,EAAS,QAAU,IAAoB,MAAA,CAAO,UAAA,CAAW,CAAC,CAAA;IAqD9E,iCApDC;AAoDD,CAjBA,AAnCC,IAAA","file":"url_handling_strategy.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\nfunction UrlHandlingStrategy_tsickle_Closure_declarations() {\n\n/**\n * Tells the router if this URL should be processed.\n * \n * When it returns true, the router will execute the regular navigation.\n * When it returns false, the router will set the router state to an empty state.\n * As a result, all the active components will be destroyed.\n * \n * @abstract\n * @param {?} url\n * @return {?}\n */\nUrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {};\n\n/**\n * Extracts the part of the URL that should be handled by the router.\n * The rest of the URL will remain untouched.\n * @abstract\n * @param {?} url\n * @return {?}\n */\nUrlHandlingStrategy.prototype.extract = function(url) {};\n\n/**\n * Merges the URL fragment with the rest of the URL.\n * @abstract\n * @param {?} newUrlPart\n * @param {?} rawUrl\n * @return {?}\n */\nUrlHandlingStrategy.prototype.merge = function(newUrlPart, rawUrl) {};\n}\n\n/**\n * \\@experimental\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n/**\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree): boolean { return true; }\n/**\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree): UrlTree { return url; }\n/**\n * @param {?} newUrlPart\n * @param {?} wholeUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}"]}