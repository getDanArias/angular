{"version":3,"sources":["../../../../../packages/router/src/router_outlet_context.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAcH;;;;GAIG;AACH;IAAA;QACE,WAAM,GAHsB,IAAA,CAAK;QAIjC,UAAK,GAHwB,IAAA,CAAK;QAIlC,aAAQ,GAHkC,IAAA,CAAK;QAI/C,aAAQ,GAHG,IAAI,sBAAA,EAAuB,CAAE;QAIxC,cAAS,GAH2B,IAAA,CAAK;IAI3C,CAHC;IAGD,oBAHC;AAGD,CANA,AAGC,IAAA;;AAKD;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;AAClC,CAAC;AAED;;;;GAIG;AACH;IAAA;QAdU,aAAA,GAAW,IAAI,GAAA,EAA0B,CAAG;IA0EtD,CA7BC;IA7BD;;;;;OAKG;IACH,qDAnBG,GAmBH,UAnBuB,SAAW,EAAQ,MAAQ;QAoB9C,IAAM,gBAAgB,CAnBhB,OAAA,GAAU,IAAA,CAAK,kBAAC,CAAkB,SAAC,CAAS,CAAC;QAoBnD,OAAO,CAnBC,MAAC,GAAQ,MAAA,CAAO;QAoBxB,IAAI,CAnBC,QAAC,CAAQ,GAAC,CAAG,SAAC,EAAU,OAAA,CAAQ,CAAC;IAoBxC,CAAC;IACH;;;;;;OAMG;IACH,uDApBG,GAoBH,UApByB,SAAW;QAqBhC,IAAM,gBAAgB,CApBhB,OAAA,GAAU,IAAA,CAAK,UAAC,CAAU,SAAC,CAAS,CAAC;QAqB3C,EAAE,CAAC,CAAC,OApBC,CAAO,CAAC,CAAA;YAqBX,OAAO,CApBC,MAAC,GAAQ,IAAA,CAAK;QAqBxB,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,oDApBG,GAoBH;QACI,IAAM,gBAAgB,CApBhB,QAAA,GAAW,IAAA,CAAK,QAAC,CAAQ;QAqB/B,IAAI,CApBC,QAAC,GAAU,IAAI,GAAA,EAAI,CAAE;QAqB1B,MAAM,CApBC,QAAA,CAAS;IAqBlB,CAAC;IACH;;;OAGG;IACH,mDAvBG,GAuBH,UAvBqB,QAAoC,IAAI,IAAA,CAAK,QAAC,GAAU,QAAA,CAAS,CAAC,CAAA;IAwBvF;;;OAGG;IACH,mDA1BG,GA0BH,UA1BqB,SAAW;QA2B5B,IAAI,gBAAgB,CA1BhB,OAAA,GAAU,IAAA,CAAK,UAAC,CAAU,SAAC,CAAS,CAAC;QA4BzC,EAAE,CAAC,CAAC,CA1BC,OAAC,CAAO,CAAC,CAAA;YA2BZ,OAAO,GA1BG,IAAI,aAAA,EAAc,CAAE;YA2B9B,IAAI,CA1BC,QAAC,CAAQ,GAAC,CAAG,SAAC,EAAU,OAAA,CAAQ,CAAC;QA2BxC,CAAC;QAED,MAAM,CA1BC,OAAA,CAAQ;IA2BjB,CAAC;IACH;;;OAGG;IACH,2CA7BG,GA6BH,UA7Ba,SAAW,IAA8B,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,SAAC,CAAS,IAAI,IAAA,CAAK,CAAC,CAAA;IA8BnG,6BA7BC;AA6BD,CA5DA,AA+BC,IAAA;;AA+BD;IACA,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC1C,CAAC","file":"router_outlet_context.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef} from '@angular/core';\n\nimport {RouterOutlet} from './directives/router_outlet';\nimport {ActivatedRoute} from './router_state';\n/**\n * Store contextual information about a {\\@link RouterOutlet}\n * \n * \\@stable\n */\nexport class OutletContext {\n  outlet: RouterOutlet|null = null;\n  route: ActivatedRoute|null = null;\n  resolver: ComponentFactoryResolver|null = null;\n  children = new ChildrenOutletContexts();\n  attachRef: ComponentRef<any>|null = null;\n}\n\nfunction OutletContext_tsickle_Closure_declarations() {\n/** @type {?} */\nOutletContext.prototype.outlet;\n/** @type {?} */\nOutletContext.prototype.route;\n/** @type {?} */\nOutletContext.prototype.resolver;\n/** @type {?} */\nOutletContext.prototype.children;\n/** @type {?} */\nOutletContext.prototype.attachRef;\n}\n\n/**\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\n * \n * \\@stable\n */\nexport class ChildrenOutletContexts {\nprivate contexts = new Map<string, OutletContext>();\n/**\n * Called when a `RouterOutlet` directive is instantiated\n * @param {?} childName\n * @param {?} outlet\n * @return {?}\n */\nonChildOutletCreated(childName: string, outlet: RouterOutlet): void {\n    const /** @type {?} */ context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n/**\n * Called when a `RouterOutlet` directive is destroyed.\n * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n * re-created later.\n * @param {?} childName\n * @return {?}\n */\nonChildOutletDestroyed(childName: string): void {\n    const /** @type {?} */ context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n    }\n  }\n/**\n * Called when the corresponding route is deactivated during navigation.\n * Because the component get destroyed, all children outlet are destroyed.\n * @return {?}\n */\nonOutletDeactivated(): Map<string, OutletContext> {\n    const /** @type {?} */ contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n/**\n * @param {?} contexts\n * @return {?}\n */\nonOutletReAttached(contexts: Map<string, OutletContext>) { this.contexts = contexts; }\n/**\n * @param {?} childName\n * @return {?}\n */\ngetOrCreateContext(childName: string): OutletContext {\n    let /** @type {?} */ context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext();\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n/**\n * @param {?} childName\n * @return {?}\n */\ngetContext(childName: string): OutletContext|null { return this.contexts.get(childName) || null; }\n}\n\nfunction ChildrenOutletContexts_tsickle_Closure_declarations() {\n/** @type {?} */\nChildrenOutletContexts.prototype.contexts;\n}\n\n"]}