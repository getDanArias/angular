{"version":3,"file":"router-testing.umd.js","sources":["../../../../packages/router/testing/src/router_testing_module.ts","../../../../packages/router/testing/src/testing.ts","../../../../packages/router/testing/public_api.ts","../../../../packages/router/testing/index.ts"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy} from '@angular/common';\nimport {MockLocationStrategy, SpyLocation} from '@angular/common/testing';\nimport {Compiler, Injectable, Injector, ModuleWithProviders, NgModule, NgModuleFactory, NgModuleFactoryLoader, Optional} from '@angular/core';\nimport {ChildrenOutletContexts, NoPreloading, PreloadingStrategy, ROUTES, Route, Router, RouterModule, Routes, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS as ROUTER_PROVIDERS, ɵflatten as flatten} from '@angular/router';\n/**\n * \\@whatItDoes Allows to simulate the loading of ng modules in tests.\n * \n * \\@howToUse \n * \n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n * \n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({ \n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n * \n * class LoadedModule {}\n * \n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n * \n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n * \n * router.navigateByUrl('/lazy/loaded');\n * ```\n * \n * \\@stable\n */\nexport class SpyNgModuleFactoryLoader implements NgModuleFactoryLoader {\n/**\n * \\@docsNotRequired\n */\n\nprivate _stubbedModules: {[path: string]: Promise<NgModuleFactory<any>>} = {};\n/**\n * \\@docsNotRequired\n * @param {?} modules\n * @return {?}\n */\nset stubbedModules(modules: {[path: string]: any}) {\n    const /** @type {?} */ res: {[path: string]: any} = {};\n    for (const /** @type {?} */ t of Object.keys(modules)) {\n      res[t] = this.compiler.compileModuleAsync(modules[t]);\n    }\n    this._stubbedModules = res;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nget stubbedModules(): {[path: string]: any} { return this._stubbedModules; }\n/**\n * @param {?} compiler\n */\nconstructor(private compiler: Compiler) {}\n/**\n * @param {?} path\n * @return {?}\n */\nload(path: string): Promise<NgModuleFactory<any>> {\n    if (this._stubbedModules[path]) {\n      return this._stubbedModules[path];\n    } else {\n      return /** @type {?} */(( <any>Promise.reject(new Error(`Cannot find module ${path}`))));\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Compiler, },\n];\n}\n\nfunction SpyNgModuleFactoryLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nSpyNgModuleFactoryLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSpyNgModuleFactoryLoader.ctorParameters;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nSpyNgModuleFactoryLoader.prototype._stubbedModules;\n/** @type {?} */\nSpyNgModuleFactoryLoader.prototype.compiler;\n}\n\n/**\n * Router setup factory function used for testing.\n * \n * \\@stable\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    urlHandlingStrategy?: UrlHandlingStrategy) {\n  const /** @type {?} */ router = new Router( /** @type {?} */((\n      null)), urlSerializer, contexts, location, injector, loader, compiler, flatten(routes));\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n  return router;\n}\n/**\n * \\@whatItDoes Sets up the router to be used for testing.\n * \n * \\@howToUse \n * \n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}])]\n *       )\n *     ]\n *   });\n * });\n * ```\n * \n * \\@description \n * \n * The modules sets up the router to be used for testing.\n * It provides spy implementations of {\\@link Location}, {\\@link LocationStrategy}, and {\\@link\n * NgModuleFactoryLoader}.\n * \n * \\@stable\n */\nexport class RouterTestingModule {\n/**\n * @param {?} routes\n * @return {?}\n */\nstatic withRoutes(routes: Routes): ModuleWithProviders {\n    return {ngModule: RouterTestingModule, providers: [provideRoutes(routes)]};\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  exports: [RouterModule],\n  providers: [\n    ROUTER_PROVIDERS, {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n    {provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader}, {\n      provide: Router,\n      useFactory: setupTestingRouter,\n      deps: [\n        UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n        ROUTES, [UrlHandlingStrategy, new Optional()]\n      ]\n    },\n    {provide: PreloadingStrategy, useExisting: NoPreloading}, provideRoutes([])\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction RouterTestingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterTestingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterTestingModule.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router/testing package.\n */\nexport {SpyNgModuleFactoryLoader,setupTestingRouter,RouterTestingModule} from './router_testing_module';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport {SpyNgModuleFactoryLoader,setupTestingRouter,RouterTestingModule} from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {SpyNgModuleFactoryLoader,setupTestingRouter,RouterTestingModule} from './public_api';\n"],"names":["Injectable","Compiler","Router","flatten","provideRoutes","NgModule","RouterModule","ROUTER_PROVIDERS","Location","SpyLocation","LocationStrategy","MockLocationStrategy","NgModuleFactoryLoader","UrlSerializer","ChildrenOutletContexts","Injector","ROUTES","UrlHandlingStrategy","Optional","PreloadingStrategy","NoPreloading"],"mappings":"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"}