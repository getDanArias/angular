{"version":3,"sources":["../../../../packages/router/src/recognize.ts"],"names":[],"mappings":"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","file":"recognize.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last} from './utils/collection';\nimport {TreeNode} from './utils/tree';\nclass NoMatch {}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @return {?}\n */\nexport function recognize(\n    rootComponentType: Type<any>| null, config: Routes, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n}\nclass Recognizer {\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n */\nconstructor(\nprivate rootComponentType: Type<any>|null,\nprivate config: Routes,\nprivate urlTree: UrlTree,\nprivate url: string) {}\n/**\n * @return {?}\n */\nrecognize(): Observable<RouterStateSnapshot> {\n    try {\n      const /** @type {?} */ rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n\n      const /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const /** @type {?} */ root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */(( this.urlTree.fragment)),\n          {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n      const /** @type {?} */ rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheritParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch ( /** @type {?} */e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n/**\n * @param {?} routeNode\n * @return {?}\n */\ninheritParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const /** @type {?} */ route = routeNode.value;\n\n    const /** @type {?} */ i = inheritedParamsDataResolve(route);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheritParamsAndData(n));\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @return {?}\n */\nprocessChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const /** @type {?} */ children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const /** @type {?} */ r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    throw new NoMatch();\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} route\n * @param {?} rawSegment\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    if (route.path === '**') {\n      const /** @type {?} */ params = segments.length > 0 ? /** @type {?} */(( last(segments))).parameters : {};\n      const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */(( this.urlTree.fragment)),\n          getData(route), outlet, /** @type {?} */(( route.component)), route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const {consumedSegments, parameters, lastChild} = match(rawSegment, route, segments);\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} =\n        split(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\n\n    const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n        consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */((\n        this.urlTree.fragment)), getData(route), outlet, /** @type {?} */(( route.component)), route,\n        getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length,\n        getResolve(route));\n\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction Recognizer_tsickle_Closure_declarations() {\n/** @type {?} */\nRecognizer.prototype.rootComponentType;\n/** @type {?} */\nRecognizer.prototype.config;\n/** @type {?} */\nRecognizer.prototype.urlTree;\n/** @type {?} */\nRecognizer.prototype.url;\n}\n\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return /** @type {?} */(( route._loadedConfig)).routes;\n  }\n\n  return [];\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    }\n\n    return {consumedSegments: [], lastChild: 0, parameters: {}};\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const /** @type {?} */ posParams: {[n: string]: string} = {};\n  forEach( /** @type {?} */((res.posParams)), (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const /** @type {?} */ parameters = res.consumed.length > 0 ?\n      {...posParams, ...res.consumed[res.consumed.length - 1].parameters} :\n      posParams;\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const /** @type {?} */ names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const /** @type {?} */ p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const /** @type {?} */ c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let /** @type {?} */ s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let /** @type {?} */ s = segmentGroup;\n  let /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {segmentGroup: s, slicedSegments};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = segmentGroup.segments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n"]}