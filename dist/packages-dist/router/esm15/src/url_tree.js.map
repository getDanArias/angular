{"version":3,"sources":["../../../../packages/router/src/url_tree.ts"],"names":[],"mappings":"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","file":"url_tree.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PRIMARY_OUTLET, ParamMap, convertToParamMap} from './shared';\nimport {forEach, shallowEqual} from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const /** @type {?} */ c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => containee[key] === container[key]);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const /** @type {?} */ c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n    const /** @type {?} */ next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n * \n * \\@stable\n */\nexport class UrlTree {\n/**\n * \\@internal\n */\n_queryParamMap: ParamMap;\n/**\n * \\@internal\n * @param {?} root\n * @param {?} queryParams\n * @param {?} fragment\n */\nconstructor(\npublic root: UrlSegmentGroup,\npublic queryParams: {[key: string]: string},\npublic fragment: string|null) {}\n/**\n * @return {?}\n */\nget queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return DEFAULT_SERIALIZER.serialize(this); }\n}\n\nfunction UrlTree_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlTree.prototype._queryParamMap;\n/**\n * The root segment group of the URL tree\n * @type {?}\n */\nUrlTree.prototype.root;\n/**\n * The query params of the URL\n * @type {?}\n */\nUrlTree.prototype.queryParams;\n/**\n * The fragment of the URL\n * @type {?}\n */\nUrlTree.prototype.fragment;\n}\n\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n * \n * See {\\@link UrlTree} for more information.\n * \n * \\@stable\n */\nexport class UrlSegmentGroup {\n/**\n * \\@internal\n */\n_sourceSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_segmentIndexShift: number;\n/**\n * The parent node in the url tree\n */\nparent: UrlSegmentGroup|null = null;\n/**\n * @param {?} segments\n * @param {?} children\n */\nconstructor(\npublic segments: UrlSegment[],\npublic children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n/**\n * Whether the segment has child segments\n * @return {?}\n */\nhasChildren(): boolean { return this.numberOfChildren > 0; }\n/**\n * Number of child segments\n * @return {?}\n */\nget numberOfChildren(): number { return Object.keys(this.children).length; }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePaths(this); }\n}\n\nfunction UrlSegmentGroup_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._sourceSegment;\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._segmentIndexShift;\n/**\n * The parent node in the url tree\n * @type {?}\n */\nUrlSegmentGroup.prototype.parent;\n/**\n * The URL segments of this group. See {\\@link UrlSegment} for more information\n * @type {?}\n */\nUrlSegmentGroup.prototype.segments;\n/**\n * The list of children of this group\n * @type {?}\n */\nUrlSegmentGroup.prototype.children;\n}\n\n/**\n * \\@whatItDoes Represents a single URL segment.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n * \n * \\@stable\n */\nexport class UrlSegment {\n/**\n * \\@internal\n */\n_parameterMap: ParamMap;\n/**\n * @param {?} path\n * @param {?} parameters\n */\nconstructor(\npublic path: string,\npublic parameters: {[name: string]: string}) {}\n/**\n * @return {?}\n */\nget parameterMap() {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n    return this._parameterMap;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePath(this); }\n}\n\nfunction UrlSegment_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegment.prototype._parameterMap;\n/**\n * The path part of a URL segment\n * @type {?}\n */\nUrlSegment.prototype.path;\n/**\n * The matrix parameters associated with a segment\n * @type {?}\n */\nUrlSegment.prototype.parameters;\n}\n\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let /** @type {?} */ res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n * \n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n * \n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class UrlSerializer {\n  /** Parse a url into a {@link UrlTree} */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a {@link UrlTree} into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\nfunction UrlSerializer_tsickle_Closure_declarations() {\n\n/**\n * Parse a url into a {\\@link UrlTree}\n * @abstract\n * @param {?} url\n * @return {?}\n */\nUrlSerializer.prototype.parse = function(url) {};\n\n/**\n * Converts a {\\@link UrlTree} into a url\n * @abstract\n * @param {?} tree\n * @return {?}\n */\nUrlSerializer.prototype.serialize = function(tree) {};\n}\n\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n * \n * \\@description \n * \n * Example URLs:\n * \n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n * \n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n * \n * \\@stable\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n/**\n * Parses a url into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparse(url: string): UrlTree {\n    const /** @type {?} */ p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n/**\n * Converts a {\\@link UrlTree} into a url\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree): string {\n    const /** @type {?} */ segment = `/${serializeSegment(tree.root, true)}`;\n    const /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n    const /** @type {?} */ fragment = typeof tree.fragment === `string` ? `#${encodeURI(( /** @type {?} */((tree.fragment))))}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst /** @type {?} */ DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const /** @type {?} */ children: string[] = [];\n\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n\n  } else {\n    const /** @type {?} */ children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n\n    });\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query         = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"\\@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * @param {?} s\n * @return {?}\n */\nexport function encode(s: string): string {\n  return encodeURIComponent(s)\n      .replace(/%40/g, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path: UrlSegment): string {\n  return `${encode(path.path)}${serializeParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeParams(params: {[key: string]: string}): string {\n  return Object.keys(params).map(key => `;${encode(key)}=${encode(params[key])}`).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const /** @type {?} */ strParams: string[] = Object.keys(params).map((name) => {\n    const /** @type {?} */ value = params[name];\n    return Array.isArray(value) ? value.map(v => `${encode(name)}=${encode(v)}`).join('&') :\n                                  `${encode(name)}=${encode(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n\nconst /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str: string): string {\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str: string): string {\n  const /** @type {?} */ match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str: string): string {\n  const /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\nprivate remaining: string;\n/**\n * @param {?} url\n */\nconstructor(private url: string) { this.remaining = url; }\n/**\n * @return {?}\n */\nparseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n/**\n * @return {?}\n */\nparseQueryParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n/**\n * @return {?}\n */\nparseFragment(): string|null {\n    return this.consumeOptional('#') ? decodeURI(this.remaining) : null;\n  }\n/**\n * @return {?}\n */\n\nprivate parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const /** @type {?} */ segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let /** @type {?} */ children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let /** @type {?} */ res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n/**\n * @return {?}\n */\n\nprivate parseSegment(): UrlSegment {\n    const /** @type {?} */ path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n/**\n * @return {?}\n */\n\nprivate parseMatrixParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\n\nprivate parseParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.consumeOptional('=')) {\n      const /** @type {?} */ valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\n\nprivate parseQueryParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.consumeOptional('=')) {\n      const /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const /** @type {?} */ decodedKey = decode(key);\n    const /** @type {?} */ decodedVal = decode(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let /** @type {?} */ currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n/**\n * @param {?} allowPrimary\n * @return {?}\n */\n\nprivate parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const /** @type {?} */ segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const /** @type {?} */ path = matchSegments(this.remaining);\n\n      const /** @type {?} */ next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let /** @type {?} */ outletName: string = /** @type {?} */(( undefined));\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const /** @type {?} */ children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n/**\n * @param {?} str\n * @return {?}\n */\n\nprivate peekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n/**\n * @param {?} str\n * @return {?}\n */\n\nprivate consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} str\n * @return {?}\n */\n\nprivate capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n}\n\nfunction UrlParser_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlParser.prototype.remaining;\n/** @type {?} */\nUrlParser.prototype.url;\n}\n\n"]}