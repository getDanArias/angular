{"version":3,"sources":["../../../../packages/router/src/router.ts"],"names":[],"mappings":"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","file":"router.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {Compiler, Injector, NgModuleFactoryLoader, NgModuleRef, Type, isDevMode} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\n\nimport {applyRedirects} from './apply_redirects';\nimport {LoadedRouterConfig, QueryParamsHandling, Route, Routes, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {ChildActivationEnd, Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteEvent, RoutesRecognized} from './events';\nimport {PreActivation} from './pre_activation';\nimport {recognize} from './recognize';\nimport {DefaultRouteReuseStrategy, DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState} from './router_state';\nimport {Params, isNavigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {forEach} from './utils/collection';\nimport {TreeNode, nodeChildrenAsMap} from './utils/tree';\n\ndeclare let Zone: any;\n/**\n * \\@whatItDoes Represents the extra options used during navigation.\n * \n * \\@stable\n * @record\n */\nexport function NavigationExtras() {}\n\n\nfunction NavigationExtras_tsickle_Closure_declarations() {\n/**\n * Enables relative navigation from the current ActivatedRoute.\n * \n * Configuration:\n * \n * ```\n * [{\n *   path: 'parent',\n *   component: ParentComponent,\n *   children: [{\n *     path: 'list',\n *     component: ListComponent\n *   },{\n *     path: 'child',\n *     component: ChildComponent\n *   }]\n * }]\n * ```\n * \n * Navigate to list route from child route:\n * \n * ```\n *  \\@Component({...})\n *  class ChildComponent {\n *    constructor(private router: Router, private route: ActivatedRoute) {}\n * \n *    go() {\n *      this.router.navigate(['../list'], { relativeTo: this.route });\n *    }\n *  }\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.relativeTo;\n/**\n * Sets query parameters to the URL.\n * \n * ```\n * // Navigate to /results?page=1\n * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.queryParams;\n/**\n * Sets the hash fragment for the URL.\n * \n * ```\n * // Navigate to /results#top\n * this.router.navigate(['/results'], { fragment: 'top' });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.fragment;\n/**\n * Preserves the query parameters for the next navigation.\n * \n * deprecated, use `queryParamsHandling` instead\n * \n * ```\n * // Preserve query params from /results?page=1 to /view?page=1\n * this.router.navigate(['/view'], { preserveQueryParams: true });\n * ```\n * \n * @deprecated since v4\n * @type {?|undefined}\n */\nNavigationExtras.prototype.preserveQueryParams;\n/**\n *  config strategy to handle the query parameters for the next navigation.\n * \n * ```\n * // from /results?page=1 to /view?page=1&page=2\n * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.queryParamsHandling;\n/**\n * Preserves the fragment for the next navigation\n * \n * ```\n * // Preserve fragment from /results#top to /view#top\n * this.router.navigate(['/view'], { preserveFragment: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.preserveFragment;\n/**\n * Navigates without pushing a new state into history.\n * \n * ```\n * // Navigate silently to /view\n * this.router.navigate(['/view'], { skipLocationChange: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.skipLocationChange;\n/**\n * Navigates while replacing the current state in history.\n * \n * ```\n * // Navigate to /view\n * this.router.navigate(['/view'], { replaceUrl: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.replaceUrl;\n}\n\n\n/**\n * @whatItDoes Represents the extra options used during navigation.\n *\n * @stable\n */\nexport interface NavigationExtras {\n  /**\n  * Enables relative navigation from the current ActivatedRoute.\n  *\n  * Configuration:\n  *\n  * ```\n  * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n  * ```\n  *\n  * Navigate to list route from child route:\n  *\n  * ```\n  *  @Component({...})\n  *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n  * ```\n  */\n  relativeTo?: ActivatedRoute|null;\n\n  /**\n  * Sets query parameters to the URL.\n  *\n  * ```\n  * // Navigate to /results?page=1\n  * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n  * ```\n  */\n  queryParams?: Params|null;\n\n  /**\n  * Sets the hash fragment for the URL.\n  *\n  * ```\n  * // Navigate to /results#top\n  * this.router.navigate(['/results'], { fragment: 'top' });\n  * ```\n  */\n  fragment?: string;\n\n  /**\n  * Preserves the query parameters for the next navigation.\n  *\n  * deprecated, use `queryParamsHandling` instead\n  *\n  * ```\n  * // Preserve query params from /results?page=1 to /view?page=1\n  * this.router.navigate(['/view'], { preserveQueryParams: true });\n  * ```\n  *\n  * @deprecated since v4\n  */\n  preserveQueryParams?: boolean;\n\n  /**\n  *  config strategy to handle the query parameters for the next navigation.\n  *\n  * ```\n  * // from /results?page=1 to /view?page=1&page=2\n  * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n  * ```\n  */\n  queryParamsHandling?: QueryParamsHandling|null;\n  /**\n  * Preserves the fragment for the next navigation\n  *\n  * ```\n  * // Preserve fragment from /results#top to /view#top\n  * this.router.navigate(['/view'], { preserveFragment: true });\n  * ```\n  */\n  preserveFragment?: boolean;\n  /**\n  * Navigates without pushing a new state into history.\n  *\n  * ```\n  * // Navigate silently to /view\n  * this.router.navigate(['/view'], { skipLocationChange: true });\n  * ```\n  */\n  skipLocationChange?: boolean;\n  /**\n  * Navigates while replacing the current state in history.\n  *\n  * ```\n  * // Navigate to /view\n  * this.router.navigate(['/view'], { replaceUrl: true });\n  * ```\n  */\n  replaceUrl?: boolean;\n}\n\n/**\n * @whatItDoes Error handler that is invoked when a navigation errors.\n *\n * @description\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @stable\n */\nexport type ErrorHandler = (error: any) => any;\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\ntype NavigationSource = 'imperative' | 'popstate' | 'hashchange';\n\ntype NavigationParams = {\n  id: number,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationSource,\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot) => Observable<void>;\n/**\n * \\@internal\n * @param {?} snapshot\n * @return {?}\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot): Observable<void> {\n  return /** @type {?} */(( of (null) as any));\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n * \n * See {\\@link Routes} for more details and examples.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class Router {\nprivate currentUrlTree: UrlTree;\nprivate rawUrlTree: UrlTree;\nprivate navigations = new BehaviorSubject<NavigationParams>( /** @type {?} */((null)));\nprivate routerEvents = new Subject<Event>();\nprivate currentRouterState: RouterState;\nprivate locationSubscription: Subscription;\nprivate navigationId: number = 0;\nprivate configLoader: RouterConfigLoader;\nprivate ngModule: NgModuleRef<any>;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n */\nerrorHandler: ErrorHandler = defaultErrorHandler;\n/**\n * Indicates if at least one navigation happened.\n */\nnavigated: boolean = false;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n */\nhooks: {beforePreactivation: RouterHook, afterPreactivation: RouterHook} = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook\n  };\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n */\nurlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n/**\n * @param {?} rootComponentType\n * @param {?} urlSerializer\n * @param {?} rootContexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n */\nconstructor(\nprivate rootComponentType: Type<any>|null,\nprivate urlSerializer: UrlSerializer,\nprivate rootContexts: ChildrenOutletContexts,\nprivate location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler,\npublic config: Routes) {\n    const /** @type {?} */ onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const /** @type {?} */ onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.processNavigations();\n  }\n/**\n * \\@internal \n * TODO: this should be removed once the constructor of the router made internal\n * @param {?} rootComponentType\n * @return {?}\n */\nresetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.currentRouterState.root.component = this.rootComponentType;\n  }\n/**\n * Sets up the location change listener and performs the initial navigation.\n * @return {?}\n */\ninitialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n/**\n * Sets up the location change listener.\n * @return {?}\n */\nsetUpLocationChangeListener(): void {\n    // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n    // which does not work properly with zone.js in IE and Safari\n    if (!this.locationSubscription) {\n      this.locationSubscription = /** @type {?} */(( <any>this.location.subscribe(Zone.current.wrap((change: any) => {\n        const /** @type {?} */ rawUrlTree = this.urlSerializer.parse(change['url']);\n        const /** @type {?} */ source: NavigationSource = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, {replaceUrl: true}); }, 0);\n      }))));\n    }\n  }\n/**\n * The current route state\n * @return {?}\n */\nget routerState(): RouterState { return this.currentRouterState; }\n/**\n * The current url\n * @return {?}\n */\nget url(): string { return this.serializeUrl(this.currentUrlTree); }\n/**\n * An observable of router events\n * @return {?}\n */\nget events(): Observable<Event> { return this.routerEvents; }\n/**\n * \\@internal\n * @param {?} e\n * @return {?}\n */\ntriggerEvent(e: Event): void { this.routerEvents.next(e); }\n/**\n * Resets the configuration used for navigation and generating links.\n * \n * ### Usage\n * \n * ```\n * router.resetConfig([\n *  { path: 'team/:id', component: TeamCmp, children: [\n *    { path: 'simple', component: SimpleCmp },\n *    { path: 'user/:name', component: UserCmp }\n *  ]}\n * ]);\n * ```\n * @param {?} config\n * @return {?}\n */\nresetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config;\n    this.navigated = false;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nngOnDestroy(): void { this.dispose(); }\n/**\n * Disposes of the router\n * @return {?}\n */\ndispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = /** @type {?} */(( null));\n    }\n  }\n/**\n * Applies an array of commands to the current url tree and creates a new url tree.\n * \n * When given an activate route, applies the given commands starting from the route.\n * When not given a route, applies the given command starting from the root.\n * \n * ### Usage\n * \n * ```\n * // create /team/33/user/11\n * router.createUrlTree(['/team', 33, 'user', 11]);\n * \n * // create /team/33;expand=true/user/11\n * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n * \n * // you can collapse static segments like this (this works only with the first passed-in value):\n * router.createUrlTree(['/team/33/user', userId]);\n * \n * // If the first segment can contain slashes, and you do not want the router to split it, you\n * // can do the following:\n * \n * router.createUrlTree([{segmentPath: '/one/two'}]);\n * \n * // create /team/33/(user/11//right:chat)\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n * \n * // remove the right secondary node\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n * \n * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n * \n * // navigate to /team/33/user/11/details\n * router.createUrlTree(['details'], {relativeTo: route});\n * \n * // navigate to /team/33/user/22\n * router.createUrlTree(['../22'], {relativeTo: route});\n * \n * // navigate to /team/44/user/22\n * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n * ```\n * @param {?} commands\n * @param {?=} navigationExtras\n * @return {?}\n */\ncreateUrlTree(commands: any[], navigationExtras: NavigationExtras = {}): UrlTree {\n    const {relativeTo,          queryParams,         fragment,\n           preserveQueryParams, queryParamsHandling, preserveFragment} = navigationExtras;\n    if (isDevMode() && preserveQueryParams && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const /** @type {?} */ a = relativeTo || this.routerState.root;\n    const /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let /** @type {?} */ q: Params|null = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = {...this.currentUrlTree.queryParams, ...queryParams};\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams || null;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */(( q)), /** @type {?} */(( f)));\n  }\n/**\n * Navigate based on the provided url. This navigation is always absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigateByUrl(\"/team/33/user/11\");\n * \n * // Navigate without updating the URL\n * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n * ```\n * \n * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n * and does not apply any delta to the current one.\n * @param {?} url\n * @param {?=} extras\n * @return {?}\n */\nnavigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    const /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n    const /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', extras);\n  }\n/**\n * Navigate based on the provided array of commands and a starting point.\n * If no starting route is provided, the navigation is absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n * \n * // Navigate without updating the URL\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n * ```\n * \n * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n * URL.\n * @param {?} commands\n * @param {?=} extras\n * @return {?}\n */\nnavigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n      extras.queryParams = this.removeEmptyProps(extras.queryParams);\n    }\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n/**\n * Serializes a {\\@link UrlTree} into a string\n * @param {?} url\n * @return {?}\n */\nserializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n/**\n * Parses a string into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n/**\n * Returns whether the url is activated\n * @param {?} url\n * @param {?} exact\n * @return {?}\n */\nisActive(url: string|UrlTree, exact: boolean): boolean {\n    if (url instanceof UrlTree) {\n      return containsTree(this.currentUrlTree, url, exact);\n    }\n\n    const /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n    return containsTree(this.currentUrlTree, urlTree, exact);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\n\nprivate removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const /** @type {?} */ value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n/**\n * @return {?}\n */\n\nprivate processNavigations(): void {\n    concatMap\n        .call(\n            this.navigations,\n            (nav: NavigationParams) => {\n              if (nav) {\n                this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(() => {});\n              } else {\n                return /** @type {?} */(( <any>of (null)));\n              }\n            })\n        .subscribe(() => {});\n  }\n/**\n * @param {?} rawUrl\n * @param {?} source\n * @param {?} extras\n * @return {?}\n */\n\nprivate scheduleNavigation(rawUrl: UrlTree, source: NavigationSource, extras: NavigationExtras):\n      Promise<boolean> {\n    const /** @type {?} */ lastNavigation = this.navigations.value;\n\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    let /** @type {?} */ resolve: any = null;\n    let /** @type {?} */ reject: any = null;\n\n    const /** @type {?} */ promise = new Promise<boolean>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    const /** @type {?} */ id = ++this.navigationId;\n    this.navigations.next({id, source, rawUrl, extras, resolve, reject, promise});\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => Promise.reject(e));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\n\nprivate executeScheduledNavigation({id, rawUrl, extras, resolve, reject}: NavigationParams):\n      void {\n    const /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n    const /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\n    if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null))\n          .then(resolve, reject);\n\n      // we cannot process the current URL, but we could process the previous one =>\n      // we need to do some cleanup\n    } else if (\n        urlTransition && this.rawUrlTree &&\n        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, false, false, id,\n                  createEmptyState(url, this.rootComponentType).snapshot))\n          .then(resolve, reject);\n\n    } else {\n      this.rawUrlTree = rawUrl;\n      resolve(null);\n    }\n  }\n/**\n * @param {?} url\n * @param {?} rawUrl\n * @param {?} shouldPreventPushState\n * @param {?} shouldReplaceUrl\n * @param {?} id\n * @param {?} precreatedState\n * @return {?}\n */\n\nprivate runNavigate(\n      url: UrlTree, rawUrl: UrlTree, shouldPreventPushState: boolean, shouldReplaceUrl: boolean,\n      id: number, precreatedState: RouterStateSnapshot|null): Promise<boolean> {\n    if (id !== this.navigationId) {\n      this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n      this.routerEvents.next(new NavigationCancel(\n          id, this.serializeUrl(url),\n          `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      // create an observable of the url and route state snapshot\n      // this operation do not result in any side effects\n      let /** @type {?} */ urlAndSnapshot$: Observable<{appliedUrl: UrlTree, snapshot: RouterStateSnapshot}>;\n      if (!precreatedState) {\n        const /** @type {?} */ moduleInjector = this.ngModule.injector;\n        const /** @type {?} */ redirectsApplied$ =\n            applyRedirects(moduleInjector, this.configLoader, this.urlSerializer, url, this.config);\n\n        urlAndSnapshot$ = mergeMap.call(redirectsApplied$, (appliedUrl: UrlTree) => {\n          return map.call(\n              recognize(\n                  this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl)),\n              (snapshot: any) => {\n\n                this.routerEvents.next(new RoutesRecognized(\n                    id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n                return {appliedUrl, snapshot};\n              });\n        });\n      } else {\n        urlAndSnapshot$ = of ({appliedUrl: url, snapshot: precreatedState});\n      }\n\n      const /** @type {?} */ beforePreactivationDone$ = mergeMap.call(\n          urlAndSnapshot$, (p: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            return map.call(this.hooks.beforePreactivation(p.snapshot), () => p);\n          });\n\n      // run preactivation: guards and data resolvers\n      let /** @type {?} */ preActivation: PreActivation;\n\n      const /** @type {?} */ preactivationSetup$ = map.call(\n          beforePreactivationDone$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            const /** @type {?} */ moduleInjector = this.ngModule.injector;\n            preActivation = new PreActivation(\n                snapshot, this.currentRouterState.snapshot, moduleInjector,\n                (evt: RouteEvent) => this.triggerEvent(evt));\n            preActivation.initalize(this.rootContexts);\n            return {appliedUrl, snapshot};\n          });\n\n      const /** @type {?} */ preactivationCheckGuards$ = mergeMap.call(\n          preactivationSetup$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            if (this.navigationId !== id) return of (false);\n\n            this.triggerEvent(\n                new GuardsCheckStart(id, this.serializeUrl(url), appliedUrl, snapshot));\n\n            return map.call(preActivation.checkGuards(), (shouldActivate: boolean) => {\n              this.triggerEvent(new GuardsCheckEnd(\n                  id, this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));\n              return {appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate};\n            });\n          });\n\n      const /** @type {?} */ preactivationResolveData$ = mergeMap.call(\n          preactivationCheckGuards$,\n          (p: {appliedUrl: string, snapshot: RouterStateSnapshot, shouldActivate: boolean}) => {\n            if (this.navigationId !== id) return of (false);\n\n            if (p.shouldActivate && preActivation.isActivating()) {\n              this.triggerEvent(\n                  new ResolveStart(id, this.serializeUrl(url), p.appliedUrl, p.snapshot));\n              return map.call(preActivation.resolveData(), () => {\n                this.triggerEvent(\n                    new ResolveEnd(id, this.serializeUrl(url), p.appliedUrl, p.snapshot));\n                return p;\n              });\n            } else {\n              return of (p);\n            }\n          });\n\n      const /** @type {?} */ preactivationDone$ = mergeMap.call(preactivationResolveData$, (p: any) => {\n        return map.call(this.hooks.afterPreactivation(p.snapshot), () => p);\n      });\n\n\n      // create router state\n      // this operation has side effects => route state is being affected\n      const /** @type {?} */ routerState$ =\n          map.call(preactivationDone$, ({appliedUrl, snapshot, shouldActivate}: any) => {\n            if (shouldActivate) {\n              const /** @type {?} */ state =\n                  createRouterState(this.routeReuseStrategy, snapshot, this.currentRouterState);\n              return {appliedUrl, state, shouldActivate};\n            } else {\n              return {appliedUrl, state: null, shouldActivate};\n            }\n          });\n\n\n      // applied the new router state\n      // this operation has side effects\n      let /** @type {?} */ navigationIsSuccessful: boolean;\n      const /** @type {?} */ storedState = this.currentRouterState;\n      const /** @type {?} */ storedUrl = this.currentUrlTree;\n\n      routerState$\n          .forEach(({appliedUrl, state, shouldActivate}: any) => {\n            if (!shouldActivate || id !== this.navigationId) {\n              navigationIsSuccessful = false;\n              return;\n            }\n\n            this.currentUrlTree = appliedUrl;\n            this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n\n            this.currentRouterState = state;\n\n            if (!shouldPreventPushState) {\n              const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n              if (this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                this.location.replaceState(path);\n              } else {\n                this.location.go(path);\n              }\n            }\n\n            new ActivateRoutes(\n                this.routeReuseStrategy, state, storedState, (evt: Event) => this.triggerEvent(evt))\n                .activate(this.rootContexts);\n\n            navigationIsSuccessful = true;\n          })\n          .then(\n              () => {\n                if (navigationIsSuccessful) {\n                  this.navigated = true;\n                  this.routerEvents.next(new NavigationEnd(\n                      id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\n                  resolvePromise(true);\n                } else {\n                  this.resetUrlToCurrentUrlTree();\n                  this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), ''));\n                  resolvePromise(false);\n                }\n              },\n              (e: any) => {\n                if (isNavigationCancelingError(e)) {\n                  this.resetUrlToCurrentUrlTree();\n                  this.navigated = true;\n                  this.routerEvents.next(\n                      new NavigationCancel(id, this.serializeUrl(url), e.message));\n                  resolvePromise(false);\n                } else {\n                  this.routerEvents.next(new NavigationError(id, this.serializeUrl(url), e));\n                  try {\n                    resolvePromise(this.errorHandler(e));\n                  } catch ( /** @type {?} */ee) {\n                    rejectPromise(ee);\n                  }\n                }\n\n                this.currentRouterState = storedState;\n                this.currentUrlTree = storedUrl;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n                this.location.replaceState(this.serializeUrl(this.rawUrlTree));\n              });\n    });\n  }\n/**\n * @return {?}\n */\n\nprivate resetUrlToCurrentUrlTree(): void {\n    const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n    this.location.replaceState(path);\n  }\n}\n\nfunction Router_tsickle_Closure_declarations() {\n/** @type {?} */\nRouter.prototype.currentUrlTree;\n/** @type {?} */\nRouter.prototype.rawUrlTree;\n/** @type {?} */\nRouter.prototype.navigations;\n/** @type {?} */\nRouter.prototype.routerEvents;\n/** @type {?} */\nRouter.prototype.currentRouterState;\n/** @type {?} */\nRouter.prototype.locationSubscription;\n/** @type {?} */\nRouter.prototype.navigationId;\n/** @type {?} */\nRouter.prototype.configLoader;\n/** @type {?} */\nRouter.prototype.ngModule;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n * @type {?}\n */\nRouter.prototype.errorHandler;\n/**\n * Indicates if at least one navigation happened.\n * @type {?}\n */\nRouter.prototype.navigated;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n * @type {?}\n */\nRouter.prototype.hooks;\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n * @type {?}\n */\nRouter.prototype.urlHandlingStrategy;\n/** @type {?} */\nRouter.prototype.routeReuseStrategy;\n/** @type {?} */\nRouter.prototype.rootComponentType;\n/** @type {?} */\nRouter.prototype.urlSerializer;\n/** @type {?} */\nRouter.prototype.rootContexts;\n/** @type {?} */\nRouter.prototype.location;\n/** @type {?} */\nRouter.prototype.config;\n}\n\nclass ActivateRoutes {\n/**\n * @param {?} routeReuseStrategy\n * @param {?} futureState\n * @param {?} currState\n * @param {?} forwardEvent\n */\nconstructor(\nprivate routeReuseStrategy: RouteReuseStrategy,\nprivate futureState: RouterState,\nprivate currState: RouterState,\nprivate forwardEvent: (evt: RouteEvent) => void) {}\n/**\n * @param {?} parentContexts\n * @return {?}\n */\nactivate(parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ futureRoot = this.futureState._root;\n    const /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @return {?}\n */\n\nprivate deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const /** @type {?} */ childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    forEach(children, (v: TreeNode<ActivatedRoute>, childName: string) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContext\n * @return {?}\n */\n\nprivate deactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContext: ChildrenOutletContexts): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const /** @type {?} */ context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n    if (context && context.outlet) {\n      const /** @type {?} */ componentRef = context.outlet.detach();\n      const /** @type {?} */ contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate deactivateRouteAndOutlet(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n\n    if (context) {\n      const /** @type {?} */ children: {[outletName: string]: any} = nodeChildrenAsMap(route);\n      const /** @type {?} */ contexts = route.value.component ? context.children : parentContexts;\n\n      forEach(children, (v: any, k: string) => this.deactivateRouteAndItsChildren(v, contexts));\n\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @return {?}\n */\n\nprivate activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ children: {[outlet: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(\n        c => { this.activateRoutes(c, children[c.value.outlet], contexts); });\n    if (futureNode.children.length && futureNode.value.routeConfig) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.routeConfig));\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const /** @type {?} */ stored =\n              ( /** @type {?} */((<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot))));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n          const /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n}\n\nfunction ActivateRoutes_tsickle_Closure_declarations() {\n/** @type {?} */\nActivateRoutes.prototype.routeReuseStrategy;\n/** @type {?} */\nActivateRoutes.prototype.futureState;\n/** @type {?} */\nActivateRoutes.prototype.currState;\n/** @type {?} */\nActivateRoutes.prototype.forwardEvent;\n}\n\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  for (let /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n    const /** @type {?} */ route = s._routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands: string[]): void {\n  for (let /** @type {?} */ i = 0; i < commands.length; i++) {\n    const /** @type {?} */ cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n"]}