{"version":3,"sources":["../../../../packages/router/src/router_preloader.ts"],"names":[],"mappings":"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","file":"router_preloader.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef, OnDestroy} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {Event, NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\nfunction PreloadingStrategy_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\nPreloadingStrategy.prototype.preload = function(route, fn) {};\n}\n\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\n * \n * \\@howToUse \n * \n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n * \n * \\@experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return _catch.call(fn(), () => of (null));\n  }\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n * \n * \\@description \n * \n * This strategy is enabled by default.\n * \n * \\@experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n * \n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n * \n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n * \n * \\@stable\n */\nexport class RouterPreloader implements OnDestroy {\nprivate loader: RouterConfigLoader;\nprivate subscription: Subscription;\n/**\n * @param {?} router\n * @param {?} moduleLoader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} preloadingStrategy\n */\nconstructor(\nprivate router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\nprivate injector: Injector,\nprivate preloadingStrategy: PreloadingStrategy) {\n    const /** @type {?} */ onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const /** @type {?} */ onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  };\n/**\n * @return {?}\n */\nsetUpPreloading(): void {\n    const /** @type {?} */ navigations$ = filter.call(this.router.events, (e: Event) => e instanceof NavigationEnd);\n    this.subscription = concatMap.call(navigations$, () => this.preload()).subscribe(() => {});\n  }\n/**\n * @return {?}\n */\npreload(): Observable<any> {\n    const /** @type {?} */ ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @return {?}\n */\n\nprivate processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const /** @type {?} */ res: Observable<any>[] = [];\n    for (const /** @type {?} */ route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        const /** @type {?} */ childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route));\n\n        // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n    return mergeAll.call(from(res));\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\n\nprivate preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const /** @type {?} */ loaded$ = this.loader.load(ngModule.injector, route);\n      return mergeMap.call(loaded$, (config: LoadedRouterConfig) => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      });\n    });\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Router, },\n{type: NgModuleFactoryLoader, },\n{type: Compiler, },\n{type: Injector, },\n{type: PreloadingStrategy, },\n];\n}\n\nfunction RouterPreloader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterPreloader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterPreloader.ctorParameters;\n/** @type {?} */\nRouterPreloader.prototype.loader;\n/** @type {?} */\nRouterPreloader.prototype.subscription;\n/** @type {?} */\nRouterPreloader.prototype.router;\n/** @type {?} */\nRouterPreloader.prototype.injector;\n/** @type {?} */\nRouterPreloader.prototype.preloadingStrategy;\n}\n\n"]}