{"version":3,"sources":["../../../../packages/language-service/src/reflector_host.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAA0C,YAAY,EAAE,2BAA2B,EAAC,MAAM,uBAAuB,CAAC;AAGzH;IACE,YAAoB,IAA4B;QAA5B,SAAI,GAAJ,IAAI,CAAwB;QAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;YACvB,IAAI,CAAC,eAAe,GAAG,aAAa,IAAI,IAAI,CAAC,IAAI,CAAC,eAAiB,CAAC,aAAa,CAAC,CAAC;IACvF,CAAC;IAED,UAAU,CAAC,QAAgB,IAAa,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEzF,QAAQ,CAAC,QAAgB;QACvB,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QACnD,CAAC;QAED,8FAA8F;QAC9F,MAAM,CAAC,SAAW,CAAC;IACrB,CAAC;CAGF;AAED,yFAAyF;AACzF,8FAA8F;AAC9F,8CAA8C;AAC9C,MAAM,oBAAqB,SAAQ,YAAY;IAC7C,YACY,UAA4B,EAAE,WAAmC,EACzE,OAA+B;QACjC,KAAK;QACD,mFAAmF;QACnF,aAAa,CAAC,IAAM,EAAE,OAAO,EAC7B,IAAI,2BAA2B,CAAC,IAAI,mCAAmC,CAAC,WAAW,CAAC,CAAC,EACrF,EAAC,wBAAwB,EAAE,IAAI,EAAC,CAAC,CAAC;QAN5B,eAAU,GAAV,UAAU,CAAkB;IAOxC,CAAC;IAED,IAAc,OAAO,KAAK,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACrD,IAAc,OAAO,CAAC,KAAiB;QACrC,iDAAiD;IACnD,CAAC;CACF","file":"reflector_host.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AngularCompilerOptions, AotCompilerHost, CompilerHost, ModuleResolutionHostAdapter} from '@angular/compiler-cli';\nimport * as ts from 'typescript';\n\nclass ReflectorModuleModuleResolutionHost implements ts.ModuleResolutionHost {\n  constructor(private host: ts.LanguageServiceHost) {\n    if (host.directoryExists)\n      this.directoryExists = directoryName => this.host.directoryExists !(directoryName);\n  }\n\n  fileExists(fileName: string): boolean { return !!this.host.getScriptSnapshot(fileName); }\n\n  readFile(fileName: string): string {\n    let snapshot = this.host.getScriptSnapshot(fileName);\n    if (snapshot) {\n      return snapshot.getText(0, snapshot.getLength());\n    }\n\n    // Typescript readFile() declaration should be `readFile(fileName: string): string | undefined\n    return undefined !;\n  }\n\n  directoryExists: (directoryName: string) => boolean;\n}\n\n// This reflector host's purpose is to first set verboseInvalidExpressions to true so the\n// reflector will collect errors instead of throwing, and second to all deferring the creation\n// of the program until it is actually needed.\nexport class ReflectorHost extends CompilerHost {\n  constructor(\n      private getProgram: () => ts.Program, serviceHost: ts.LanguageServiceHost,\n      options: AngularCompilerOptions) {\n    super(\n        // The ancestor value for program is overridden below so passing null here is safe.\n        /* program */ null !, options,\n        new ModuleResolutionHostAdapter(new ReflectorModuleModuleResolutionHost(serviceHost)),\n        {verboseInvalidExpression: true});\n  }\n\n  protected get program() { return this.getProgram(); }\n  protected set program(value: ts.Program) {\n    // Discard the result set by ancestor constructor\n  }\n}\n"]}