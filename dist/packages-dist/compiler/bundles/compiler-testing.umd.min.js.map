{"version":3,"sources":["/Users/jasonaden/Projects/angular/dist/packages-dist/compiler/bundles/compiler-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","compiler","testing","core","this","_angular_core","_angular_compiler","_angular_core_testing","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","removeMetadata","metadata","remove","references","removeObjects","Set","_loop_1","prop","removeValue","Array","forEach","value","add","_propHashKey","_loop_2","propValue","filter","has","undefined","addMetadata","addValue","concat","setMetadata","set","propName","replacer","key","_serializeReference","JSON","stringify","ref","id","get","ɵstringify","_nextReferenceId","_valueProps","obj","props","keys","startsWith","push","proto","getPrototypeOf","protoProp","desc","getOwnPropertyDescriptor","MockSchemaRegistry","existingProperties","attrPropMapping","existingElements","invalidProperties","invalidAttributes","hasProperty","tagName","property","schemas","hasElement","schemaMetas","toLowerCase","allKnownElementNames","securityContext","selector","isAttribute","SecurityContext","NONE","getMappedPropName","attrName","getDefaultComponentElementName","validateProperty","name","indexOf","error","msg","validateAttribute","normalizeAnimationStyleProperty","normalizeAnimationStyleValue","camelCaseProp","userProvidedProp","val","toString","setPrototypeOf","__proto__","p","hasOwnProperty","MockDirectiveResolver","_super","_injector","reflector","_this","call","_directives","Map","_providerOverrides","_viewProviderOverrides","_views","_inlineTemplates","defineProperty","Compiler","enumerable","configurable","_clearCacheFor","component","_compiler","clearCacheFor","resolve","type","throwIfNotFound","providerOverrides","viewProviderOverrides","providers","originalViewProviders","Component","viewProviders","view","animations","templateUrl","inlineTemplate","template","inputs","outputs","host","exportAs","moduleId","queries","changeDetection","entryComponents","styles","styleUrls","encapsulation","interpolation","Directive","setDirective","setProvidersOverride","setViewProvidersOverride","setView","setInlineTemplate","DirectiveResolver","decorators","Injectable","ctorParameters","Injector","CompileReflector","MockNgModuleResolver","_ngModules","setNgModule","NgModuleResolver","MockPipeResolver","refector","_pipes","pipe","setPipe","PipeResolver","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","Error","TestingCompilerFactoryImpl","_compilerFactory","createTestingCompiler","options","createCompiler","TestingCompilerImpl","injector","CompileMetadataResolver","CompilerFactory","_directiveResolver","_pipeResolver","_moduleResolver","_metadataResolver","_overrider","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","getComponentFactory","checkOverrideAllowed","hasAotSummary","overrideModule","ngModule","NgModule","overrideDirective","directive","overrideComponent","overridePipe","Pipe","loadAotSummaries","summaries","clearCache","platformCoreDynamicTesting","createPlatformFactory","platformCoreDynamic","provide","COMPILER_OPTIONS","useValue","deps","useExisting","multi","ɵTestingCompilerFactory","useClass"],"mappings":";;;;;CAKC,SAAUA,OAAQC,SACC,gBAAZC,UAA0C,mBAAXC,QAAyBF,QAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,qBAAsBA,QAAQ,0BAC9H,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,UAAW,gBAAiB,oBAAqB,yBAA0BJ,SAC/HA,SAASD,OAAOO,GAAKP,OAAOO,OAAUP,OAAOO,GAAGC,SAAWR,OAAOO,GAAGC,aAAgBR,OAAOO,GAAGC,SAASC,QAAUT,OAAOO,GAAGC,SAASC,aAAeT,OAAOO,GAAGG,KAAKV,OAAOO,GAAGC,SAASR,OAAOO,GAAGG,KAAKD,UACrME,KAAM,SAAWT,QAAQU,cAAcC,kBAAkBC,uBAAyB,YA8HpF,SAASC,WAAUC,EAAGC,GAElB,QAASC,MAAOP,KAAKQ,YAAcH,EADnCI,cAAcJ,EAAGC,GAEjBD,EAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,GAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KAkXnF,QAASM,gBAAeC,SAAUC,OAAQC,YACtC,GAAqBC,eAAgB,GAAIC,KACrCC,QAAU,SAAUC,MACpB,GAAqBC,aAAcN,OAAOK,KACtCC,uBAAuBC,OACvBD,YAAYE,QAAQ,SAAUC,OAASP,cAAcQ,IAAIC,aAAaN,KAAMI,MAAOR,eAGnFC,cAAcQ,IAAIC,aAAaN,KAAMC,YAAaL,aAG1D,KAAK,GAAqBI,QAAQL,QAC9BI,QAAyBC,KAE7B,IAAIO,SAAU,SAAUP,MACpB,GAAqBQ,WAAYd,SAASM,KACtCQ,qBAAqBN,OACrBR,SAASM,MAAQQ,UAAUC,OAAO,SAAUL,OAAS,OAAQP,cAAca,IAAIJ,aAAaN,KAAMI,MAAOR,eAGrGC,cAAca,IAAIJ,aAAaN,KAAMQ,UAAWZ,eAChDF,SAASM,MAAQW,QAI7B,KAAK,GAAqBX,QAAQN,UAC9Ba,QAAyBP,MAQjC,QAASY,aAAYlB,SAAUW,KAC3B,IAAK,GAAqBL,QAAQK,KAAK,CACnC,GAAqBQ,UAAWR,IAAIL,MACfQ,UAAYd,SAASM,KACzB,OAAbQ,WAAqBA,oBAAqBN,OAC1CR,SAASM,MAAQQ,UAAUM,OAAOD,UAGlCnB,SAASM,MAAQa,UAS7B,QAASE,aAAYrB,SAAUsB,KAC3B,IAAK,GAAqBhB,QAAQgB,KAC9BtB,SAASM,MAAQgB,IAAIhB,MAS7B,QAASM,cAAaW,SAAUT,UAAWZ,YACvC,GAAqBsB,UAAW,SAAUC,IAAKf,OAI3C,MAHqB,kBAAVA,SACPA,MAAQgB,oBAAoBhB,MAAOR,aAEhCQ,MAEX,OAAOa,UAAW,IAAMI,KAAKC,UAAUd,UAAWU,UAOtD,QAASE,qBAAoBG,IAAK3B,YAC9B,GAAqB4B,IAAK5B,WAAW6B,IAAIF,IAKzC,OAJKC,MACDA,GAAK,GAAK3C,cAAc6C,WAAWH,KAAOI,mBAC1C/B,WAAWoB,IAAIO,IAAKC,KAEjBA,GAMX,QAASI,aAAYC,KACjB,GAAqBC,SAErBvC,QAAOwC,KAAKF,KAAK1B,QAAQ,SAAUH,MAC1BA,KAAKgC,WAAW,MACjBF,MAAMG,KAAKjC,OAKnB,KADA,GAAqBkC,OAAQL,IACtBK,MAAQ3C,OAAO4C,eAAeD,QACjC3C,OAAOwC,KAAKG,OAAO/B,QAAQ,SAAUiC,WACjC,GAAqBC,MAAO9C,OAAO+C,yBAAyBJ,MAAOE,YAC9DA,UAAUJ,WAAW,MAAQK,MAAQ,OAASA,OAC/CP,MAAMG,KAAKG,YAIvB,OAAON,OAvlBX,GAAIS,oBAAsB,WAQtB,QAASA,oBAAmBC,mBAAoBC,gBAAiBC,iBAAkBC,kBAAmBC,mBAClGhE,KAAK4D,mBAAqBA,mBAC1B5D,KAAK6D,gBAAkBA,gBACvB7D,KAAK8D,iBAAmBA,iBACxB9D,KAAK+D,kBAAoBA,kBACzB/D,KAAKgE,kBAAoBA,kBAoF7B,MA5EAL,oBAAmBjD,UAAUuD,YAAc,SAAUC,QAASC,SAAUC,SACpE,GAAqB5C,OAAQxB,KAAK4D,mBAAmBO,SACrD,OAAiB,UAAV3C,OAA0BA,OAOrCmC,mBAAmBjD,UAAU2D,WAAa,SAAUH,QAASI,aACzD,GAAqB9C,OAAQxB,KAAK8D,iBAAiBI,QAAQK,cAC3D,OAAiB,UAAV/C,OAA0BA,OAKrCmC,mBAAmBjD,UAAU8D,qBAAuB,WAAc,MAAO7D,QAAOwC,KAAKnD,KAAK8D,mBAO1FH,mBAAmBjD,UAAU+D,gBAAkB,SAAUC,SAAUP,SAAUQ,aACzE,MAAO1E,eAAc2E,gBAAgBC,MAMzClB,mBAAmBjD,UAAUoE,kBAAoB,SAAUC,UAAY,MAAO/E,MAAK6D,gBAAgBkB,WAAaA,UAIhHpB,mBAAmBjD,UAAUsE,+BAAiC,WAAc,MAAO,gBAKnFrB,mBAAmBjD,UAAUuE,iBAAmB,SAAUC,MACtD,MAAIlF,MAAK+D,kBAAkBoB,QAAQD,OAAQ,GAC9BE,OAAO,EAAMC,IAAK,wBAA0BH,KAAO,yCAGnDE,OAAO,IAOxBzB,mBAAmBjD,UAAU4E,kBAAoB,SAAUJ,MACvD,MAAIlF,MAAKgE,kBAAkBmB,QAAQD,OAAQ,GAEnCE,OAAO,EACPC,IAAK,yBAA2BH,KAAO,yCAIlCE,OAAO,IAOxBzB,mBAAmBjD,UAAU6E,gCAAkC,SAAUlD,UAAY,MAAOA,WAO5FsB,mBAAmBjD,UAAU8E,6BAA+B,SAAUC,cAAeC,iBAAkBC,KACnG,OAASP,MAAwB,KAAU5D,MAAOmE,IAAIC,aAEnDjC,sBAmBPlD,cAAgBE,OAAOkF,iBACpBC,uBAA2BxE,QAAS,SAAUjB,EAAGC,GAAKD,EAAEyF,UAAYxF,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIyF,KAAKzF,GAAOA,EAAE0F,eAAeD,KAAI1F,EAAE0F,GAAKzF,EAAEyF,KAuBrEE,sBAAyB,SAAUC,QAMnC,QAASD,uBAAsBE,UAAWC,WACtC,GAAIC,OAAQH,OAAOI,KAAKtG,KAAMoG,YAAcpG,IAO5C,OANAqG,OAAMF,UAAYA,UAClBE,MAAME,YAAc,GAAIC,KACxBH,MAAMI,mBAAqB,GAAID,KAC/BH,MAAMK,uBAAyB,GAAIF,KACnCH,MAAMM,OAAS,GAAIH,KACnBH,MAAMO,iBAAmB,GAAIJ,KACtBH,MAmIX,MAhJAjG,WAAU6F,sBAAuBC,QAejCvF,OAAOkG,eAAeZ,sBAAsBvF,UAAW,aAInDmC,IAAK,WAAc,MAAO7C,MAAKmG,UAAUtD,IAAI5C,cAAc6G,WAC3DC,YAAY,EACZC,cAAc,IAMlBf,sBAAsBvF,UAAUuG,eAAiB,SAAUC,WAAalH,KAAKmH,UAAUC,cAAcF,YAMrGjB,sBAAsBvF,UAAU2G,QAAU,SAAUC,KAAMC,iBAC9B,SAApBA,kBAA8BA,iBAAkB,EACpD,IAAqBzG,UAAWd,KAAKuG,YAAY1D,IAAIyE,OAAS,IAI9D,IAHKxG,WACDA,SAAWoF,OAAOxF,UAAU2G,QAAQf,KAAKtG,KAAMsH,KAAMC,mBAEpDzG,SACD,MAAO,KAEX,IAAqB0G,mBAAoBxH,KAAKyG,mBAAmB5D,IAAIyE,MAChDG,sBAAwBzH,KAAK0G,uBAAuB7D,IAAIyE,MACxDI,UAAY5G,SAAS4G,SAC1C,IAAyB,MAArBF,kBAA2B,CAC3B,GAAqBG,uBAAwB7G,SAAS4G,aACtDA,WAAYC,sBAAsBzF,OAAOsF,mBAE7C,GAAI1G,mBAAoBb,eAAc2H,UAAW,CAC7C,GAAqBC,eAAgB/G,SAAS+G,aAC9C,IAA6B,MAAzBJ,sBAA+B,CAC/B,GAAqBE,uBAAwB7G,SAAS+G,iBACtDA,eAAgBF,sBAAsBzF,OAAOuF,uBAEjD,GAAqBK,MAAO9H,KAAK2G,OAAO9D,IAAIyE,OAASxG,SAChCiH,WAAaD,KAAKC,WAClBC,YAAcF,KAAKE,YACnBC,eAAiBjI,KAAK4G,iBAAiB/D,IAAIyE,KAOhE,OANIW,gBACAD,YAAcjG,OAGdkG,eAAiBH,KAAKI,SAEnB,GAAIjI,eAAc2H,WACrBlD,SAAU5D,SAAS4D,SACnByD,OAAQrH,SAASqH,OACjBC,QAAStH,SAASsH,QAClBC,KAAMvH,SAASuH,KACfC,SAAUxH,SAASwH,SACnBC,SAAUzH,SAASyH,SACnBC,QAAS1H,SAAS0H,QAClBC,gBAAiB3H,SAAS2H,gBAC1Bf,UAAWA,UACXG,cAAeA,cACfa,gBAAiB5H,SAAS4H,gBAC1BR,SAAUD,eACVD,YAAaA,YACbD,WAAYA,WACZY,OAAQb,KAAKa,OACbC,UAAWd,KAAKc,UAChBC,cAAef,KAAKe,cACpBC,cAAehB,KAAKgB,gBAG5B,MAAO,IAAI7I,eAAc8I,WACrBrE,SAAU5D,SAAS4D,SACnByD,OAAQrH,SAASqH,OACjBC,QAAStH,SAASsH,QAClBC,KAAMvH,SAASuH,KACfX,UAAWA,UACXY,SAAUxH,SAASwH,SACnBE,QAAS1H,SAAS0H,WAS1BvC,sBAAsBvF,UAAUsI,aAAe,SAAU1B,KAAMxG,UAC3Dd,KAAKuG,YAAYnE,IAAIkF,KAAMxG,UAC3Bd,KAAKiH,eAAeK,OAOxBrB,sBAAsBvF,UAAUuI,qBAAuB,SAAU3B,KAAMI,WACnE1H,KAAKyG,mBAAmBrE,IAAIkF,KAAMI,WAClC1H,KAAKiH,eAAeK,OAOxBrB,sBAAsBvF,UAAUwI,yBAA2B,SAAU5B,KAAMO,eACvE7H,KAAK0G,uBAAuBtE,IAAIkF,KAAMO,eACtC7H,KAAKiH,eAAeK,OAQxBrB,sBAAsBvF,UAAUyI,QAAU,SAAUjC,UAAWY,MAC3D9H,KAAK2G,OAAOvE,IAAI8E,UAAWY,MAC3B9H,KAAKiH,eAAeC,YAQxBjB,sBAAsBvF,UAAU0I,kBAAoB,SAAUlC,UAAWgB,UACrElI,KAAK4G,iBAAiBxE,IAAI8E,UAAWgB,UACrClI,KAAKiH,eAAeC,YAEjBjB,uBACT/F,kBAAkBmJ,kBACpBpD,uBAAsBqD,aAChBhC,KAAMrH,cAAcsJ,aAG1BtD,sBAAsBuD,eAAiB,WAAc,QAC/ClC,KAAMrH,cAAcwJ,WACpBnC,KAAMpH,kBAAkBwJ;;;;;;;AAc9B,GAAIC,sBAAwB,SAAUzD,QAMlC,QAASyD,sBAAqBxD,UAAWC,WACrC,GAAIC,OAAQH,OAAOI,KAAKtG,KAAMoG,YAAcpG,IAG5C,OAFAqG,OAAMF,UAAYA,UAClBE,MAAMuD,WAAa,GAAIpD,KAChBH,MAsCX,MA/CAjG,WAAUuJ,qBAAsBzD,QAiBhCyD,qBAAqBjJ,UAAUmJ,YAAc,SAAUvC,KAAMxG,UACzDd,KAAK4J,WAAWxH,IAAIkF,KAAMxG,UAC1Bd,KAAKiH,eAAeK,OAWxBqC,qBAAqBjJ,UAAU2G,QAAU,SAAUC,KAAMC,iBAErD,MADwB,UAApBA,kBAA8BA,iBAAkB,GAC7CvH,KAAK4J,WAAW/G,IAAIyE,OAAWpB,OAAOxF,UAAU2G,QAAQf,KAAKtG,KAAMsH,KAAMC,kBAEpF5G,OAAOkG,eAAe8C,qBAAqBjJ,UAAW,aAIlDmC,IAAK,WAAc,MAAO7C,MAAKmG,UAAUtD,IAAI5C,cAAc6G,WAC3DC,YAAY,EACZC,cAAc,IAMlB2C,qBAAqBjJ,UAAUuG,eAAiB,SAAUC,WAAalH,KAAKmH,UAAUC,cAAcF,YAC7FyC,sBACTzJ,kBAAkB4J,iBACpBH,sBAAqBL,aACfhC,KAAMrH,cAAcsJ,aAG1BI,qBAAqBH,eAAiB,WAAc,QAC9ClC,KAAMrH,cAAcwJ,WACpBnC,KAAMpH,kBAAkBwJ;;;;;;;AAc9B,GAAIK,kBAAoB,SAAU7D,QAM9B,QAAS6D,kBAAiB5D,UAAW6D,UACjC,GAAI3D,OAAQH,OAAOI,KAAKtG,KAAMgK,WAAahK,IAG3C,OAFAqG,OAAMF,UAAYA,UAClBE,MAAM4D,OAAS,GAAIzD,KACZH,MA0CX,MAnDAjG,WAAU2J,iBAAkB7D,QAW5BvF,OAAOkG,eAAekD,iBAAiBrJ,UAAW,aAI9CmC,IAAK,WAAc,MAAO7C,MAAKmG,UAAUtD,IAAI5C,cAAc6G,WAC3DC,YAAY,EACZC,cAAc,IAMlB+C,iBAAiBrJ,UAAUuG,eAAiB,SAAUiD,MAAQlK,KAAKmH,UAAUC,cAAc8C,OAO3FH,iBAAiBrJ,UAAUyJ,QAAU,SAAU7C,KAAMxG,UACjDd,KAAKiK,OAAO7H,IAAIkF,KAAMxG,UACtBd,KAAKiH,eAAeK,OAWxByC,iBAAiBrJ,UAAU2G,QAAU,SAAUC,KAAMC,iBACzB,SAApBA,kBAA8BA,iBAAkB,EACpD,IAAqBzG,UAAWd,KAAKiK,OAAOpH,IAAIyE,KAIhD,OAHKxG,YACDA,SAAaoF,OAAOxF,UAAU2G,QAAQf,KAAKtG,KAAMsH,KAAMC,kBAEpDzG,UAEJiJ,kBACT7J,kBAAkBkK,aACpBL,kBAAiBT,aACXhC,KAAMrH,cAAcsJ,aAG1BQ,iBAAiBP,eAAiB,WAAc,QAC1ClC,KAAMrH,cAAcwJ,WACpBnC,KAAMpH,kBAAkBwJ;;;;;;;AAc9B,GAAI3G,kBAAmB,EACnBsH,kBAAqB,WACrB,QAASA,qBACLrK,KAAKsK,YAAc,GAAI9D,KA8B3B,MAnBA6D,mBAAkB3J,UAAU6J,iBAAmB,SAAUC,cAAeC,YAAaC,UACjF,GAAqBxH,SAIrB,IAHIuH,aACAzH,YAAYyH,aAAalJ,QAAQ,SAAUH,MAAQ,MAAO8B,OAAM9B,MAAQ,YAAgBA,QAExFsJ,SAAStI,IAAK,CACd,GAAIsI,SAAS3J,QAAU2J,SAASjJ,IAC5B,KAAM,IAAIkJ,OAAM,6BAA+B1K,cAAc6C,WAAW0H,eAAiB,qBAE7FrI,aAAYe,MAAOwH,SAAStI,KAQhC,MANIsI,UAAS3J,QACTF,eAAeqC,MAAOwH,SAAS3J,OAAQf,KAAKsK,aAE5CI,SAASjJ,KACTO,YAAYkB,MAAOwH,SAASjJ,KAEzB,GAAI+I,eAA+B,QAEvCH,qBA+IPO,2BAA8B,WAI9B,QAASA,4BAA2BC,kBAChC7K,KAAK6K,iBAAmBA,iBAU5B,MAJAD,4BAA2BlK,UAAUoK,sBAAwB,SAAUC,SACnE,GAAqBlL,UAAYG,KAAK6K,iBAAiBG,eAAeD,QACtE,OAAO,IAAIE,qBAAoBpL,SAAUA,SAASqL,SAASrI,IAAIoD,uBAAwBpG,SAASqL,SAASrI,IAAIkH,kBAAmBlK,SAASqL,SAASrI,IAAI8G,sBAAuB9J,SAASqL,SAASrI,IAAI3C,kBAAkBiL,2BAElNP,6BAEXA,4BAA2BtB,aACrBhC,KAAMrH,cAAcsJ,aAG1BqB,2BAA2BpB,eAAiB,WAAc,QACpDlC,KAAMrH,cAAcmL,kBAE1B,IAAIH,qBAAuB,WAQvB,QAASA,qBAAoB9D,UAAWkE,mBAAoBC,cAAeC,gBAAiBC,mBACxFxL,KAAKmH,UAAYA,UACjBnH,KAAKqL,mBAAqBA,mBAC1BrL,KAAKsL,cAAgBA,cACrBtL,KAAKuL,gBAAkBA,gBACvBvL,KAAKwL,kBAAoBA,kBACzBxL,KAAKyL,WAAa,GAAIpB,mBAwH1B,MAtHA1J,QAAOkG,eAAeoE,oBAAoBvK,UAAW,YAIjDmC,IAAK,WAAc,MAAO7C,MAAKmH,UAAU+D,UACzCnE,YAAY,EACZC,cAAc,IAOlBiE,oBAAoBvK,UAAUgL,kBAAoB,SAAUC,YACxD,MAAO3L,MAAKmH,UAAUuE,kBAAkBC,aAO5CV,oBAAoBvK,UAAUkL,mBAAqB,SAAUD,YACzD,MAAO3L,MAAKmH,UAAUyE,mBAAmBD,aAO7CV,oBAAoBvK,UAAUmL,kCAAoC,SAAUF,YACxE,MAAO3L,MAAKmH,UAAU0E,kCAAkCF,aAO5DV,oBAAoBvK,UAAUoL,mCAAqC,SAAUH,YACzE,MAAO3L,MAAKmH,UAAU2E,mCAAmCH,aAM7DV,oBAAoBvK,UAAUqL,sBAAwB,SAAU7E,WAC5D,MAAOlH,MAAKmH,UAAU4E,sBAAsB7E,YAOhD+D,oBAAoBvK,UAAUsL,oBAAsB,SAAU9E,WAC1D,MAAOlH,MAAKmH,UAAU6E,oBAAoB9E,YAM9C+D,oBAAoBvK,UAAUuL,qBAAuB,SAAU3E,MAC3D,GAAItH,KAAKmH,UAAU+E,cAAc5E,MAC7B,KAAM,IAAIqD,OAAM1K,cAAc6C,WAAWwE,MAAQ,0DAQzD2D,oBAAoBvK,UAAUyL,eAAiB,SAAUC,SAAU1B,UAC/D1K,KAAKiM,qBAAqBG,SAC1B,IAAqB3B,aAAczK,KAAKuL,gBAAgBlE,QAAQ+E,UAAU,EAC1EpM,MAAKuL,gBAAgB1B,YAAYuC,SAAUpM,KAAKyL,WAAWlB,iBAAiBtK,cAAcoM,SAAU5B,YAAaC,YAOrHO,oBAAoBvK,UAAU4L,kBAAoB,SAAUC,UAAW7B,UACnE1K,KAAKiM,qBAAqBM,UAC1B,IAAqB9B,aAAczK,KAAKqL,mBAAmBhE,QAAQkF,WAAW,EAC9EvM,MAAKqL,mBAAmBrC,aAAauD,UAAWvM,KAAKyL,WAAWlB,iBAAiBtK,cAAc8I,UAA4B,YAAiB2B,YAOhJO,oBAAoBvK,UAAU8L,kBAAoB,SAAUtF,UAAWwD,UACnE1K,KAAKiM,qBAAqB/E,UAC1B,IAAqBuD,aAAczK,KAAKqL,mBAAmBhE,QAAQH,WAAW,EAC9ElH,MAAKqL,mBAAmBrC,aAAa9B,UAAWlH,KAAKyL,WAAWlB,iBAAiBtK,cAAc2H,UAA4B,YAAiB8C,YAOhJO,oBAAoBvK,UAAU+L,aAAe,SAAUvC,KAAMQ,UACzD1K,KAAKiM,qBAAqB/B,KAC1B,IAAqBO,aAAczK,KAAKsL,cAAcjE,QAAQ6C,MAAM,EACpElK,MAAKsL,cAAcnB,QAAQD,KAAMlK,KAAKyL,WAAWlB,iBAAiBtK,cAAcyM,KAAMjC,YAAaC,YAMvGO,oBAAoBvK,UAAUiM,iBAAmB,SAAUC,WAAa5M,KAAKmH,UAAUwF,iBAAiBC,YAIxG3B,oBAAoBvK,UAAUmM,WAAa,WAAc7M,KAAKmH,UAAU0F,cAKxE5B,oBAAoBvK,UAAU0G,cAAgB,SAAUE,MAAQtH,KAAKmH,UAAUC,cAAcE,OACtF2D,uBAOP6B,2BAA6B7M,cAAc8M,sBAAsB7M,kBAAkB8M,oBAAqB,uBAEpGC,QAAShN,cAAciN,iBACvBC,UACIzF,YACMuF,QAASlD,iBAAkBqD,MAAOnN,cAAcwJ,SAAUvJ,kBAAkBwJ,oBAC5EuD,QAAS/M,kBAAkBkK,aAAciD,YAAatD,mBACtDkD,QAAShH,sBAAuBmH,MAAOnN,cAAcwJ,SAAUvJ,kBAAkBwJ,oBACjFuD,QAAS/M,kBAAkBmJ,kBAAmBgE,YAAapH,wBAC3DgH,QAAStD,qBAAsByD,MAAOnN,cAAcwJ,SAAUvJ,kBAAkBwJ,oBAChFuD,QAAS/M,kBAAkB4J,iBAAkBuD,YAAa1D,wBAGpE2D,OAAO,IAGPL,QAAS9M,sBAAsBoN,wBAC/BC,SAAU5C,2BACVwC,MAAOnN,cAAcmL;;;;;;;AA+B7B7L,QAAQqL,2BAA6BA,2BACrCrL,QAAQ0L,oBAAsBA,oBAC9B1L,QAAQuN,2BAA6BA,2BACrCvN,QAAQoE,mBAAqBA,mBAC7BpE,QAAQ0G,sBAAwBA,sBAChC1G,QAAQoK,qBAAuBA,qBAC/BpK,QAAQwK,iBAAmBA,iBAE3BpJ,OAAOkG,eAAetH,QAAS,cAAgBiC,OAAO","file":"/Users/jasonaden/Projects/angular/dist/packages-dist/compiler/bundles/compiler-testing.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.0-beta.3-14502f5b34\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/compiler'), require('@angular/core/testing')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/compiler', '@angular/core/testing'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}, global.ng.compiler.testing = global.ng.compiler.testing || {}),global.ng.core,global.ng.compiler,global.ng.core.testing));\n}(this, (function (exports,_angular_core,_angular_compiler,_angular_core_testing) { 'use strict';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MockSchemaRegistry = (function () {\n    /**\n     * @param {?} existingProperties\n     * @param {?} attrPropMapping\n     * @param {?} existingElements\n     * @param {?} invalidProperties\n     * @param {?} invalidAttributes\n     */\n    function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n        this.existingProperties = existingProperties;\n        this.attrPropMapping = attrPropMapping;\n        this.existingElements = existingElements;\n        this.invalidProperties = invalidProperties;\n        this.invalidAttributes = invalidAttributes;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?} property\n     * @param {?} schemas\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.hasProperty = function (tagName, property, schemas) {\n        var /** @type {?} */ value = this.existingProperties[property];\n        return value === void 0 ? true : value;\n    };\n    /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\n        var /** @type {?} */ value = this.existingElements[tagName.toLowerCase()];\n        return value === void 0 ? true : value;\n    };\n    /**\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this.existingElements); };\n    /**\n     * @param {?} selector\n     * @param {?} property\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.securityContext = function (selector, property, isAttribute) {\n        return _angular_core.SecurityContext.NONE;\n    };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.getMappedPropName = function (attrName) { return this.attrPropMapping[attrName] || attrName; };\n    /**\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.validateProperty = function (name) {\n        if (this.invalidProperties.indexOf(name) > -1) {\n            return { error: true, msg: \"Binding to property '\" + name + \"' is disallowed for security reasons\" };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.validateAttribute = function (name) {\n        if (this.invalidAttributes.indexOf(name) > -1) {\n            return {\n                error: true,\n                msg: \"Binding to attribute '\" + name + \"' is disallowed for security reasons\"\n            };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { return propName; };\n    /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {\n        return { error: /** @type {?} */ ((null)), value: val.toString() };\n    };\n    return MockSchemaRegistry;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An implementation of {\\@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nvar MockDirectiveResolver = (function (_super) {\n    __extends(MockDirectiveResolver, _super);\n    /**\n     * @param {?} _injector\n     * @param {?} reflector\n     */\n    function MockDirectiveResolver(_injector, reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._injector = _injector;\n        _this._directives = new Map();\n        _this._providerOverrides = new Map();\n        _this._viewProviderOverrides = new Map();\n        _this._views = new Map();\n        _this._inlineTemplates = new Map();\n        return _this;\n    }\n    Object.defineProperty(MockDirectiveResolver.prototype, \"_compiler\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._injector.get(_angular_core.Compiler); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype._clearCacheFor = function (component) { this._compiler.clearCacheFor(component); };\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ metadata = this._directives.get(type) || null;\n        if (!metadata) {\n            metadata = _super.prototype.resolve.call(this, type, throwIfNotFound);\n        }\n        if (!metadata) {\n            return null;\n        }\n        var /** @type {?} */ providerOverrides = this._providerOverrides.get(type);\n        var /** @type {?} */ viewProviderOverrides = this._viewProviderOverrides.get(type);\n        var /** @type {?} */ providers = metadata.providers;\n        if (providerOverrides != null) {\n            var /** @type {?} */ originalViewProviders = metadata.providers || [];\n            providers = originalViewProviders.concat(providerOverrides);\n        }\n        if (metadata instanceof _angular_core.Component) {\n            var /** @type {?} */ viewProviders = metadata.viewProviders;\n            if (viewProviderOverrides != null) {\n                var /** @type {?} */ originalViewProviders = metadata.viewProviders || [];\n                viewProviders = originalViewProviders.concat(viewProviderOverrides);\n            }\n            var /** @type {?} */ view = this._views.get(type) || metadata;\n            var /** @type {?} */ animations = view.animations;\n            var /** @type {?} */ templateUrl = view.templateUrl;\n            var /** @type {?} */ inlineTemplate = this._inlineTemplates.get(type);\n            if (inlineTemplate) {\n                templateUrl = undefined;\n            }\n            else {\n                inlineTemplate = view.template;\n            }\n            return new _angular_core.Component({\n                selector: metadata.selector,\n                inputs: metadata.inputs,\n                outputs: metadata.outputs,\n                host: metadata.host,\n                exportAs: metadata.exportAs,\n                moduleId: metadata.moduleId,\n                queries: metadata.queries,\n                changeDetection: metadata.changeDetection,\n                providers: providers,\n                viewProviders: viewProviders,\n                entryComponents: metadata.entryComponents,\n                template: inlineTemplate,\n                templateUrl: templateUrl,\n                animations: animations,\n                styles: view.styles,\n                styleUrls: view.styleUrls,\n                encapsulation: view.encapsulation,\n                interpolation: view.interpolation\n            });\n        }\n        return new _angular_core.Directive({\n            selector: metadata.selector,\n            inputs: metadata.inputs,\n            outputs: metadata.outputs,\n            host: metadata.host,\n            providers: providers,\n            exportAs: metadata.exportAs,\n            queries: metadata.queries\n        });\n    };\n    /**\n     * Overrides the {\\@link Directive} for a directive.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.setDirective = function (type, metadata) {\n        this._directives.set(type, metadata);\n        this._clearCacheFor(type);\n    };\n    /**\n     * @param {?} type\n     * @param {?} providers\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.setProvidersOverride = function (type, providers) {\n        this._providerOverrides.set(type, providers);\n        this._clearCacheFor(type);\n    };\n    /**\n     * @param {?} type\n     * @param {?} viewProviders\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.setViewProvidersOverride = function (type, viewProviders) {\n        this._viewProviderOverrides.set(type, viewProviders);\n        this._clearCacheFor(type);\n    };\n    /**\n     * Overrides the {\\@link ViewMetadata} for a component.\n     * @param {?} component\n     * @param {?} view\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.setView = function (component, view) {\n        this._views.set(component, view);\n        this._clearCacheFor(component);\n    };\n    /**\n     * Overrides the inline template for a component - other configuration remains unchanged.\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.setInlineTemplate = function (component, template) {\n        this._inlineTemplates.set(component, template);\n        this._clearCacheFor(component);\n    };\n    return MockDirectiveResolver;\n}(_angular_compiler.DirectiveResolver));\nMockDirectiveResolver.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nMockDirectiveResolver.ctorParameters = function () { return [\n    { type: _angular_core.Injector, },\n    { type: _angular_compiler.CompileReflector, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockNgModuleResolver = (function (_super) {\n    __extends(MockNgModuleResolver, _super);\n    /**\n     * @param {?} _injector\n     * @param {?} reflector\n     */\n    function MockNgModuleResolver(_injector, reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._injector = _injector;\n        _this._ngModules = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {\\@link NgModule} for a module.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    MockNgModuleResolver.prototype.setNgModule = function (type, metadata) {\n        this._ngModules.set(type, metadata);\n        this._clearCacheFor(type);\n    };\n    /**\n     * Returns the {\\@link NgModule} for a module:\n     * - Set the {\\@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    MockNgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._ngModules.get(type) || ((_super.prototype.resolve.call(this, type, throwIfNotFound)));\n    };\n    Object.defineProperty(MockNgModuleResolver.prototype, \"_compiler\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._injector.get(_angular_core.Compiler); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    MockNgModuleResolver.prototype._clearCacheFor = function (component) { this._compiler.clearCacheFor(component); };\n    return MockNgModuleResolver;\n}(_angular_compiler.NgModuleResolver));\nMockNgModuleResolver.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nMockNgModuleResolver.ctorParameters = function () { return [\n    { type: _angular_core.Injector, },\n    { type: _angular_compiler.CompileReflector, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockPipeResolver = (function (_super) {\n    __extends(MockPipeResolver, _super);\n    /**\n     * @param {?} _injector\n     * @param {?} refector\n     */\n    function MockPipeResolver(_injector, refector) {\n        var _this = _super.call(this, refector) || this;\n        _this._injector = _injector;\n        _this._pipes = new Map();\n        return _this;\n    }\n    Object.defineProperty(MockPipeResolver.prototype, \"_compiler\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._injector.get(_angular_core.Compiler); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} pipe\n     * @return {?}\n     */\n    MockPipeResolver.prototype._clearCacheFor = function (pipe) { this._compiler.clearCacheFor(pipe); };\n    /**\n     * Overrides the {\\@link Pipe} for a pipe.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    MockPipeResolver.prototype.setPipe = function (type, metadata) {\n        this._pipes.set(type, metadata);\n        this._clearCacheFor(type);\n    };\n    /**\n     * Returns the {\\@link Pipe} for a pipe:\n     * - Set the {\\@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    MockPipeResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ metadata = this._pipes.get(type);\n        if (!metadata) {\n            metadata = ((_super.prototype.resolve.call(this, type, throwIfNotFound)));\n        }\n        return metadata;\n    };\n    return MockPipeResolver;\n}(_angular_compiler.PipeResolver));\nMockPipeResolver.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nMockPipeResolver.ctorParameters = function () { return [\n    { type: _angular_core.Injector, },\n    { type: _angular_compiler.CompileReflector, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextReferenceId = 0;\nvar MetadataOverrider = (function () {\n    function MetadataOverrider() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     * @template C, T\n     * @param {?} metadataClass\n     * @param {?} oldMetadata\n     * @param {?} override\n     * @return {?}\n     */\n    MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n        var /** @type {?} */ props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = ((oldMetadata))[prop]; });\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(\"Cannot set and add/remove \" + _angular_core.ɵstringify(metadataClass) + \" at the same time!\");\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(/** @type {?} */ (props));\n    };\n    return MetadataOverrider;\n}());\n/**\n * @param {?} metadata\n * @param {?} remove\n * @param {?} references\n * @return {?}\n */\nfunction removeMetadata(metadata, remove, references) {\n    var /** @type {?} */ removeObjects = new Set();\n    var _loop_1 = function (prop) {\n        var /** @type {?} */ removeValue = remove[prop];\n        if (removeValue instanceof Array) {\n            removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    };\n    for (var /** @type {?} */ prop in remove) {\n        _loop_1(/** @type {?} */ prop);\n    }\n    var _loop_2 = function (prop) {\n        var /** @type {?} */ propValue = metadata[prop];\n        if (propValue instanceof Array) {\n            metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    };\n    for (var /** @type {?} */ prop in metadata) {\n        _loop_2(/** @type {?} */ prop);\n    }\n}\n/**\n * @param {?} metadata\n * @param {?} add\n * @return {?}\n */\nfunction addMetadata(metadata, add) {\n    for (var /** @type {?} */ prop in add) {\n        var /** @type {?} */ addValue = add[prop];\n        var /** @type {?} */ propValue = metadata[prop];\n        if (propValue != null && propValue instanceof Array) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\n/**\n * @param {?} metadata\n * @param {?} set\n * @return {?}\n */\nfunction setMetadata(metadata, set) {\n    for (var /** @type {?} */ prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\n/**\n * @param {?} propName\n * @param {?} propValue\n * @param {?} references\n * @return {?}\n */\nfunction _propHashKey(propName, propValue, references) {\n    var /** @type {?} */ replacer = function (key, value) {\n        if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return propName + \":\" + JSON.stringify(propValue, replacer);\n}\n/**\n * @param {?} ref\n * @param {?} references\n * @return {?}\n */\nfunction _serializeReference(ref, references) {\n    var /** @type {?} */ id = references.get(ref);\n    if (!id) {\n        id = \"\" + _angular_core.ɵstringify(ref) + _nextReferenceId++;\n        references.set(ref, id);\n    }\n    return id;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _valueProps(obj) {\n    var /** @type {?} */ props = [];\n    // regular public props\n    Object.keys(obj).forEach(function (prop) {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    var /** @type {?} */ proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach(function (protoProp) {\n            var /** @type {?} */ desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nvar TestingCompilerFactoryImpl = (function () {\n    /**\n     * @param {?} _compilerFactory\n     */\n    function TestingCompilerFactoryImpl(_compilerFactory) {\n        this._compilerFactory = _compilerFactory;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    TestingCompilerFactoryImpl.prototype.createTestingCompiler = function (options) {\n        var /** @type {?} */ compiler = (this._compilerFactory.createCompiler(options));\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver), compiler.injector.get(_angular_compiler.CompileMetadataResolver));\n    };\n    return TestingCompilerFactoryImpl;\n}());\nTestingCompilerFactoryImpl.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nTestingCompilerFactoryImpl.ctorParameters = function () { return [\n    { type: _angular_core.CompilerFactory, },\n]; };\nvar TestingCompilerImpl = (function () {\n    /**\n     * @param {?} _compiler\n     * @param {?} _directiveResolver\n     * @param {?} _pipeResolver\n     * @param {?} _moduleResolver\n     * @param {?} _metadataResolver\n     */\n    function TestingCompilerImpl(_compiler, _directiveResolver, _pipeResolver, _moduleResolver, _metadataResolver) {\n        this._compiler = _compiler;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._moduleResolver = _moduleResolver;\n        this._metadataResolver = _metadataResolver;\n        this._overrider = new MetadataOverrider();\n    }\n    Object.defineProperty(TestingCompilerImpl.prototype, \"injector\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._compiler.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleSync = function (moduleType) {\n        return this._compiler.compileModuleSync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleAsync = function (moduleType) {\n        return this._compiler.compileModuleAsync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    };\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.getNgContentSelectors = function (component) {\n        return this._compiler.getNgContentSelectors(component);\n    };\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.getComponentFactory = function (component) {\n        return this._compiler.getComponentFactory(component);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.checkOverrideAllowed = function (type) {\n        if (this._compiler.hasAotSummary(type)) {\n            throw new Error(_angular_core.ɵstringify(type) + \" was AOT compiled, so its metadata cannot be changed.\");\n        }\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overrideModule = function (ngModule, override) {\n        this.checkOverrideAllowed(ngModule);\n        var /** @type {?} */ oldMetadata = this._moduleResolver.resolve(ngModule, false);\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(_angular_core.NgModule, oldMetadata, override));\n    };\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overrideDirective = function (directive, override) {\n        this.checkOverrideAllowed(directive);\n        var /** @type {?} */ oldMetadata = this._directiveResolver.resolve(directive, false);\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(_angular_core.Directive, /** @type {?} */ ((oldMetadata)), override));\n    };\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overrideComponent = function (component, override) {\n        this.checkOverrideAllowed(component);\n        var /** @type {?} */ oldMetadata = this._directiveResolver.resolve(component, false);\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(_angular_core.Component, /** @type {?} */ ((oldMetadata)), override));\n    };\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overridePipe = function (pipe, override) {\n        this.checkOverrideAllowed(pipe);\n        var /** @type {?} */ oldMetadata = this._pipeResolver.resolve(pipe, false);\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(_angular_core.Pipe, oldMetadata, override));\n    };\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.loadAotSummaries = function (summaries) { this._compiler.loadAotSummaries(summaries); };\n    /**\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.clearCache = function () { this._compiler.clearCache(); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.clearCacheFor = function (type) { this._compiler.clearCacheFor(type); };\n    return TestingCompilerImpl;\n}());\n/**\n * Platform for dynamic tests\n *\n * \\@experimental\n */\nvar platformCoreDynamicTesting = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'coreDynamicTesting', [\n    {\n        provide: _angular_core.COMPILER_OPTIONS,\n        useValue: {\n            providers: [\n                { provide: MockPipeResolver, deps: [_angular_core.Injector, _angular_compiler.CompileReflector] },\n                { provide: _angular_compiler.PipeResolver, useExisting: MockPipeResolver },\n                { provide: MockDirectiveResolver, deps: [_angular_core.Injector, _angular_compiler.CompileReflector] },\n                { provide: _angular_compiler.DirectiveResolver, useExisting: MockDirectiveResolver },\n                { provide: MockNgModuleResolver, deps: [_angular_core.Injector, _angular_compiler.CompileReflector] },\n                { provide: _angular_compiler.NgModuleResolver, useExisting: MockNgModuleResolver },\n            ]\n        },\n        multi: true\n    },\n    {\n        provide: _angular_core_testing.ɵTestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [_angular_core.CompilerFactory]\n    }\n]);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.TestingCompilerFactoryImpl = TestingCompilerFactoryImpl;\nexports.TestingCompilerImpl = TestingCompilerImpl;\nexports.platformCoreDynamicTesting = platformCoreDynamicTesting;\nexports.MockSchemaRegistry = MockSchemaRegistry;\nexports.MockDirectiveResolver = MockDirectiveResolver;\nexports.MockNgModuleResolver = MockNgModuleResolver;\nexports.MockPipeResolver = MockPipeResolver;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=compiler-testing.umd.js.map\n"]}