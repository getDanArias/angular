{"version":3,"sources":["../../../../packages/compiler/src/ast_path.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH;;;;;;;;;;;;;;;;GAgBG;AAtBH,AAuBA;;;GApBG,CAoBH,MAEC;IADD;;;OAGG;IACH,YAFsB,IAAQ,EAAU,WAAmB,CAAA,CAAE;QAAvC,SAAA,GAAA,IAAA,CAAQ;QAAU,aAAA,GAAA,QAAA,CAAqB;IAAE,CAAA;IAI/D;;OAEG;IACH,IALM,KAAA,KAAmB,MAAA,CAAO,CAAA,IAAE,CAAI,IAAC,IAAO,CAAA,IAAE,CAAI,IAAC,CAAI,MAAC,CAAM,CAAC,CAAA;IAMjE;;OAEG;IACH,IARM,IAAA,KAAsB,MAAA,CAAO,IAAA,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC,CAAC,CAAA;IASjD;;OAEG;IACH,IAXM,IAAA,KAAsB,MAAA,CAAO,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAC,CAAA;IAYpE;;;OAGG;IACH,QAdG,CAAQ,IAAS;QAehB,MAAM,CAdC,IAAA,IAAQ,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,IAAC,CAAI,GAAG,CAAA,CAAE,CAAC;IAexD,CAAC;IACH;;;OAGG;IACH,OAlBG,CAAO,IAAM,IAAkB,MAAA,CAAO,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,IAAC,CAAI,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;IAmBjF;;;;OAIG;IACH,KAtBG,CAAiB,IAAgC;QAuBhD,GAAG,CAAC,CAAC,IAtBC,gBAAA,CAAG,CAAA,GAAI,IAAA,CAAK,IAAC,CAAI,MAAC,GAAQ,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,CAAA,EAAE,EAAG,CAAA;YAuB9C,IAAI,gBAAgB,CAtBhB,IAAA,GAAO,IAAA,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC;YAuBxB,EAAE,CAAC,CAAC,IAtBC,YAAe,IAAA,CAAK;gBAAC,MAAA,CAAA,CAAU,IAAC,CAAA,CAAI;QAuB3C,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IAzBG,CAAI,IAAM,IAAK,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;IA0BxC;;OAEG;IACH,GA3BG,KAAU,MAAA,CAAA,CAAA,CAAO,IAAA,CAAK,IAAC,CAAI,GAAC,EAAG,CAAA,CAAA,CAAI,CAAC,CAAA;CACtC;AA6BD;IACA,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;IACvB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC3B,CAAC","file":"ast_path.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n * \n * For example, the expresion `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n * \n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n */\nexport class AstPath<T> {\n/**\n * @param {?} path\n * @param {?=} position\n */\nconstructor(private path: T[],\npublic position: number = -1) {}\n/**\n * @return {?}\n */\nget empty(): boolean { return !this.path || !this.path.length; }\n/**\n * @return {?}\n */\nget head(): T|undefined { return this.path[0]; }\n/**\n * @return {?}\n */\nget tail(): T|undefined { return this.path[this.path.length - 1]; }\n/**\n * @param {?} node\n * @return {?}\n */\nparentOf(node: T|undefined): T|undefined {\n    return node && this.path[this.path.indexOf(node) - 1];\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nchildOf(node: T): T|undefined { return this.path[this.path.indexOf(node) + 1]; }\n/**\n * @template N\n * @param {?} ctor\n * @return {?}\n */\nfirst<N extends T>(ctor: {new (...args: any[]): N}): N|undefined {\n    for (let /** @type {?} */ i = this.path.length - 1; i >= 0; i--) {\n      let /** @type {?} */ item = this.path[i];\n      if (item instanceof ctor) return /** @type {?} */(( <N>item));\n    }\n  }\n/**\n * @param {?} node\n * @return {?}\n */\npush(node: T) { this.path.push(node); }\n/**\n * @return {?}\n */\npop(): T { return /** @type {?} */(( this.path.pop())); }\n}\n\nfunction AstPath_tsickle_Closure_declarations() {\n/** @type {?} */\nAstPath.prototype.path;\n/** @type {?} */\nAstPath.prototype.position;\n}\n\n"]}