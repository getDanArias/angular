{"version":3,"sources":["../../../../packages/compiler/src/url_resolver.ts"],"names":[],"mappings":"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","file":"url_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, InjectionToken, PACKAGE_ROOT_URL} from '@angular/core';\n\nimport {CompilerInjectable} from './injectable';\n/**\n * Create a {\\@link UrlResolver} with no package prefix.\n * @return {?}\n */\nexport function createUrlResolverWithoutPackagePrefix(): UrlResolver {\n  return new UrlResolver();\n}\n/**\n * @return {?}\n */\nexport function createOfflineCompileUrlResolver(): UrlResolver {\n  return new UrlResolver('.');\n}\n/**\n * A default provider for {\\@link PACKAGE_ROOT_URL} that maps to '/'.\n */\nexport const /** @type {?} */ DEFAULT_PACKAGE_URL_PROVIDER = {\n  provide: PACKAGE_ROOT_URL,\n  useValue: '/'\n};\n/**\n * Used by the {\\@link Compiler} when resolving HTML and CSS template URLs.\n * \n * This class can be overridden by the application developer to create custom behavior.\n * \n * See {\\@link Compiler}\n * \n * ## Example\n * \n * {\\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}\n * \n * \\@security When compiling templates at runtime, you must\n * ensure that the entire template comes from a trusted source.\n * Attacker-controlled data introduced by a template could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport class UrlResolver {\n/**\n * @param {?=} _packagePrefix\n */\nconstructor(\nprivate _packagePrefix: string|null = null) {}\n/**\n * Resolves the `url` given the `baseUrl`:\n * - when the `url` is null, the `baseUrl` is returned,\n * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n * `baseUrl` and `url`,\n * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n * returned as is (ignoring the `baseUrl`)\n * @param {?} baseUrl\n * @param {?} url\n * @return {?}\n */\nresolve(baseUrl: string, url: string): string {\n    let /** @type {?} */ resolvedUrl = url;\n    if (baseUrl != null && baseUrl.length > 0) {\n      resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n    }\n    const /** @type {?} */ resolvedParts = _split(resolvedUrl);\n    let /** @type {?} */ prefix = this._packagePrefix;\n    if (prefix != null && resolvedParts != null &&\n        resolvedParts[_ComponentIndex.Scheme] == 'package') {\n      let /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];\n      prefix = prefix.replace(/\\/+$/, '');\n      path = path.replace(/^\\/+/, '');\n      return `${prefix}/${path}`;\n    }\n    return resolvedUrl;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: CompilerInjectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PACKAGE_ROOT_URL, ] }, ]},\n];\n}\n\nfunction UrlResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUrlResolver.ctorParameters;\n/** @type {?} */\nUrlResolver.prototype._packagePrefix;\n}\n\n/**\n * Extract the scheme of a URL.\n * @param {?} url\n * @return {?}\n */\nexport function getUrlScheme(url: string): string {\n  const /** @type {?} */ match = _split(url);\n  return (match && match[_ComponentIndex.Scheme]) || '';\n}\n/**\n * Builds a URI string from already-encoded parts.\n * \n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n * \n * @param {?=} opt_scheme The scheme such as 'http'.\n * @param {?=} opt_userInfo The user name before the '\\@'.\n * @param {?=} opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param {?=} opt_port The port number.\n * @param {?=} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?=} opt_queryData The URI-encoded query data.\n * @param {?=} opt_fragment The URI-encoded fragment identifier.\n * @return {?} The fully combined URI.\n */\nfunction _buildFromEncodedParts(\n    opt_scheme?: string, opt_userInfo?: string, opt_domain?: string, opt_port?: string,\n    opt_path?: string, opt_queryData?: string, opt_fragment?: string): string {\n  const /** @type {?} */ out: string[] = [];\n\n  if (opt_scheme != null) {\n    out.push(opt_scheme + ':');\n  }\n\n  if (opt_domain != null) {\n    out.push('//');\n\n    if (opt_userInfo != null) {\n      out.push(opt_userInfo + '@');\n    }\n\n    out.push(opt_domain);\n\n    if (opt_port != null) {\n      out.push(':' + opt_port);\n    }\n  }\n\n  if (opt_path != null) {\n    out.push(opt_path);\n  }\n\n  if (opt_queryData != null) {\n    out.push('?' + opt_queryData);\n  }\n\n  if (opt_fragment != null) {\n    out.push('#' + opt_fragment);\n  }\n\n  return out.join('');\n}\n/**\n * A regular expression for breaking a URI into its component parts.\n * \n * {\\@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n * \n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n * \n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n * \n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n * \n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * \\@internal\n */\nconst /** @type {?} */ _splitRe = new RegExp(\n    '^' +\n    '(?:' +\n    '([^:/?#.]+)' +  // scheme - ignore special characters\n                     // used by other URL parts such as :,\n                     // ?, /, #, and .\n    ':)?' +\n    '(?://' +\n    '(?:([^/?#]*)@)?' +                  // userInfo\n    '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' +  // domain - restrict to letters,\n                                         // digits, dashes, dots, percent\n                                         // escapes, and unicode characters.\n    '(?::([0-9]+))?' +                   // port\n    ')?' +\n    '([^?#]+)?' +        // path\n    '(?:\\\\?([^#]*))?' +  // query\n    '(?:#(.*))?' +       // fragment\n    '$');\ntype _ComponentIndex = number;\nlet _ComponentIndex: any = {};\n_ComponentIndex.Scheme = 1;\n_ComponentIndex.UserInfo = 2;\n_ComponentIndex.Domain = 3;\n_ComponentIndex.Port = 4;\n_ComponentIndex.Path = 5;\n_ComponentIndex.QueryData = 6;\n_ComponentIndex.Fragment = 7;\n_ComponentIndex[_ComponentIndex.Scheme] = \"Scheme\";\n_ComponentIndex[_ComponentIndex.UserInfo] = \"UserInfo\";\n_ComponentIndex[_ComponentIndex.Domain] = \"Domain\";\n_ComponentIndex[_ComponentIndex.Port] = \"Port\";\n_ComponentIndex[_ComponentIndex.Path] = \"Path\";\n_ComponentIndex[_ComponentIndex.QueryData] = \"QueryData\";\n_ComponentIndex[_ComponentIndex.Fragment] = \"Fragment\";\n\n/**\n * Splits a URI into its component parts.\n * \n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n * \n * @param {?} uri The URI string to examine.\n * @return {?} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\nfunction _split(uri: string): Array<string|any> {\n  return /** @type {?} */(( uri.match(_splitRe)));\n}\n/**\n * Removes dot segments in given path component, as described in\n * RFC 3986, section 5.2.4.\n * \n * @param {?} path A non-empty path component.\n * @return {?} Path component with removed dot segments.\n */\nfunction _removeDotSegments(path: string): string {\n  if (path == '/') return '/';\n\n  const /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';\n  const /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n  const /** @type {?} */ segments = path.split('/');\n\n  const /** @type {?} */ out: string[] = [];\n  let /** @type {?} */ up = 0;\n  for (let /** @type {?} */ pos = 0; pos < segments.length; pos++) {\n    const /** @type {?} */ segment = segments[pos];\n    switch (segment) {\n      case '':\n      case '.':\n        break;\n      case '..':\n        if (out.length > 0) {\n          out.pop();\n        } else {\n          up++;\n        }\n        break;\n      default:\n        out.push(segment);\n    }\n  }\n\n  if (leadingSlash == '') {\n    while (up-- > 0) {\n      out.unshift('..');\n    }\n\n    if (out.length === 0) out.push('.');\n  }\n\n  return leadingSlash + out.join('/') + trailingSlash;\n}\n/**\n * Takes an array of the parts from split and canonicalizes the path part\n * and then joins all the parts.\n * @param {?} parts\n * @return {?}\n */\nfunction _joinAndCanonicalizePath(parts: any[]): string {\n  let /** @type {?} */ path = parts[_ComponentIndex.Path];\n  path = path == null ? '' : _removeDotSegments(path);\n  parts[_ComponentIndex.Path] = path;\n\n  return _buildFromEncodedParts(\n      parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain],\n      parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData],\n      parts[_ComponentIndex.Fragment]);\n}\n/**\n * Resolves a URL.\n * @param {?} base The URL acting as the base URL.\n * @param {?} url\n * @return {?}\n */\nfunction _resolveUrl(base: string, url: string): string {\n  const /** @type {?} */ parts = _split(encodeURI(url));\n  const /** @type {?} */ baseParts = _split(base);\n\n  if (parts[_ComponentIndex.Scheme] != null) {\n    return _joinAndCanonicalizePath(parts);\n  } else {\n    parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n  }\n\n  for (let /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n    if (parts[i] == null) {\n      parts[i] = baseParts[i];\n    }\n  }\n\n  if (parts[_ComponentIndex.Path][0] == '/') {\n    return _joinAndCanonicalizePath(parts);\n  }\n\n  let /** @type {?} */ path = baseParts[_ComponentIndex.Path];\n  if (path == null) path = '/';\n  const /** @type {?} */ index = path.lastIndexOf('/');\n  path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n  parts[_ComponentIndex.Path] = path;\n  return _joinAndCanonicalizePath(parts);\n}\n"]}