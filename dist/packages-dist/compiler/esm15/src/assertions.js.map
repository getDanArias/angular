{"version":3,"sources":["../../../../packages/compiler/src/assertions.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,SAAE,EAAS,MAAA,eAAA,CAAA;AAMlB;;;;GAIG;AACH,MARC,+BAAoC,UAAY,EAAQ,KAAO;IAS9D,EAAE,CAAC,CAAC,CARC,SAAC,EAAS,IAAK,KAAA,IAAS,IAAA,CAAK,CAAC,CAAA;QASjC,MAAM,CAAC;IACT,CAAC;IACD,EAAE,CAAC,CAAC,CARC,KAAC,CAAK,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC,CAAA;QASzB,MARM,IAAI,KAAA,CAAM,aAAC,UAAa,8BAAU,CAA8B,CAAC;IASzE,CAAC;IACD,GAAG,CAAC,CAAC,IARC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAC,EAAO,CAAA,IAAK,CAAA,EAAG,CAAA;QASxC,EAAE,CAAC,CAAC,OARO,KAAA,CAAM,CAAC,CAAC,KAAK,QAAA,CAAS,CAAC,CAAA;YAShC,MARM,IAAI,KAAA,CAAM,aAAC,UAAa,8BAAU,CAA8B,CAAC;QASzE,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,gBAAgB,CARhB,+BAAA,GAAkC;IAStC,OAAO;IACP,MAAM;IACN,QAAQ;IACR,aAAa;IACb,OAAO;CACR,CARC;AASF;;;;GAIG;AACH,MAZC,qCAA0C,UAAY,EAAQ,KAAO;IAapE,EAAE,CAAC,CAAC,KAZC,IAAQ,IAAA,IAAQ,CAAA,CAAE,KAAC,CAAK,OAAC,CAAO,KAAC,CAAK,IAAI,KAAA,CAAM,MAAC,IAAS,CAAA,CAAE,CAAC,CAAC,CAAA;QAajE,MAZM,IAAI,KAAA,CAAM,aAAC,UAAa,iCAAU,CAAiC,CAAC;IAa5E,CAAC;IAZC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,EAAS,IAAK,KAAA,IAAS,IAAA,CAAK,CAAC,CAAA;QAavC,MAAM,gBAAgB,CAZhB,KAAA,GAAM,CAAE,KAAA,CAAM,CAAC,CAAK,CAAA,CAAO;QAajC,MAAM,gBAAgB,CAZhB,GAAA,GAAI,CAAE,KAAA,CAAM,CAAC,CAAK,CAAA,CAAO;QAa/B,sBAAsB;QACtB,+BAA+B,CAZC,OAAC,CAAO,MAAC;YAavC,EAAE,CAAC,CAAC,MAZC,CAAM,IAAC,CAAI,KAAC,CAAK,IAAI,MAAA,CAAO,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC,CAAA;gBAa1C,MAZM,IAAI,KAAA,CAAM,KAAC,KAAK,OAAK,GAAO,4CAAG,CAA4C,CAAC;YAapF,CAAC;QACH,CAAC,CAZC,CAAC;IAaL,CAAC;AACH,CAAC","file":"assertions.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '@angular/core';\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertArrayOfStrings(identifier: string, value: any) {\n  if (!isDevMode() || value == null) {\n    return;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected '${identifier}' to be an array of strings.`);\n  }\n  for (let /** @type {?} */ i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [\n  /^\\s*$/,        // empty\n  /[<>]/,         // html tag\n  /^[{}]$/,       // i18n expansion\n  /&(#|[a-z])/i,  // character reference,\n  /^\\/\\//,        // comment\n];\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n  if (value != null && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (isDevMode() && value != null) {\n    const /** @type {?} */ start = /** @type {?} */(( value[0] as string));\n    const /** @type {?} */ end = /** @type {?} */(( value[1] as string));\n    // black list checking\n    INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n"]}