{"version":3,"sources":["../../../../../packages/compiler/src/output/abstract_emitter.ts"],"names":[],"mappings":"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","file":"abstract_emitter.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseSourceSpan} from '../parse_util';\n\nimport * as o from './output_ast';\nimport {SourceMapGenerator} from './source_map';\n\nconst /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst /** @type {?} */ _INDENT_WITH = '  ';\nexport const /** @type {?} */ CATCH_ERROR_VAR = o.variable('error', null, null);\nexport const /** @type {?} */ CATCH_STACK_VAR = o.variable('stack', null, null);\n/**\n * @abstract\n */\nexport abstract class OutputEmitter {\n  abstract emitStatements(\n      srcFilePath: string, genFilePath: string, stmts: o.Statement[],\n      preamble?: string|null): string;\n}\n\nfunction OutputEmitter_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} srcFilePath\n * @param {?} genFilePath\n * @param {?} stmts\n * @param {?=} preamble\n * @return {?}\n */\nOutputEmitter.prototype.emitStatements = function(srcFilePath, genFilePath, stmts, preamble) {};\n}\n\nclass _EmittedLine {\n  partsLength = 0;\n  parts: string[] = [];\n  srcSpans: (ParseSourceSpan|null)[] = [];\n/**\n * @param {?} indent\n */\nconstructor(public indent: number) {}\n}\n\nfunction _EmittedLine_tsickle_Closure_declarations() {\n/** @type {?} */\n_EmittedLine.prototype.partsLength;\n/** @type {?} */\n_EmittedLine.prototype.parts;\n/** @type {?} */\n_EmittedLine.prototype.srcSpans;\n/** @type {?} */\n_EmittedLine.prototype.indent;\n}\n\nexport class EmitterVisitorContext {\n/**\n * @return {?}\n */\nstatic createRoot(): EmitterVisitorContext { return new EmitterVisitorContext(0); }\nprivate _lines: _EmittedLine[];\nprivate _classes: o.ClassStmt[] = [];\nprivate _preambleLineCount = 0;\n/**\n * @param {?} _indent\n */\nconstructor(private _indent: number) { this._lines = [new _EmittedLine(_indent)]; }\n/**\n * @return {?}\n */\n\nprivate get _currentLine(): _EmittedLine { return this._lines[this._lines.length - 1]; }\n/**\n * @param {?=} from\n * @param {?=} lastPart\n * @return {?}\n */\nprintln(from?: {sourceSpan: ParseSourceSpan | null}|null, lastPart: string = ''): void {\n    this.print(from || null, lastPart, true);\n  }\n/**\n * @return {?}\n */\nlineIsEmpty(): boolean { return this._currentLine.parts.length === 0; }\n/**\n * @return {?}\n */\nlineLength(): number {\n    return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n  }\n/**\n * @param {?} from\n * @param {?} part\n * @param {?=} newLine\n * @return {?}\n */\nprint(from: {sourceSpan: ParseSourceSpan | null}|null, part: string, newLine: boolean = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n      this._currentLine.partsLength += part.length;\n      this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n    }\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n/**\n * @return {?}\n */\nremoveEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n/**\n * @return {?}\n */\nincIndent() {\n    this._indent++;\n    if (this.lineIsEmpty()) {\n      this._currentLine.indent = this._indent;\n    }\n  }\n/**\n * @return {?}\n */\ndecIndent() {\n    this._indent--;\n    if (this.lineIsEmpty()) {\n      this._currentLine.indent = this._indent;\n    }\n  }\n/**\n * @param {?} clazz\n * @return {?}\n */\npushClass(clazz: o.ClassStmt) { this._classes.push(clazz); }\n/**\n * @return {?}\n */\npopClass(): o.ClassStmt { return /** @type {?} */(( this._classes.pop())); }\n/**\n * @return {?}\n */\nget currentClass(): o.ClassStmt|null {\n    return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n  }\n/**\n * @return {?}\n */\ntoSource(): string {\n    return this.sourceLines\n        .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')\n        .join('\\n');\n  }\n/**\n * @param {?} sourceFilePath\n * @param {?} genFilePath\n * @param {?=} startsAtLine\n * @return {?}\n */\ntoSourceMapGenerator(sourceFilePath: string, genFilePath: string, startsAtLine: number = 0):\n      SourceMapGenerator {\n    const /** @type {?} */ map = new SourceMapGenerator(genFilePath);\n\n    let /** @type {?} */ firstOffsetMapped = false;\n    const /** @type {?} */ mapFirstOffsetIfNeeded = () => {\n      if (!firstOffsetMapped) {\n        // Add a single space so that tools won't try to load the file from disk.\n        // Note: We are using virtual urls like `ng:///`, so we have to\n        // provide a content here.\n        map.addSource(sourceFilePath, ' ').addMapping(0, sourceFilePath, 0, 0);\n        firstOffsetMapped = true;\n      }\n    };\n\n    for (let /** @type {?} */ i = 0; i < startsAtLine; i++) {\n      map.addLine();\n      mapFirstOffsetIfNeeded();\n    }\n\n    this.sourceLines.forEach((line, lineIdx) => {\n      map.addLine();\n\n      const /** @type {?} */ spans = line.srcSpans;\n      const /** @type {?} */ parts = line.parts;\n      let /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;\n      let /** @type {?} */ spanIdx = 0;\n      // skip leading parts without source spans\n      while (spanIdx < spans.length && !spans[spanIdx]) {\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n      }\n      if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n        firstOffsetMapped = true;\n      } else {\n        mapFirstOffsetIfNeeded();\n      }\n\n      while (spanIdx < spans.length) {\n        const /** @type {?} */ span = /** @type {?} */(( spans[spanIdx]));\n        const /** @type {?} */ source = span.start.file;\n        const /** @type {?} */ sourceLine = span.start.line;\n        const /** @type {?} */ sourceCol = span.start.col;\n        map.addSource(source.url, source.content)\n            .addMapping(col0, source.url, sourceLine, sourceCol);\n\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n\n        // assign parts without span or the same span to the previous segment\n        while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n          col0 += parts[spanIdx].length;\n          spanIdx++;\n        }\n      }\n    });\n\n    return map;\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nsetPreambleLineCount(count: number) { return this._preambleLineCount = count; }\n/**\n * @param {?} line\n * @param {?} column\n * @return {?}\n */\nspanOf(line: number, column: number): ParseSourceSpan|null {\n    const /** @type {?} */ emittedLine = this._lines[line - this._preambleLineCount];\n    if (emittedLine) {\n      let /** @type {?} */ columnsLeft = column - emittedLine.indent;\n      for (let /** @type {?} */ partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n        const /** @type {?} */ part = emittedLine.parts[partIndex];\n        if (part.length > columnsLeft) {\n          return emittedLine.srcSpans[partIndex];\n        }\n        columnsLeft -= part.length;\n      }\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\n\nprivate get sourceLines(): _EmittedLine[] {\n    if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n      return this._lines.slice(0, -1);\n    }\n    return this._lines;\n  }\n}\n\nfunction EmitterVisitorContext_tsickle_Closure_declarations() {\n/** @type {?} */\nEmitterVisitorContext.prototype._lines;\n/** @type {?} */\nEmitterVisitorContext.prototype._classes;\n/** @type {?} */\nEmitterVisitorContext.prototype._preambleLineCount;\n/** @type {?} */\nEmitterVisitorContext.prototype._indent;\n}\n\n/**\n * @abstract\n */\nexport abstract class AbstractEmitterVisitor implements o.StatementVisitor, o.ExpressionVisitor {\n/**\n * @param {?} _escapeDollarInStrings\n */\nconstructor(private _escapeDollarInStrings: boolean) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitExpressionStmt(stmt: o.ExpressionStatement, ctx: EmitterVisitorContext): any {\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitReturnStmt(stmt: o.ReturnStatement, ctx: EmitterVisitorContext): any {\n    ctx.print(stmt, `return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n\n  abstract visitCastExpr(ast: o.CastExpr, context: any): any;\n\n  abstract visitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext): any;\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitIfStmt(stmt: o.IfStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(stmt, `if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(stmt, `) {`);\n    const /** @type {?} */ hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(stmt, ` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(stmt, ` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n      if (hasElseCase) {\n        ctx.println(stmt, `} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n    ctx.println(stmt, `}`);\n    return null;\n  }\n\n  abstract visitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext): any;\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitThrowStmt(stmt: o.ThrowStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(stmt, `throw `);\n    stmt.error.visitExpression(this, ctx);\n    ctx.println(stmt, `;`);\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitCommentStmt(stmt: o.CommentStmt, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lines = stmt.comment.split('\\n');\n    lines.forEach((line) => { ctx.println(stmt, `// ${line}`); });\n    return null;\n  }\n  abstract visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any;\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteVarExpr(expr: o.WriteVarExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    ctx.print(expr, `${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(expr, `] = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWritePropExpr(expr: o.WritePropExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: EmitterVisitorContext): any {\n    expr.receiver.visitExpression(this, ctx);\n    let /** @type {?} */ name = expr.name;\n    if (expr.builtin != null) {\n      name = this.getBuiltinMethodName(expr.builtin);\n      if (name == null) {\n        // some builtins just mean to skip the call.\n        return null;\n      }\n    }\n    ctx.print(expr, `.${name}(`);\n    this.visitAllExpressions(expr.args, ctx, `,`);\n    ctx.print(expr, `)`);\n    return null;\n  }\n\n  abstract getBuiltinMethodName(method: o.BuiltinMethod): string;\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeFunctionExpr(expr: o.InvokeFunctionExpr, ctx: EmitterVisitorContext): any {\n    expr.fn.visitExpression(this, ctx);\n    ctx.print(expr, `(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(expr, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadVarExpr(ast: o.ReadVarExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ varName = /** @type {?} */(( ast.name));\n    if (ast.builtin != null) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          varName = 'super';\n          break;\n        case o.BuiltinVar.This:\n          varName = 'this';\n          break;\n        case o.BuiltinVar.CatchError:\n          varName = /** @type {?} */(( CATCH_ERROR_VAR.name));\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = /** @type {?} */(( CATCH_STACK_VAR.name));\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    ctx.print(ast, varName);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, `new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(ast, `(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(ast, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralExpr(ast: o.LiteralExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ value = ast.value;\n    if (typeof value === 'string') {\n      ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n    } else {\n      ctx.print(ast, `${value}`);\n    }\n    return null;\n  }\n\n  abstract visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any;\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitConditionalExpr(ast: o.ConditionalExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, `(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print(ast, '? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(ast, ': '); /** @type {?} */((\n    ast.falseCase)).visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitNotExpr(ast: o.NotExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, '!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitAssertNotNullExpr(ast: o.AssertNotNull, ctx: EmitterVisitorContext): any {\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n  abstract visitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext): any;\n  abstract visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, context: any): any;\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ opStr: string;\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        opStr = '==';\n        break;\n      case o.BinaryOperator.Identical:\n        opStr = '===';\n        break;\n      case o.BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n      case o.BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n      case o.BinaryOperator.And:\n        opStr = '&&';\n        break;\n      case o.BinaryOperator.Or:\n        opStr = '||';\n        break;\n      case o.BinaryOperator.Plus:\n        opStr = '+';\n        break;\n      case o.BinaryOperator.Minus:\n        opStr = '-';\n        break;\n      case o.BinaryOperator.Divide:\n        opStr = '/';\n        break;\n      case o.BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n      case o.BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n      case o.BinaryOperator.Lower:\n        opStr = '<';\n        break;\n      case o.BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n      case o.BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n      case o.BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n    ctx.print(ast, `(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(ast, ` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadPropExpr(ast: o.ReadPropExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `.`);\n    ctx.print(ast, ast.name);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadKeyExpr(ast: o.ReadKeyExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(ast, `]`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, `[`);\n    this.visitAllExpressions(ast.entries, ctx, ',');\n    ctx.print(ast, `]`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, `{`);\n    this.visitAllObjects(entry => {\n      ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\n      entry.value.visitExpression(this, ctx);\n    }, ast.entries, ctx, ',');\n    ctx.print(ast, `}`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitCommaExpr(ast: o.CommaExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, '(');\n    this.visitAllExpressions(ast.parts, ctx, ',');\n    ctx.print(ast, ')');\n    return null;\n  }\n/**\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @return {?}\n */\nvisitAllExpressions(expressions: o.Expression[], ctx: EmitterVisitorContext, separator: string):\n      void {\n    this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\n  }\n/**\n * @template T\n * @param {?} handler\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @return {?}\n */\nvisitAllObjects<T>(\n      handler: (t: T) => void, expressions: T[], ctx: EmitterVisitorContext,\n      separator: string): void {\n    let /** @type {?} */ incrementedIndent = false;\n    for (let /** @type {?} */ i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        if (ctx.lineLength() > 80) {\n          ctx.print(null, separator, true);\n          if (!incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.incIndent();\n            ctx.incIndent();\n            incrementedIndent = true;\n          }\n        } else {\n          ctx.print(null, separator, false);\n        }\n      }\n      handler(expressions[i]);\n    }\n    if (incrementedIndent) {\n      // continuation are marked with double indent.\n      ctx.decIndent();\n      ctx.decIndent();\n    }\n  }\n/**\n * @param {?} statements\n * @param {?} ctx\n * @return {?}\n */\nvisitAllStatements(statements: o.Statement[], ctx: EmitterVisitorContext): void {\n    statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n  }\n}\n\nfunction AbstractEmitterVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractEmitterVisitor.prototype._escapeDollarInStrings;\n\n/**\n * @abstract\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitCastExpr = function(ast, context) {};\n\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {};\n\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {};\n\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {};\n\n/**\n * @abstract\n * @param {?} method\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.getBuiltinMethodName = function(method) {};\n\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {};\n\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {};\n\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nAbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {};\n}\n\n/**\n * @param {?} input\n * @param {?} escapeDollar\n * @param {?=} alwaysQuote\n * @return {?}\n */\nexport function escapeIdentifier(\n    input: string, escapeDollar: boolean, alwaysQuote: boolean = true): any {\n  if (input == null) {\n    return null;\n  }\n  const /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match: string[]) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  const /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? `'${body}'` : body;\n}\n/**\n * @param {?} count\n * @return {?}\n */\nfunction _createIndent(count: number): string {\n  let /** @type {?} */ res = '';\n  for (let /** @type {?} */ i = 0; i < count; i++) {\n    res += _INDENT_WITH;\n  }\n  return res;\n}\n"]}