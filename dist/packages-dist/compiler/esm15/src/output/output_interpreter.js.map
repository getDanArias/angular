{"version":3,"sources":["../../../../../packages/compiler/src/output/output_interpreter.ts"],"names":[],"mappings":"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","file":"output_interpreter.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport * as o from './output_ast';\nimport {debugOutputAstAsTypeScript} from './ts_emitter';\n/**\n * @param {?} statements\n * @return {?}\n */\nexport function interpretStatements(statements: o.Statement[]): {[key: string]: any} {\n  const /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map<string, any>());\n  const /** @type {?} */ visitor = new StatementInterpreter();\n  visitor.visitAllStatements(statements, ctx);\n  const /** @type {?} */ result: {[key: string]: any} = {};\n  ctx.exports.forEach((exportName) => { result[exportName] = ctx.vars.get(exportName); });\n  return result;\n}\n/**\n * @param {?} varNames\n * @param {?} varValues\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _executeFunctionStatements(\n    varNames: string[], varValues: any[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): any {\n  const /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n  for (let /** @type {?} */ i = 0; i < varNames.length; i++) {\n    childCtx.vars.set(varNames[i], varValues[i]);\n  }\n  const /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);\n  return result ? result.value : null;\n}\nclass _ExecutionContext {\n  exports: string[] = [];\n/**\n * @param {?} parent\n * @param {?} instance\n * @param {?} className\n * @param {?} vars\n */\nconstructor(\npublic parent: _ExecutionContext|null,\npublic instance: any,\npublic className: string|null,\npublic vars: Map<string, any>) {}\n/**\n * @return {?}\n */\ncreateChildWihtLocalVars(): _ExecutionContext {\n    return new _ExecutionContext(this, this.instance, this.className, new Map<string, any>());\n  }\n}\n\nfunction _ExecutionContext_tsickle_Closure_declarations() {\n/** @type {?} */\n_ExecutionContext.prototype.exports;\n/** @type {?} */\n_ExecutionContext.prototype.parent;\n/** @type {?} */\n_ExecutionContext.prototype.instance;\n/** @type {?} */\n_ExecutionContext.prototype.className;\n/** @type {?} */\n_ExecutionContext.prototype.vars;\n}\n\nclass ReturnValue {\n/**\n * @param {?} value\n */\nconstructor(public value: any) {}\n}\n\nfunction ReturnValue_tsickle_Closure_declarations() {\n/** @type {?} */\nReturnValue.prototype.value;\n}\n\n/**\n * @param {?} _classStmt\n * @param {?} _ctx\n * @param {?} _visitor\n * @return {?}\n */\nfunction createDynamicClass(\n    _classStmt: o.ClassStmt, _ctx: _ExecutionContext, _visitor: StatementInterpreter): Function {\n  const /** @type {?} */ propertyDescriptors: {[key: string]: any} = {};\n\n  _classStmt.getters.forEach((getter: o.ClassGetter) => {\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[getter.name] = {\n      configurable: false,\n      get: function() {\n        const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n      }\n    };\n  });\n  _classStmt.methods.forEach(function(method: o.ClassMethod) {\n    const /** @type {?} */ paramNames = method.params.map(param => param.name);\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[ /** @type {?} */((method.name))] = {\n      writable: false,\n      configurable: false,\n      value: function(...args: any[]) {\n        const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n      }\n    };\n  });\n\n  const /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);\n  // Note: use `function` instead of arrow function to capture `this`\n  const /** @type {?} */ ctor = function(...args: any[]) {\n    const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n    _classStmt.fields.forEach((field) => { this[field.name] = undefined; });\n    _executeFunctionStatements(\n        ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n  };\n  const /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n  ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n  return ctor;\n}\nclass StatementInterpreter implements o.StatementVisitor, o.ExpressionVisitor {\n/**\n * @param {?} ast\n * @return {?}\n */\ndebugAst(ast: o.Expression|o.Statement|o.Type): string { return debugOutputAstAsTypeScript(ast); }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: _ExecutionContext): any {\n    ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteVarExpr(expr: o.WriteVarExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n    let /** @type {?} */ currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(expr.name)) {\n        currCtx.vars.set(expr.name, value);\n        return value;\n      }\n      currCtx = /** @type {?} */(( currCtx.parent));\n    }\n    throw new Error(`Not declared variable ${expr.name}`);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadVarExpr(ast: o.ReadVarExpr, ctx: _ExecutionContext): any {\n    let /** @type {?} */ varName = /** @type {?} */(( ast.name));\n    if (ast.builtin != null) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          return ctx.instance.__proto__;\n        case o.BuiltinVar.This:\n          return ctx.instance;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    let /** @type {?} */ currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(varName)) {\n        return currCtx.vars.get(varName);\n      }\n      currCtx = /** @type {?} */(( currCtx.parent));\n    }\n    throw new Error(`Not declared variable ${varName}`);\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ index = expr.index.visitExpression(this, ctx);\n    const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n    receiver[index] = value;\n    return value;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWritePropExpr(expr: o.WritePropExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n    receiver[expr.name] = value;\n    return value;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);\n    let /** @type {?} */ result: any;\n    if (expr.builtin != null) {\n      switch (expr.builtin) {\n        case o.BuiltinMethod.ConcatArray:\n          result = receiver.concat(...args);\n          break;\n        case o.BuiltinMethod.SubscribeObservable:\n          result = receiver.subscribe({next: args[0]});\n          break;\n        case o.BuiltinMethod.Bind:\n          result = receiver.bind(...args);\n          break;\n        default:\n          throw new Error(`Unknown builtin method ${expr.builtin}`);\n      }\n    } else {\n      result = receiver[ /** @type {?} */((expr.name))].apply(receiver, args);\n    }\n    return result;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeFunctionExpr(stmt: o.InvokeFunctionExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);\n    const /** @type {?} */ fnExpr = stmt.fn;\n    if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n      ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n      return null;\n    } else {\n      const /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);\n      return fn.apply(null, args);\n    }\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitReturnStmt(stmt: o.ReturnStatement, ctx: _ExecutionContext): any {\n    return new ReturnValue(stmt.value.visitExpression(this, ctx));\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: o.ClassStmt, ctx: _ExecutionContext): any {\n    const /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);\n    ctx.vars.set(stmt.name, clazz);\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitExpressionStmt(stmt: o.ExpressionStatement, ctx: _ExecutionContext): any {\n    return stmt.expr.visitExpression(this, ctx);\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitIfStmt(stmt: o.IfStmt, ctx: _ExecutionContext): any {\n    const /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);\n    if (condition) {\n      return this.visitAllStatements(stmt.trueCase, ctx);\n    } else if (stmt.falseCase != null) {\n      return this.visitAllStatements(stmt.falseCase, ctx);\n    }\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitTryCatchStmt(stmt: o.TryCatchStmt, ctx: _ExecutionContext): any {\n    try {\n      return this.visitAllStatements(stmt.bodyStmts, ctx);\n    } catch ( /** @type {?} */e) {\n      const /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n      childCtx.vars.set(CATCH_ERROR_VAR, e);\n      childCtx.vars.set(CATCH_STACK_VAR, e.stack);\n      return this.visitAllStatements(stmt.catchStmts, childCtx);\n    }\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitThrowStmt(stmt: o.ThrowStmt, ctx: _ExecutionContext): any {\n    throw stmt.error.visitExpression(this, ctx);\n  }\n/**\n * @param {?} stmt\n * @param {?=} context\n * @return {?}\n */\nvisitCommentStmt(stmt: o.CommentStmt, context?: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitInstantiateExpr(ast: o.InstantiateExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);\n    const /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);\n    return new clazz(...args);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralExpr(ast: o.LiteralExpr, ctx: _ExecutionContext): any { return ast.value; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitExternalExpr(ast: o.ExternalExpr, ctx: _ExecutionContext): any { return ast.value.runtime; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitConditionalExpr(ast: o.ConditionalExpr, ctx: _ExecutionContext): any {\n    if (ast.condition.visitExpression(this, ctx)) {\n      return ast.trueCase.visitExpression(this, ctx);\n    } else if (ast.falseCase != null) {\n      return ast.falseCase.visitExpression(this, ctx);\n    }\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitNotExpr(ast: o.NotExpr, ctx: _ExecutionContext): any {\n    return !ast.condition.visitExpression(this, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitAssertNotNullExpr(ast: o.AssertNotNull, ctx: _ExecutionContext): any {\n    return ast.condition.visitExpression(this, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitCastExpr(ast: o.CastExpr, ctx: _ExecutionContext): any {\n    return ast.value.visitExpression(this, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitFunctionExpr(ast: o.FunctionExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ paramNames = ast.params.map((param) => param.name);\n    return _declareFn(paramNames, ast.statements, ctx, this);\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: _ExecutionContext): any {\n    const /** @type {?} */ paramNames = stmt.params.map((param) => param.name);\n    ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ lhs = () => ast.lhs.visitExpression(this, ctx);\n    const /** @type {?} */ rhs = () => ast.rhs.visitExpression(this, ctx);\n\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        return lhs() == rhs();\n      case o.BinaryOperator.Identical:\n        return lhs() === rhs();\n      case o.BinaryOperator.NotEquals:\n        return lhs() != rhs();\n      case o.BinaryOperator.NotIdentical:\n        return lhs() !== rhs();\n      case o.BinaryOperator.And:\n        return lhs() && rhs();\n      case o.BinaryOperator.Or:\n        return lhs() || rhs();\n      case o.BinaryOperator.Plus:\n        return lhs() + rhs();\n      case o.BinaryOperator.Minus:\n        return lhs() - rhs();\n      case o.BinaryOperator.Divide:\n        return lhs() / rhs();\n      case o.BinaryOperator.Multiply:\n        return lhs() * rhs();\n      case o.BinaryOperator.Modulo:\n        return lhs() % rhs();\n      case o.BinaryOperator.Lower:\n        return lhs() < rhs();\n      case o.BinaryOperator.LowerEquals:\n        return lhs() <= rhs();\n      case o.BinaryOperator.Bigger:\n        return lhs() > rhs();\n      case o.BinaryOperator.BiggerEquals:\n        return lhs() >= rhs();\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadPropExpr(ast: o.ReadPropExpr, ctx: _ExecutionContext): any {\n    let /** @type {?} */ result: any;\n    const /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n    result = receiver[ast.name];\n    return result;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadKeyExpr(ast: o.ReadKeyExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ prop = ast.index.visitExpression(this, ctx);\n    return receiver[prop];\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: _ExecutionContext): any {\n    return this.visitAllExpressions(ast.entries, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ result: {[k: string]: any} = {};\n    ast.entries.forEach(entry => result[entry.key] = entry.value.visitExpression(this, ctx));\n    return result;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCommaExpr(ast: o.CommaExpr, context: any): any {\n    const /** @type {?} */ values = this.visitAllExpressions(ast.parts, context);\n    return values[values.length - 1];\n  }\n/**\n * @param {?} expressions\n * @param {?} ctx\n * @return {?}\n */\nvisitAllExpressions(expressions: o.Expression[], ctx: _ExecutionContext): any {\n    return expressions.map((expr) => expr.visitExpression(this, ctx));\n  }\n/**\n * @param {?} statements\n * @param {?} ctx\n * @return {?}\n */\nvisitAllStatements(statements: o.Statement[], ctx: _ExecutionContext): ReturnValue|null {\n    for (let /** @type {?} */ i = 0; i < statements.length; i++) {\n      const /** @type {?} */ stmt = statements[i];\n      const /** @type {?} */ val = stmt.visitStatement(this, ctx);\n      if (val instanceof ReturnValue) {\n        return val;\n      }\n    }\n    return null;\n  }\n}\n/**\n * @param {?} varNames\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _declareFn(\n    varNames: string[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): Function {\n  return (...args: any[]) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n}\n\nconst /** @type {?} */ CATCH_ERROR_VAR = 'error';\nconst /** @type {?} */ CATCH_STACK_VAR = 'stack';\n"]}