{"version":3,"sources":["../../../../../packages/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class ParserError {\npublic message: string;\n/**\n * @param {?} message\n * @param {?} input\n * @param {?} errLocation\n * @param {?=} ctxLocation\n */\nconstructor(\n      message: string,\npublic input: string,\npublic errLocation: string,\npublic ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nfunction ParserError_tsickle_Closure_declarations() {\n/** @type {?} */\nParserError.prototype.message;\n/** @type {?} */\nParserError.prototype.input;\n/** @type {?} */\nParserError.prototype.errLocation;\n/** @type {?} */\nParserError.prototype.ctxLocation;\n}\n\nexport class ParseSpan {\n/**\n * @param {?} start\n * @param {?} end\n */\nconstructor(public start: number,\npublic end: number) {}\n}\n\nfunction ParseSpan_tsickle_Closure_declarations() {\n/** @type {?} */\nParseSpan.prototype.start;\n/** @type {?} */\nParseSpan.prototype.end;\n}\n\nexport class AST {\n/**\n * @param {?} span\n */\nconstructor(public span: ParseSpan) {}\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return null; }\n/**\n * @return {?}\n */\ntoString(): string { return 'AST'; }\n}\n\nfunction AST_tsickle_Closure_declarations() {\n/** @type {?} */\nAST.prototype.span;\n}\n\n/**\n * Represents a quoted expression of the form:\n * \n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n * \n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n/**\n * @param {?} span\n * @param {?} prefix\n * @param {?} uninterpretedExpression\n * @param {?} location\n */\nconstructor(\n      span: ParseSpan,\npublic prefix: string,\npublic uninterpretedExpression: string,\npublic location: any) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n/**\n * @return {?}\n */\ntoString(): string { return 'Quote'; }\n}\n\nfunction Quote_tsickle_Closure_declarations() {\n/** @type {?} */\nQuote.prototype.prefix;\n/** @type {?} */\nQuote.prototype.uninterpretedExpression;\n/** @type {?} */\nQuote.prototype.location;\n}\n\nexport class EmptyExpr extends AST {\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\nexport class ImplicitReceiver extends AST {\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n/**\n * @param {?} span\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nfunction Chain_tsickle_Closure_declarations() {\n/** @type {?} */\nChain.prototype.expressions;\n}\n\nexport class Conditional extends AST {\n/**\n * @param {?} span\n * @param {?} condition\n * @param {?} trueExp\n * @param {?} falseExp\n */\nconstructor(span: ParseSpan,\npublic condition: AST,\npublic trueExp: AST,\npublic falseExp: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nfunction Conditional_tsickle_Closure_declarations() {\n/** @type {?} */\nConditional.prototype.condition;\n/** @type {?} */\nConditional.prototype.trueExp;\n/** @type {?} */\nConditional.prototype.falseExp;\n}\n\nexport class PropertyRead extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nfunction PropertyRead_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyRead.prototype.receiver;\n/** @type {?} */\nPropertyRead.prototype.name;\n}\n\nexport class PropertyWrite extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic value: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nfunction PropertyWrite_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyWrite.prototype.receiver;\n/** @type {?} */\nPropertyWrite.prototype.name;\n/** @type {?} */\nPropertyWrite.prototype.value;\n}\n\nexport class SafePropertyRead extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nfunction SafePropertyRead_tsickle_Closure_declarations() {\n/** @type {?} */\nSafePropertyRead.prototype.receiver;\n/** @type {?} */\nSafePropertyRead.prototype.name;\n}\n\nexport class KeyedRead extends AST {\n/**\n * @param {?} span\n * @param {?} obj\n * @param {?} key\n */\nconstructor(span: ParseSpan,\npublic obj: AST,\npublic key: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nfunction KeyedRead_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyedRead.prototype.obj;\n/** @type {?} */\nKeyedRead.prototype.key;\n}\n\nexport class KeyedWrite extends AST {\n/**\n * @param {?} span\n * @param {?} obj\n * @param {?} key\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic obj: AST,\npublic key: AST,\npublic value: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nfunction KeyedWrite_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyedWrite.prototype.obj;\n/** @type {?} */\nKeyedWrite.prototype.key;\n/** @type {?} */\nKeyedWrite.prototype.value;\n}\n\nexport class BindingPipe extends AST {\n/**\n * @param {?} span\n * @param {?} exp\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic exp: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nfunction BindingPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nBindingPipe.prototype.exp;\n/** @type {?} */\nBindingPipe.prototype.name;\n/** @type {?} */\nBindingPipe.prototype.args;\n}\n\nexport class LiteralPrimitive extends AST {\n/**\n * @param {?} span\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic value: any) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nfunction LiteralPrimitive_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralPrimitive.prototype.value;\n}\n\nexport class LiteralArray extends AST {\n/**\n * @param {?} span\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nfunction LiteralArray_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralArray.prototype.expressions;\n}\n\n\nexport type LiteralMapKey = {\n  key: string; quoted: boolean;\n};\nexport class LiteralMap extends AST {\n/**\n * @param {?} span\n * @param {?} keys\n * @param {?} values\n */\nconstructor(span: ParseSpan,\npublic keys: LiteralMapKey[],\npublic values: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nfunction LiteralMap_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralMap.prototype.keys;\n/** @type {?} */\nLiteralMap.prototype.values;\n}\n\nexport class Interpolation extends AST {\n/**\n * @param {?} span\n * @param {?} strings\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic strings: any[],\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nfunction Interpolation_tsickle_Closure_declarations() {\n/** @type {?} */\nInterpolation.prototype.strings;\n/** @type {?} */\nInterpolation.prototype.expressions;\n}\n\nexport class Binary extends AST {\n/**\n * @param {?} span\n * @param {?} operation\n * @param {?} left\n * @param {?} right\n */\nconstructor(span: ParseSpan,\npublic operation: string,\npublic left: AST,\npublic right: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nfunction Binary_tsickle_Closure_declarations() {\n/** @type {?} */\nBinary.prototype.operation;\n/** @type {?} */\nBinary.prototype.left;\n/** @type {?} */\nBinary.prototype.right;\n}\n\nexport class PrefixNot extends AST {\n/**\n * @param {?} span\n * @param {?} expression\n */\nconstructor(span: ParseSpan,\npublic expression: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nfunction PrefixNot_tsickle_Closure_declarations() {\n/** @type {?} */\nPrefixNot.prototype.expression;\n}\n\nexport class NonNullAssert extends AST {\n/**\n * @param {?} span\n * @param {?} expression\n */\nconstructor(span: ParseSpan,\npublic expression: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitNonNullAssert(this, context);\n  }\n}\n\nfunction NonNullAssert_tsickle_Closure_declarations() {\n/** @type {?} */\nNonNullAssert.prototype.expression;\n}\n\nexport class MethodCall extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nfunction MethodCall_tsickle_Closure_declarations() {\n/** @type {?} */\nMethodCall.prototype.receiver;\n/** @type {?} */\nMethodCall.prototype.name;\n/** @type {?} */\nMethodCall.prototype.args;\n}\n\nexport class SafeMethodCall extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nfunction SafeMethodCall_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeMethodCall.prototype.receiver;\n/** @type {?} */\nSafeMethodCall.prototype.name;\n/** @type {?} */\nSafeMethodCall.prototype.args;\n}\n\nexport class FunctionCall extends AST {\n/**\n * @param {?} span\n * @param {?} target\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic target: AST|null,\npublic args: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nfunction FunctionCall_tsickle_Closure_declarations() {\n/** @type {?} */\nFunctionCall.prototype.target;\n/** @type {?} */\nFunctionCall.prototype.args;\n}\n\nexport class ASTWithSource extends AST {\n/**\n * @param {?} ast\n * @param {?} source\n * @param {?} location\n * @param {?} errors\n */\nconstructor(\npublic ast: AST,\npublic source: string|null,\npublic location: string,\npublic errors: ParserError[]) {\n    super(new ParseSpan(0, source == null ? 0 : source.length));\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n/**\n * @return {?}\n */\ntoString(): string { return `${this.source} in ${this.location}`; }\n}\n\nfunction ASTWithSource_tsickle_Closure_declarations() {\n/** @type {?} */\nASTWithSource.prototype.ast;\n/** @type {?} */\nASTWithSource.prototype.source;\n/** @type {?} */\nASTWithSource.prototype.location;\n/** @type {?} */\nASTWithSource.prototype.errors;\n}\n\nexport class TemplateBinding {\n/**\n * @param {?} span\n * @param {?} key\n * @param {?} keyIsVar\n * @param {?} name\n * @param {?} expression\n */\nconstructor(\npublic span: ParseSpan,\npublic key: string,\npublic keyIsVar: boolean,\npublic name: string,\npublic expression: ASTWithSource) {}\n}\n\nfunction TemplateBinding_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplateBinding.prototype.span;\n/** @type {?} */\nTemplateBinding.prototype.key;\n/** @type {?} */\nTemplateBinding.prototype.keyIsVar;\n/** @type {?} */\nTemplateBinding.prototype.name;\n/** @type {?} */\nTemplateBinding.prototype.expression;\n}\n\n/**\n * @record\n */\nexport function AstVisitor() {}\n\n\nfunction AstVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\nAstVisitor.prototype.visitBinary;\n/** @type {?} */\nAstVisitor.prototype.visitChain;\n/** @type {?} */\nAstVisitor.prototype.visitConditional;\n/** @type {?} */\nAstVisitor.prototype.visitFunctionCall;\n/** @type {?} */\nAstVisitor.prototype.visitImplicitReceiver;\n/** @type {?} */\nAstVisitor.prototype.visitInterpolation;\n/** @type {?} */\nAstVisitor.prototype.visitKeyedRead;\n/** @type {?} */\nAstVisitor.prototype.visitKeyedWrite;\n/** @type {?} */\nAstVisitor.prototype.visitLiteralArray;\n/** @type {?} */\nAstVisitor.prototype.visitLiteralMap;\n/** @type {?} */\nAstVisitor.prototype.visitLiteralPrimitive;\n/** @type {?} */\nAstVisitor.prototype.visitMethodCall;\n/** @type {?} */\nAstVisitor.prototype.visitPipe;\n/** @type {?} */\nAstVisitor.prototype.visitPrefixNot;\n/** @type {?} */\nAstVisitor.prototype.visitNonNullAssert;\n/** @type {?} */\nAstVisitor.prototype.visitPropertyRead;\n/** @type {?} */\nAstVisitor.prototype.visitPropertyWrite;\n/** @type {?} */\nAstVisitor.prototype.visitQuote;\n/** @type {?} */\nAstVisitor.prototype.visitSafeMethodCall;\n/** @type {?} */\nAstVisitor.prototype.visitSafePropertyRead;\n/** @type {?|undefined} */\nAstVisitor.prototype.visit;\n}\n\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitNonNullAssert(ast: NonNullAssert, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n  visit?(ast: AST, context?: any): any;\n}\nexport class NullAstVisitor implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNonNullAssert(ast: NonNullAssert, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): any {}\n}\nexport class RecursiveAstVisitor implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): any { /** @type {?} */((\n    ast.target)).visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNonNullAssert(ast: NonNullAssert, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n/**\n * @param {?} asts\n * @param {?} context\n * @return {?}\n */\nvisitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): any { return null; }\n}\nexport class AstTransformer implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, /** @type {?} */(( ast.target)).visit(this), this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    return new NonNullAssert(ast.span, ast.expression.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n/**\n * @param {?} asts\n * @return {?}\n */\nvisitAll(asts: any[]): any[] {\n    const /** @type {?} */ res = new Array(asts.length);\n    for (let /** @type {?} */ i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n/**\n * @param {?} ast\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nexport function visitAstChildren(ast: AST, visitor: AstVisitor, context?: any) {\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction visit(ast: AST) {\n    visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n  }\n/**\n * @template T\n * @param {?} asts\n * @return {?}\n */\nfunction visitAll<T extends AST>(asts: T[]) { asts.forEach(visit); }\n\n  ast.visit({\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitBinary(ast) {\n      visit(ast.left);\n      visit(ast.right);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitChain(ast) { visitAll(ast.expressions); },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitConditional(ast) {\n      visit(ast.condition);\n      visit(ast.trueExp);\n      visit(ast.falseExp);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitFunctionCall(ast) {\n      if (ast.target) {\n        visit(ast.target);\n      }\n      visitAll(ast.args);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitImplicitReceiver(ast) {},\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitInterpolation(ast) { visitAll(ast.expressions); },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitKeyedRead(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitKeyedWrite(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n      visit(ast.obj);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitLiteralArray(ast) { visitAll(ast.expressions); },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitLiteralMap(ast) {},\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitLiteralPrimitive(ast) {},\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitPipe(ast) {\n      visit(ast.exp);\n      visitAll(ast.args);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitPrefixNot(ast) { visit(ast.expression); },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitNonNullAssert(ast) { visit(ast.expression); },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitPropertyRead(ast) { visit(ast.receiver); },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitPropertyWrite(ast) {\n      visit(ast.receiver);\n      visit(ast.value);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitQuote(ast) {},\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitSafeMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n/**\n * @param {?} ast\n * @return {?}\n */\nvisitSafePropertyRead(ast) { visit(ast.receiver); },\n  });\n}\n"]}