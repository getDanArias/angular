{"version":3,"sources":["../../../../../../packages/compiler/src/view_compiler/view_compiler.ts"],"names":[],"mappings":"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","file":"view_compiler.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, ɵArgumentType as ArgumentType, ɵBindingFlags as BindingFlags, ɵDepFlags as DepFlags, ɵNodeFlags as NodeFlags, ɵQueryBindingType as QueryBindingType, ɵQueryValueType as QueryValueType, ɵViewFlags as ViewFlags, ɵelementEventFullName as elementEventFullName} from '@angular/core';\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompilePipeSummary, CompileProviderMetadata, CompileTokenMetadata, CompileTypeMetadata, rendererTypeName, tokenReference, viewClassName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {BuiltinConverter, EventHandlerVars, LocalResolver, convertActionBinding, convertPropertyBinding, convertPropertyBindingBuiltins} from '../compiler_util/expression_converter';\nimport {CompilerConfig} from '../config';\nimport {AST, ASTWithSource, Interpolation} from '../expression_parser/ast';\nimport {Identifiers} from '../identifiers';\nimport {CompilerInjectable} from '../injectable';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport {isNgContainer} from '../ml_parser/tags';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ParseSourceSpan} from '../parse_util';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {AttrAst, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, ProviderAst, ProviderAstType, QueryMatch, ReferenceAst, TemplateAst, TemplateAstVisitor, TextAst, VariableAst, templateVisitAll} from '../template_parser/template_ast';\nimport {OutputContext} from '../util';\n\nimport {componentFactoryResolverProviderDef, depDef, lifecycleHookToNodeFlag, providerDef} from './provider_compiler';\n\nconst /** @type {?} */ CLASS_ATTR = 'class';\nconst /** @type {?} */ STYLE_ATTR = 'style';\nconst /** @type {?} */ IMPLICIT_TEMPLATE_VAR = '\\$implicit';\nconst /** @type {?} */ NG_CONTAINER_TAG = 'ng-container';\nexport class ViewCompileResult {\n/**\n * @param {?} viewClassVar\n * @param {?} rendererTypeVar\n */\nconstructor(public viewClassVar: string,\npublic rendererTypeVar: string) {}\n}\n\nfunction ViewCompileResult_tsickle_Closure_declarations() {\n/** @type {?} */\nViewCompileResult.prototype.viewClassVar;\n/** @type {?} */\nViewCompileResult.prototype.rendererTypeVar;\n}\n\nexport class ViewCompiler {\n/**\n * @param {?} _config\n * @param {?} _reflector\n * @param {?} _schemaRegistry\n */\nconstructor(\nprivate _config: CompilerConfig,\nprivate _reflector: CompileReflector,\nprivate _schemaRegistry: ElementSchemaRegistry) {}\n/**\n * @param {?} outputCtx\n * @param {?} component\n * @param {?} template\n * @param {?} styles\n * @param {?} usedPipes\n * @return {?}\n */\ncompileComponent(\n      outputCtx: OutputContext, component: CompileDirectiveMetadata, template: TemplateAst[],\n      styles: o.Expression, usedPipes: CompilePipeSummary[]): ViewCompileResult {\n    let /** @type {?} */ embeddedViewCount = 0;\n    const /** @type {?} */ staticQueryIds = findStaticQueryIds(template);\n\n    let /** @type {?} */ renderComponentVarName: string = /** @type {?} */(( undefined));\n    if (!component.isHost) {\n      const /** @type {?} */ template = /** @type {?} */(( component.template));\n      const /** @type {?} */ customRenderData: o.LiteralMapEntry[] = [];\n      if (template.animations && template.animations.length) {\n        customRenderData.push(new o.LiteralMapEntry(\n            'animation', convertValueToOutputAst(outputCtx, template.animations), true));\n      }\n\n      const /** @type {?} */ renderComponentVar = o.variable(rendererTypeName(component.type.reference));\n      renderComponentVarName = /** @type {?} */(( renderComponentVar.name));\n      outputCtx.statements.push(\n          renderComponentVar\n              .set(o.importExpr(Identifiers.createRendererType2).callFn([new o.LiteralMapExpr([\n                new o.LiteralMapEntry('encapsulation', o.literal(template.encapsulation), false),\n                new o.LiteralMapEntry('styles', styles, false),\n                new o.LiteralMapEntry('data', new o.LiteralMapExpr(customRenderData), false)\n              ])]))\n              .toDeclStmt(\n                  o.importType(Identifiers.RendererType2),\n                  [o.StmtModifier.Final, o.StmtModifier.Exported]));\n    }\n\n    const /** @type {?} */ viewBuilderFactory = (parent: ViewBuilder | null): ViewBuilder => {\n      const /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\n      return new ViewBuilder(\n          this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes,\n          staticQueryIds, viewBuilderFactory);\n    };\n\n    const /** @type {?} */ visitor = viewBuilderFactory(null);\n    visitor.visitAll([], template);\n\n    outputCtx.statements.push(...visitor.build());\n\n    return new ViewCompileResult(visitor.viewName, renderComponentVarName);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: CompilerInjectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: CompilerConfig, },\n{type: CompileReflector, },\n{type: ElementSchemaRegistry, },\n];\n}\n\nfunction ViewCompiler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewCompiler.ctorParameters;\n/** @type {?} */\nViewCompiler.prototype._config;\n/** @type {?} */\nViewCompiler.prototype._reflector;\n/** @type {?} */\nViewCompiler.prototype._schemaRegistry;\n}\n\n/**\n * @record\n */\nfunction ViewBuilderFactory() {}\n\n\nfunction ViewBuilderFactory_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(parent: ViewBuilder): ViewBuilder;\n*/\n}\n\n\ninterface ViewBuilderFactory {\n  (parent: ViewBuilder): ViewBuilder;\n}\n/**\n * @record\n */\nfunction UpdateExpression() {}\n\n\nfunction UpdateExpression_tsickle_Closure_declarations() {\n/** @type {?} */\nUpdateExpression.prototype.context;\n/** @type {?} */\nUpdateExpression.prototype.nodeIndex;\n/** @type {?} */\nUpdateExpression.prototype.bindingIndex;\n/** @type {?} */\nUpdateExpression.prototype.sourceSpan;\n/** @type {?} */\nUpdateExpression.prototype.value;\n}\n\n\ninterface UpdateExpression {\n  context: o.Expression;\n  nodeIndex: number;\n  bindingIndex: number;\n  sourceSpan: ParseSourceSpan;\n  value: AST;\n}\n\nconst /** @type {?} */ LOG_VAR = o.variable('_l');\nconst /** @type {?} */ VIEW_VAR = o.variable('_v');\nconst /** @type {?} */ CHECK_VAR = o.variable('_ck');\nconst /** @type {?} */ COMP_VAR = o.variable('_co');\nconst /** @type {?} */ EVENT_NAME_VAR = o.variable('en');\nconst /** @type {?} */ ALLOW_DEFAULT_VAR = o.variable(`ad`);\nclass ViewBuilder implements TemplateAstVisitor, LocalResolver {\nprivate compType: o.Type;\nprivate nodes: (() => {\n    sourceSpan: ParseSourceSpan | null,\n    nodeDef: o.Expression,\n    nodeFlags: NodeFlags, updateDirectives?: UpdateExpression[], updateRenderer?: UpdateExpression[]\n  })[] = [];\nprivate purePipeNodeIndices: {[pipeName: string]: number} = Object.create(null);\nprivate refNodeIndices: {[refName: string]: number} = Object.create(null);\nprivate variables: VariableAst[] = [];\nprivate children: ViewBuilder[] = [];\n/**\n * @param {?} reflector\n * @param {?} outputCtx\n * @param {?} parent\n * @param {?} component\n * @param {?} embeddedViewIndex\n * @param {?} usedPipes\n * @param {?} staticQueryIds\n * @param {?} viewBuilderFactory\n */\nconstructor(\nprivate reflector: CompileReflector,\nprivate outputCtx: OutputContext,\nprivate parent: ViewBuilder|null,\nprivate component: CompileDirectiveMetadata,\nprivate embeddedViewIndex: number,\nprivate usedPipes: CompilePipeSummary[],\nprivate staticQueryIds: Map<TemplateAst, StaticAndDynamicQueryIds>,\nprivate viewBuilderFactory: ViewBuilderFactory) {\n    // TODO(tbosch): The old view compiler used to use an `any` type\n    // for the context in any embedded view. We keep this behaivor for now\n    // to be able to introduce the new view compiler without too many errors.\n    this.compType = this.embeddedViewIndex > 0 ?\n        o.DYNAMIC_TYPE : /** @type {?} */((\n        o.expressionType(outputCtx.importExpr(this.component.type.reference))));\n  }\n/**\n * @return {?}\n */\nget viewName(): string {\n    return viewClassName(this.component.type.reference, this.embeddedViewIndex);\n  }\n/**\n * @param {?} variables\n * @param {?} astNodes\n * @return {?}\n */\nvisitAll(variables: VariableAst[], astNodes: TemplateAst[]) {\n    this.variables = variables;\n    // create the pipes for the pure pipes immediately, so that we know their indices.\n    if (!this.parent) {\n      this.usedPipes.forEach((pipe) => {\n        if (pipe.pure) {\n          this.purePipeNodeIndices[pipe.name] = this._createPipe(null, pipe);\n        }\n      });\n    }\n\n    if (!this.parent) {\n      const /** @type {?} */ queryIds = staticViewQueryIds(this.staticQueryIds);\n      this.component.viewQueries.forEach((query, queryIndex) => {\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\n        const /** @type {?} */ queryId = queryIndex + 1;\n        const /** @type {?} */ bindingType = query.first ? QueryBindingType.First : QueryBindingType.All;\n        const /** @type {?} */ flags =\n            NodeFlags.TypeViewQuery | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\n        this.nodes.push(() => ({\n                          sourceSpan: null,\n                          nodeFlags: flags,\n                          nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                            o.literal(flags), o.literal(queryId),\n                            new o.LiteralMapExpr([new o.LiteralMapEntry(\n                                query.propertyName, o.literal(bindingType), false)])\n                          ])\n                        }));\n      });\n    }\n    templateVisitAll(this, astNodes);\n    if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\n      // if the view is an embedded view, then we need to add an additional root node in some cases\n      this.nodes.push(() => ({\n                        sourceSpan: null,\n                        nodeFlags: NodeFlags.TypeElement,\n                        nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n                          o.literal(NodeFlags.None), o.NULL_EXPR, o.NULL_EXPR, o.literal(0)\n                        ])\n                      }));\n    }\n  }\n/**\n * @param {?=} targetStatements\n * @return {?}\n */\nbuild(targetStatements: o.Statement[] = []): o.Statement[] {\n    this.children.forEach((child) => child.build(targetStatements));\n\n    const {updateRendererStmts, updateDirectivesStmts, nodeDefExprs} =\n        this._createNodeExpressions();\n\n    const /** @type {?} */ updateRendererFn = this._createUpdateFn(updateRendererStmts);\n    const /** @type {?} */ updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\n\n\n    let /** @type {?} */ viewFlags = ViewFlags.None;\n    if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\n      viewFlags |= ViewFlags.OnPush;\n    }\n    const /** @type {?} */ viewFactory = new o.DeclareFunctionStmt(\n        this.viewName, [new o.FnParam( /** @type {?} */((LOG_VAR.name)))],\n        [new o.ReturnStatement(o.importExpr(Identifiers.viewDef).callFn([\n          o.literal(viewFlags),\n          o.literalArr(nodeDefExprs),\n          updateDirectivesFn,\n          updateRendererFn,\n        ]))],\n        o.importType(Identifiers.ViewDefinition),\n        this.embeddedViewIndex === 0 ? [o.StmtModifier.Exported] : []);\n\n    targetStatements.push(viewFactory);\n    return targetStatements;\n  }\n/**\n * @param {?} updateStmts\n * @return {?}\n */\n\nprivate _createUpdateFn(updateStmts: o.Statement[]): o.Expression {\n    let /** @type {?} */ updateFn: o.Expression;\n    if (updateStmts.length > 0) {\n      const /** @type {?} */ preStmts: o.Statement[] = [];\n      if (!this.component.isHost && o.findReadVarNames(updateStmts).has( /** @type {?} */((COMP_VAR.name)))) {\n        preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n      }\n      updateFn = o.fn(\n          [\n            new o.FnParam( /** @type {?} */((CHECK_VAR.name)), o.INFERRED_TYPE),\n            new o.FnParam( /** @type {?} */((VIEW_VAR.name)), o.INFERRED_TYPE)\n          ],\n          [...preStmts, ...updateStmts], o.INFERRED_TYPE);\n    } else {\n      updateFn = o.NULL_EXPR;\n    }\n    return updateFn;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNgContent(ast: NgContentAst, context: any): any {\n    // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n    this.nodes.push(() => ({\n                      sourceSpan: ast.sourceSpan,\n                      nodeFlags: NodeFlags.TypeNgContent,\n                      nodeDef: o.importExpr(Identifiers.ngContentDef).callFn([\n                        o.literal(ast.ngContentIndex), o.literal(ast.index)\n                      ])\n                    }));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitText(ast: TextAst, context: any): any {\n    // textDef(ngContentIndex: number, constants: string[]): NodeDef;\n    this.nodes.push(() => ({\n                      sourceSpan: ast.sourceSpan,\n                      nodeFlags: NodeFlags.TypeText,\n                      nodeDef: o.importExpr(Identifiers.textDef).callFn([\n                        o.literal(ast.ngContentIndex), o.literalArr([o.literal(ast.value)])\n                      ])\n                    }));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBoundText(ast: BoundTextAst, context: any): any {\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array\n    this.nodes.push( /** @type {?} */((null)));\n\n    const /** @type {?} */ astWithSource = /** @type {?} */(( <ASTWithSource>ast.value));\n    const /** @type {?} */ inter = /** @type {?} */(( <Interpolation>astWithSource.ast));\n\n    const /** @type {?} */ updateRendererExpressions = inter.expressions.map(\n        (expr, bindingIndex) => this._preprocessUpdateExpression(\n            {nodeIndex, bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr}));\n\n    // textDef(ngContentIndex: number, constants: string[]): NodeDef;\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: NodeFlags.TypeText,\n      nodeDef: o.importExpr(Identifiers.textDef).callFn([\n        o.literal(ast.ngContentIndex), o.literalArr(inter.strings.map(s => o.literal(s)))\n      ]),\n      updateRenderer: updateRendererExpressions\n    });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array\n    this.nodes.push( /** @type {?} */((null)));\n\n    const {flags, queryMatchesExpr, hostEvents} = this._visitElementOrTemplate(nodeIndex, ast);\n\n    const /** @type {?} */ childVisitor = this.viewBuilderFactory(this);\n    this.children.push(childVisitor);\n    childVisitor.visitAll(ast.variables, ast.children);\n\n    const /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n\n    // anchorDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n    //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n    //   ViewDefinitionFactory): NodeDef;\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: NodeFlags.TypeElement | flags,\n      nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n        o.literal(flags),\n        queryMatchesExpr,\n        o.literal(ast.ngContentIndex),\n        o.literal(childCount),\n        this._createElementHandleEventFn(nodeIndex, hostEvents),\n        o.variable(childVisitor.viewName),\n      ])\n    });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitElement(ast: ElementAst, context: any): any {\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array so we can add children\n    this.nodes.push( /** @type {?} */((null)));\n\n    // Using a null element name creates an anchor.\n    const /** @type {?} */ elName: string|null = isNgContainer(ast.name) ? null : ast.name;\n\n    const {flags, usedEvents, queryMatchesExpr, hostBindings: dirHostBindings, hostEvents} =\n        this._visitElementOrTemplate(nodeIndex, ast);\n\n    let /** @type {?} */ inputDefs: o.Expression[] = [];\n    let /** @type {?} */ updateRendererExpressions: UpdateExpression[] = [];\n    let /** @type {?} */ outputDefs: o.Expression[] = [];\n    if (elName) {\n      const /** @type {?} */ hostBindings: any[] = ast.inputs\n                                      .map((inputAst) => ({\n                                             context: /** @type {?} */(( COMP_VAR as o.Expression)),\n                                             inputAst,\n                                             dirAst: /** @type {?} */(( null as any)),\n                                           }))\n                                      .concat(dirHostBindings);\n      if (hostBindings.length) {\n        updateRendererExpressions =\n            hostBindings.map((hostBinding, bindingIndex) => this._preprocessUpdateExpression({\n              context: hostBinding.context,\n              nodeIndex,\n              bindingIndex,\n              sourceSpan: hostBinding.inputAst.sourceSpan,\n              value: hostBinding.inputAst.value\n            }));\n        inputDefs = hostBindings.map(\n            hostBinding => elementBindingDef(hostBinding.inputAst, hostBinding.dirAst));\n      }\n      outputDefs = usedEvents.map(\n          ([target, eventName]) => o.literalArr([o.literal(target), o.literal(eventName)]));\n    }\n\n    templateVisitAll(this, ast.children);\n\n    const /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n\n    const /** @type {?} */ compAst = ast.directives.find(dirAst => dirAst.directive.isComponent);\n    let /** @type {?} */ compRendererType = /** @type {?} */(( o.NULL_EXPR as o.Expression));\n    let /** @type {?} */ compView = /** @type {?} */(( o.NULL_EXPR as o.Expression));\n    if (compAst) {\n      compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\n      compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\n    }\n\n    // elementDef(\n    //   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],\n    //   ngContentIndex: number, childCount: number, namespaceAndName: string,\n    //   fixedAttrs: [string, string][] = [],\n    //   bindings?: [BindingFlags, string, string | SecurityContext][],\n    //   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],\n    //   handleEvent?: ElementHandleEventFn,\n    //   componentView?: () => ViewDefinition, componentRendererType?: RendererType2): NodeDef;\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: NodeFlags.TypeElement | flags,\n      nodeDef: o.importExpr(Identifiers.elementDef).callFn([\n        o.literal(flags),\n        queryMatchesExpr,\n        o.literal(ast.ngContentIndex),\n        o.literal(childCount),\n        o.literal(elName),\n        elName ? fixedAttrsDef(ast) : o.NULL_EXPR,\n        inputDefs.length ? o.literalArr(inputDefs) : o.NULL_EXPR,\n        outputDefs.length ? o.literalArr(outputDefs) : o.NULL_EXPR,\n        this._createElementHandleEventFn(nodeIndex, hostEvents),\n        compView,\n        compRendererType,\n      ]),\n      updateRenderer: updateRendererExpressions\n    });\n  }\n/**\n * @param {?} nodeIndex\n * @param {?} ast\n * @return {?}\n */\n\nprivate _visitElementOrTemplate(nodeIndex: number, ast: {\n    hasViewContainer: boolean,\n    outputs: BoundEventAst[],\n    directives: DirectiveAst[],\n    providers: ProviderAst[],\n    references: ReferenceAst[],\n    queryMatches: QueryMatch[]\n  }): {\n    flags: NodeFlags,\n    usedEvents: [string | null, string][],\n    queryMatchesExpr: o.Expression,\n    hostBindings:\n        {context: o.Expression, inputAst: BoundElementPropertyAst, dirAst: DirectiveAst}[],\n    hostEvents: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[],\n  } {\n    let /** @type {?} */ flags = NodeFlags.None;\n    if (ast.hasViewContainer) {\n      flags |= NodeFlags.EmbeddedViews;\n    }\n    const /** @type {?} */ usedEvents = new Map<string, [string | null, string]>();\n    ast.outputs.forEach((event) => {\n      const {name, target} = elementEventNameAndTarget(event, null);\n      usedEvents.set(elementEventFullName(target, name), [target, name]);\n    });\n    ast.directives.forEach((dirAst) => {\n      dirAst.hostEvents.forEach((event) => {\n        const {name, target} = elementEventNameAndTarget(event, dirAst);\n        usedEvents.set(elementEventFullName(target, name), [target, name]);\n      });\n    });\n    const /** @type {?} */ hostBindings:\n        {context: o.Expression, inputAst: BoundElementPropertyAst, dirAst: DirectiveAst}[] = [];\n    const /** @type {?} */ hostEvents: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[] = [];\n    this._visitComponentFactoryResolverProvider(ast.directives);\n\n    ast.providers.forEach((providerAst, providerIndex) => {\n      let /** @type {?} */ dirAst: DirectiveAst = /** @type {?} */(( undefined));\n      let /** @type {?} */ dirIndex: number = /** @type {?} */(( undefined));\n      ast.directives.forEach((localDirAst, i) => {\n        if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n          dirAst = localDirAst;\n          dirIndex = i;\n        }\n      });\n      if (dirAst) {\n        const {hostBindings: dirHostBindings, hostEvents: dirHostEvents} = this._visitDirective(\n            providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, /** @type {?} */((\n            this.staticQueryIds.get( /** @type {?} */((<any>ast))))));\n        hostBindings.push(...dirHostBindings);\n        hostEvents.push(...dirHostEvents);\n      } else {\n        this._visitProvider(providerAst, ast.queryMatches);\n      }\n    });\n\n    let /** @type {?} */ queryMatchExprs: o.Expression[] = [];\n    ast.queryMatches.forEach((match) => {\n      let /** @type {?} */ valueType: QueryValueType = /** @type {?} */(( undefined));\n      if (tokenReference(match.value) ===\n          this.reflector.resolveExternalReference(Identifiers.ElementRef)) {\n        valueType = QueryValueType.ElementRef;\n      } else if (\n          tokenReference(match.value) ===\n          this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n        valueType = QueryValueType.ViewContainerRef;\n      } else if (\n          tokenReference(match.value) ===\n          this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n        valueType = QueryValueType.TemplateRef;\n      }\n      if (valueType != null) {\n        queryMatchExprs.push(o.literalArr([o.literal(match.queryId), o.literal(valueType)]));\n      }\n    });\n    ast.references.forEach((ref) => {\n      let /** @type {?} */ valueType: QueryValueType = /** @type {?} */(( undefined));\n      if (!ref.value) {\n        valueType = QueryValueType.RenderElement;\n      } else if (\n          tokenReference(ref.value) ===\n          this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n        valueType = QueryValueType.TemplateRef;\n      }\n      if (valueType != null) {\n        this.refNodeIndices[ref.name] = nodeIndex;\n        queryMatchExprs.push(o.literalArr([o.literal(ref.name), o.literal(valueType)]));\n      }\n    });\n    ast.outputs.forEach((outputAst) => {\n      hostEvents.push({context: COMP_VAR, eventAst: outputAst, dirAst: /** @type {?} */(( null))});\n    });\n\n    return {\n      flags,\n      usedEvents: Array.from(usedEvents.values()),\n      queryMatchesExpr: queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n      hostBindings,\n      hostEvents: hostEvents\n    };\n  }\n/**\n * @param {?} providerAst\n * @param {?} dirAst\n * @param {?} directiveIndex\n * @param {?} elementNodeIndex\n * @param {?} refs\n * @param {?} queryMatches\n * @param {?} usedEvents\n * @param {?} queryIds\n * @return {?}\n */\n\nprivate _visitDirective(\n      providerAst: ProviderAst, dirAst: DirectiveAst, directiveIndex: number,\n      elementNodeIndex: number, refs: ReferenceAst[], queryMatches: QueryMatch[],\n      usedEvents: Map<string, any>, queryIds: StaticAndDynamicQueryIds): {\n    hostBindings:\n        {context: o.Expression, inputAst: BoundElementPropertyAst, dirAst: DirectiveAst}[],\n    hostEvents: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[]\n  } {\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array so we can add children\n    this.nodes.push( /** @type {?} */((null)));\n\n    dirAst.directive.queries.forEach((query, queryIndex) => {\n      const /** @type {?} */ queryId = dirAst.contentQueryStartId + queryIndex;\n      const /** @type {?} */ flags =\n          NodeFlags.TypeContentQuery | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\n      const /** @type {?} */ bindingType = query.first ? QueryBindingType.First : QueryBindingType.All;\n      this.nodes.push(() => ({\n                        sourceSpan: dirAst.sourceSpan,\n                        nodeFlags: flags,\n                        nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                          o.literal(flags), o.literal(queryId),\n                          new o.LiteralMapExpr([new o.LiteralMapEntry(\n                              query.propertyName, o.literal(bindingType), false)])\n                        ]),\n                      }));\n    });\n\n    // Note: the operation below might also create new nodeDefs,\n    // but we don't want them to be a child of a directive,\n    // as they might be a provider/pipe on their own.\n    // I.e. we only allow queries as children of directives nodes.\n    const /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n\n    let {flags, queryMatchExprs, providerExpr, depsExpr} =\n        this._visitProviderOrDirective(providerAst, queryMatches);\n\n    refs.forEach((ref) => {\n      if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n        this.refNodeIndices[ref.name] = nodeIndex;\n        queryMatchExprs.push(\n            o.literalArr([o.literal(ref.name), o.literal(QueryValueType.Provider)]));\n      }\n    });\n\n    if (dirAst.directive.isComponent) {\n      flags |= NodeFlags.Component;\n    }\n\n    const /** @type {?} */ inputDefs = dirAst.inputs.map((inputAst, inputIndex) => {\n      const /** @type {?} */ mapValue = o.literalArr([o.literal(inputIndex), o.literal(inputAst.directiveName)]);\n      // Note: it's important to not quote the key so that we can capture renames by minifiers!\n      return new o.LiteralMapEntry(inputAst.directiveName, mapValue, false);\n    });\n\n    const /** @type {?} */ outputDefs: o.LiteralMapEntry[] = [];\n    const /** @type {?} */ dirMeta = dirAst.directive;\n    Object.keys(dirMeta.outputs).forEach((propName) => {\n      const /** @type {?} */ eventName = dirMeta.outputs[propName];\n      if (usedEvents.has(eventName)) {\n        // Note: it's important to not quote the key so that we can capture renames by minifiers!\n        outputDefs.push(new o.LiteralMapEntry(propName, o.literal(eventName), false));\n      }\n    });\n    let /** @type {?} */ updateDirectiveExpressions: UpdateExpression[] = [];\n    if (dirAst.inputs.length || (flags & (NodeFlags.DoCheck | NodeFlags.OnInit)) > 0) {\n      updateDirectiveExpressions =\n          dirAst.inputs.map((input, bindingIndex) => this._preprocessUpdateExpression({\n            nodeIndex,\n            bindingIndex,\n            sourceSpan: input.sourceSpan,\n            context: COMP_VAR,\n            value: input.value\n          }));\n    }\n\n    const /** @type {?} */ dirContextExpr =\n        o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n    const /** @type {?} */ hostBindings = dirAst.hostProperties.map((inputAst) => ({\n                                                     context: dirContextExpr,\n                                                     dirAst,\n                                                     inputAst,\n                                                   }));\n    const /** @type {?} */ hostEvents = dirAst.hostEvents.map((hostEventAst) => ({\n                                               context: dirContextExpr,\n                                               eventAst: hostEventAst, dirAst,\n                                             }));\n\n\n    // directiveDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:\n    //   any,\n    //   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},\n    //   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: dirAst.sourceSpan,\n      nodeFlags: NodeFlags.TypeDirective | flags,\n      nodeDef: o.importExpr(Identifiers.directiveDef).callFn([\n        o.literal(flags), queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n        o.literal(childCount), providerExpr, depsExpr,\n        inputDefs.length ? new o.LiteralMapExpr(inputDefs) : o.NULL_EXPR,\n        outputDefs.length ? new o.LiteralMapExpr(outputDefs) : o.NULL_EXPR\n      ]),\n      updateDirectives: updateDirectiveExpressions,\n      directive: dirAst.directive.type,\n    });\n\n    return {hostBindings, hostEvents};\n  }\n/**\n * @param {?} providerAst\n * @param {?} queryMatches\n * @return {?}\n */\n\nprivate _visitProvider(providerAst: ProviderAst, queryMatches: QueryMatch[]): void {\n    this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\n  }\n/**\n * @param {?} directives\n * @return {?}\n */\n\nprivate _visitComponentFactoryResolverProvider(directives: DirectiveAst[]) {\n    const /** @type {?} */ componentDirMeta = directives.find(dirAst => dirAst.directive.isComponent);\n    if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n      const {providerExpr, depsExpr, flags, tokenExpr} = componentFactoryResolverProviderDef(\n          this.reflector, this.outputCtx, NodeFlags.PrivateProvider,\n          componentDirMeta.directive.entryComponents);\n      this._addProviderNode({\n        providerExpr,\n        depsExpr,\n        flags,\n        tokenExpr,\n        queryMatchExprs: [],\n        sourceSpan: componentDirMeta.sourceSpan\n      });\n    }\n  }\n/**\n * @param {?} data\n * @return {?}\n */\n\nprivate _addProviderNode(data: {\n    flags: NodeFlags,\n    queryMatchExprs: o.Expression[],\n    providerExpr: o.Expression,\n    depsExpr: o.Expression,\n    tokenExpr: o.Expression,\n    sourceSpan: ParseSourceSpan\n  }) {\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    // providerDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\n    //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n    this.nodes.push(\n        () => ({\n          sourceSpan: data.sourceSpan,\n          nodeFlags: data.flags,\n          nodeDef: o.importExpr(Identifiers.providerDef).callFn([\n            o.literal(data.flags),\n            data.queryMatchExprs.length ? o.literalArr(data.queryMatchExprs) : o.NULL_EXPR,\n            data.tokenExpr, data.providerExpr, data.depsExpr\n          ])\n        }));\n  }\n/**\n * @param {?} providerAst\n * @param {?} queryMatches\n * @return {?}\n */\n\nprivate _visitProviderOrDirective(providerAst: ProviderAst, queryMatches: QueryMatch[]): {\n    flags: NodeFlags,\n    tokenExpr: o.Expression,\n    sourceSpan: ParseSourceSpan,\n    queryMatchExprs: o.Expression[],\n    providerExpr: o.Expression,\n    depsExpr: o.Expression\n  } {\n    let /** @type {?} */ flags = NodeFlags.None;\n    let /** @type {?} */ queryMatchExprs: o.Expression[] = [];\n\n    queryMatches.forEach((match) => {\n      if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n        queryMatchExprs.push(\n            o.literalArr([o.literal(match.queryId), o.literal(QueryValueType.Provider)]));\n      }\n    });\n    const {providerExpr, depsExpr, flags: providerFlags, tokenExpr} =\n        providerDef(this.outputCtx, providerAst);\n    return {\n      flags: flags | providerFlags,\n      queryMatchExprs,\n      providerExpr,\n      depsExpr,\n      tokenExpr,\n      sourceSpan: providerAst.sourceSpan\n    };\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetLocal(name: string): o.Expression|null {\n    if (name == EventHandlerVars.event.name) {\n      return EventHandlerVars.event;\n    }\n    let /** @type {?} */ currViewExpr: o.Expression = VIEW_VAR;\n    for (let /** @type {?} */ currBuilder: ViewBuilder|null = this; currBuilder; currBuilder = currBuilder.parent,\n                          currViewExpr = currViewExpr.prop('parent').cast(o.DYNAMIC_TYPE)) {\n      // check references\n      const /** @type {?} */ refNodeIndex = currBuilder.refNodeIndices[name];\n      if (refNodeIndex != null) {\n        return o.importExpr(Identifiers.nodeValue).callFn([currViewExpr, o.literal(refNodeIndex)]);\n      }\n\n      // check variables\n      const /** @type {?} */ varAst = currBuilder.variables.find((varAst) => varAst.name === name);\n      if (varAst) {\n        const /** @type {?} */ varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\n        return currViewExpr.prop('context').prop(varValue);\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} sourceSpan\n * @param {?} argCount\n * @return {?}\n */\ncreateLiteralArrayConverter(sourceSpan: ParseSourceSpan, argCount: number): BuiltinConverter {\n    if (argCount === 0) {\n      const /** @type {?} */ valueExpr = o.importExpr(Identifiers.EMPTY_ARRAY);\n      return () => valueExpr;\n    }\n\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    // pureArrayDef(argCount: number): NodeDef;\n    this.nodes.push(() => ({\n                      sourceSpan,\n                      nodeFlags: NodeFlags.TypePureArray,\n                      nodeDef: o.importExpr(Identifiers.pureArrayDef).callFn([o.literal(argCount)])\n                    }));\n\n    return (args: o.Expression[]) => callCheckStmt(nodeIndex, args);\n  }\n/**\n * @param {?} sourceSpan\n * @param {?} keys\n * @return {?}\n */\ncreateLiteralMapConverter(sourceSpan: ParseSourceSpan, keys: {key: string, quoted: boolean}[]):\n      BuiltinConverter {\n    if (keys.length === 0) {\n      const /** @type {?} */ valueExpr = o.importExpr(Identifiers.EMPTY_MAP);\n      return () => valueExpr;\n    }\n\n    // function pureObjectDef(propToIndex: {[p: string]: number}): NodeDef\n    const /** @type {?} */ map = o.literalMap(keys.map((e, i) => ({...e, value: o.literal(i)})));\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    this.nodes.push(() => ({\n                      sourceSpan,\n                      nodeFlags: NodeFlags.TypePureObject,\n                      nodeDef: o.importExpr(Identifiers.pureObjectDef).callFn([map])\n                    }));\n\n    return (args: o.Expression[]) => callCheckStmt(nodeIndex, args);\n  }\n/**\n * @param {?} expression\n * @param {?} name\n * @param {?} argCount\n * @return {?}\n */\ncreatePipeConverter(expression: UpdateExpression, name: string, argCount: number):\n      BuiltinConverter {\n    const /** @type {?} */ pipe = /** @type {?} */(( this.usedPipes.find((pipeSummary) => pipeSummary.name === name)));\n    if (pipe.pure) {\n      const /** @type {?} */ nodeIndex = this.nodes.length;\n      // function purePipeDef(argCount: number): NodeDef;\n      this.nodes.push(() => ({\n                        sourceSpan: expression.sourceSpan,\n                        nodeFlags: NodeFlags.TypePurePipe,\n                        nodeDef: o.importExpr(Identifiers.purePipeDef).callFn([o.literal(argCount)])\n                      }));\n\n      // find underlying pipe in the component view\n      let /** @type {?} */ compViewExpr: o.Expression = VIEW_VAR;\n      let /** @type {?} */ compBuilder: ViewBuilder = this;\n      while (compBuilder.parent) {\n        compBuilder = compBuilder.parent;\n        compViewExpr = compViewExpr.prop('parent').cast(o.DYNAMIC_TYPE);\n      }\n      const /** @type {?} */ pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n      const /** @type {?} */ pipeValueExpr: o.Expression =\n          o.importExpr(Identifiers.nodeValue).callFn([compViewExpr, o.literal(pipeNodeIndex)]);\n\n      return (args: o.Expression[]) => callUnwrapValue(\n                 expression.nodeIndex, expression.bindingIndex,\n                 callCheckStmt(nodeIndex, [pipeValueExpr].concat(args)));\n    } else {\n      const /** @type {?} */ nodeIndex = this._createPipe(expression.sourceSpan, pipe);\n      const /** @type {?} */ nodeValueExpr =\n          o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n\n      return (args: o.Expression[]) => callUnwrapValue(\n                 expression.nodeIndex, expression.bindingIndex,\n                 nodeValueExpr.callMethod('transform', args));\n    }\n  }\n/**\n * @param {?} sourceSpan\n * @param {?} pipe\n * @return {?}\n */\n\nprivate _createPipe(sourceSpan: ParseSourceSpan|null, pipe: CompilePipeSummary): number {\n    const /** @type {?} */ nodeIndex = this.nodes.length;\n    let /** @type {?} */ flags = NodeFlags.None;\n    pipe.type.lifecycleHooks.forEach((lifecycleHook) => {\n      // for pipes, we only support ngOnDestroy\n      if (lifecycleHook === LifecycleHooks.OnDestroy) {\n        flags |= lifecycleHookToNodeFlag(lifecycleHook);\n      }\n    });\n\n    const /** @type {?} */ depExprs = pipe.type.diDeps.map((diDep) => depDef(this.outputCtx, diDep));\n    // function pipeDef(\n    //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n    this.nodes.push(\n        () => ({\n          sourceSpan,\n          nodeFlags: NodeFlags.TypePipe,\n          nodeDef: o.importExpr(Identifiers.pipeDef).callFn([\n            o.literal(flags), this.outputCtx.importExpr(pipe.type.reference), o.literalArr(depExprs)\n          ])\n        }));\n    return nodeIndex;\n  }\n/**\n * @param {?} expression\n * @return {?}\n */\n\nprivate _preprocessUpdateExpression(expression: UpdateExpression): UpdateExpression {\n    return {\n      nodeIndex: expression.nodeIndex,\n      bindingIndex: expression.bindingIndex,\n      sourceSpan: expression.sourceSpan,\n      context: expression.context,\n      value: convertPropertyBindingBuiltins(\n          {\n            createLiteralArrayConverter: (argCount: number) => this.createLiteralArrayConverter(\n                                             expression.sourceSpan, argCount),\n            createLiteralMapConverter:\n                (keys: {key: string, quoted: boolean}[]) =>\n                    this.createLiteralMapConverter(expression.sourceSpan, keys),\n            createPipeConverter: (name: string, argCount: number) =>\n                                     this.createPipeConverter(expression, name, argCount)\n          },\n          expression.value)\n    };\n  }\n/**\n * @return {?}\n */\n\nprivate _createNodeExpressions(): {\n    updateRendererStmts: o.Statement[],\n    updateDirectivesStmts: o.Statement[],\n    nodeDefExprs: o.Expression[]\n  } {\n    const /** @type {?} */ self = this;\n    let /** @type {?} */ updateBindingCount = 0;\n    const /** @type {?} */ updateRendererStmts: o.Statement[] = [];\n    const /** @type {?} */ updateDirectivesStmts: o.Statement[] = [];\n    const /** @type {?} */ nodeDefExprs = this.nodes.map((factory, nodeIndex) => {\n      const {nodeDef, nodeFlags, updateDirectives, updateRenderer, sourceSpan} = factory();\n      if (updateRenderer) {\n        updateRendererStmts.push(\n            ...createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\n      }\n      if (updateDirectives) {\n        updateDirectivesStmts.push(...createUpdateStatements(\n            nodeIndex, sourceSpan, updateDirectives,\n            (nodeFlags & (NodeFlags.DoCheck | NodeFlags.OnInit)) > 0));\n      }\n      // We use a comma expression to call the log function before\n      // the nodeDef function, but still use the result of the nodeDef function\n      // as the value.\n      // Note: We only add the logger to elements / text nodes,\n      // so we don't generate too much code.\n      const /** @type {?} */ logWithNodeDef = nodeFlags & NodeFlags.CatRenderNode ?\n          new o.CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) :\n          nodeDef;\n      return o.applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\n    });\n    return {updateRendererStmts, updateDirectivesStmts, nodeDefExprs};\n/**\n * @param {?} nodeIndex\n * @param {?} sourceSpan\n * @param {?} expressions\n * @param {?} allowEmptyExprs\n * @return {?}\n */\nfunction createUpdateStatements(\n        nodeIndex: number, sourceSpan: ParseSourceSpan | null, expressions: UpdateExpression[],\n        allowEmptyExprs: boolean): o.Statement[] {\n      const /** @type {?} */ updateStmts: o.Statement[] = [];\n      const /** @type {?} */ exprs = expressions.map(({sourceSpan, context, value}) => {\n        const /** @type {?} */ bindingId = `${updateBindingCount++}`;\n        const /** @type {?} */ nameResolver = context === COMP_VAR ? self : null;\n        const {stmts, currValExpr} =\n            convertPropertyBinding(nameResolver, context, value, bindingId);\n        updateStmts.push(...stmts.map(\n            (stmt: o.Statement) => o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n        return o.applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\n      });\n      if (expressions.length || allowEmptyExprs) {\n        updateStmts.push(o.applySourceSpanToStatementIfNeeded(\n            callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\n      }\n      return updateStmts;\n    }\n  }\n/**\n * @param {?} nodeIndex\n * @param {?} handlers\n * @return {?}\n */\n\nprivate _createElementHandleEventFn(\n      nodeIndex: number,\n      handlers: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[]) {\n    const /** @type {?} */ handleEventStmts: o.Statement[] = [];\n    let /** @type {?} */ handleEventBindingCount = 0;\n    handlers.forEach(({context, eventAst, dirAst}) => {\n      const /** @type {?} */ bindingId = `${handleEventBindingCount++}`;\n      const /** @type {?} */ nameResolver = context === COMP_VAR ? this : null;\n      const {stmts, allowDefault} =\n          convertActionBinding(nameResolver, context, eventAst.handler, bindingId);\n      const /** @type {?} */ trueStmts = stmts;\n      if (allowDefault) {\n        trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n      }\n      const {target: eventTarget, name: eventName} = elementEventNameAndTarget(eventAst, dirAst);\n      const /** @type {?} */ fullEventName = elementEventFullName(eventTarget, eventName);\n      handleEventStmts.push(o.applySourceSpanToStatementIfNeeded(\n          new o.IfStmt(o.literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts),\n          eventAst.sourceSpan));\n    });\n    let /** @type {?} */ handleEventFn: o.Expression;\n    if (handleEventStmts.length > 0) {\n      const /** @type {?} */ preStmts: o.Statement[] =\n          [ALLOW_DEFAULT_VAR.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE)];\n      if (!this.component.isHost && o.findReadVarNames(handleEventStmts).has( /** @type {?} */((COMP_VAR.name)))) {\n        preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n      }\n      handleEventFn = o.fn(\n          [\n            new o.FnParam( /** @type {?} */((VIEW_VAR.name)), o.INFERRED_TYPE),\n            new o.FnParam( /** @type {?} */((EVENT_NAME_VAR.name)), o.INFERRED_TYPE),\n            new o.FnParam( /** @type {?} */((EventHandlerVars.event.name)), o.INFERRED_TYPE)\n          ],\n          [...preStmts, ...handleEventStmts, new o.ReturnStatement(ALLOW_DEFAULT_VAR)],\n          o.INFERRED_TYPE);\n    } else {\n      handleEventFn = o.NULL_EXPR;\n    }\n    return handleEventFn;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitDirective(ast: DirectiveAst, context: {usedEvents: Set<string>}): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReference(ast: ReferenceAst, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitVariable(ast: VariableAst, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitEvent(ast: BoundEventAst, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitElementProperty(ast: BoundElementPropertyAst, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAttr(ast: AttrAst, context: any): any {}\n}\n\nfunction ViewBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nViewBuilder.prototype.compType;\n/** @type {?} */\nViewBuilder.prototype.nodes;\n/** @type {?} */\nViewBuilder.prototype.purePipeNodeIndices;\n/** @type {?} */\nViewBuilder.prototype.refNodeIndices;\n/** @type {?} */\nViewBuilder.prototype.variables;\n/** @type {?} */\nViewBuilder.prototype.children;\n/** @type {?} */\nViewBuilder.prototype.reflector;\n/** @type {?} */\nViewBuilder.prototype.outputCtx;\n/** @type {?} */\nViewBuilder.prototype.parent;\n/** @type {?} */\nViewBuilder.prototype.component;\n/** @type {?} */\nViewBuilder.prototype.embeddedViewIndex;\n/** @type {?} */\nViewBuilder.prototype.usedPipes;\n/** @type {?} */\nViewBuilder.prototype.staticQueryIds;\n/** @type {?} */\nViewBuilder.prototype.viewBuilderFactory;\n}\n\n/**\n * @param {?} astNodes\n * @return {?}\n */\nfunction needsAdditionalRootNode(astNodes: TemplateAst[]): boolean {\n  const /** @type {?} */ lastAstNode = astNodes[astNodes.length - 1];\n  if (lastAstNode instanceof EmbeddedTemplateAst) {\n    return lastAstNode.hasViewContainer;\n  }\n\n  if (lastAstNode instanceof ElementAst) {\n    if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\n      return needsAdditionalRootNode(lastAstNode.children);\n    }\n    return lastAstNode.hasViewContainer;\n  }\n\n  return lastAstNode instanceof NgContentAst;\n}\n/**\n * @param {?} inputAst\n * @param {?} dirAst\n * @return {?}\n */\nfunction elementBindingDef(inputAst: BoundElementPropertyAst, dirAst: DirectiveAst): o.Expression {\n  switch (inputAst.type) {\n    case PropertyBindingType.Attribute:\n      return o.literalArr([\n        o.literal(BindingFlags.TypeElementAttribute), o.literal(inputAst.name),\n        o.literal(inputAst.securityContext)\n      ]);\n    case PropertyBindingType.Property:\n      return o.literalArr([\n        o.literal(BindingFlags.TypeProperty), o.literal(inputAst.name),\n        o.literal(inputAst.securityContext)\n      ]);\n    case PropertyBindingType.Animation:\n      const /** @type {?} */ bindingType = BindingFlags.TypeProperty |\n          (dirAst && dirAst.directive.isComponent ? BindingFlags.SyntheticHostProperty :\n                                                    BindingFlags.SyntheticProperty);\n      return o.literalArr([\n        o.literal(bindingType), o.literal('@' + inputAst.name), o.literal(inputAst.securityContext)\n      ]);\n    case PropertyBindingType.Class:\n      return o.literalArr(\n          [o.literal(BindingFlags.TypeElementClass), o.literal(inputAst.name), o.NULL_EXPR]);\n    case PropertyBindingType.Style:\n      return o.literalArr([\n        o.literal(BindingFlags.TypeElementStyle), o.literal(inputAst.name), o.literal(inputAst.unit)\n      ]);\n  }\n}\n/**\n * @param {?} elementAst\n * @return {?}\n */\nfunction fixedAttrsDef(elementAst: ElementAst): o.Expression {\n  const /** @type {?} */ mapResult: {[key: string]: string} = Object.create(null);\n  elementAst.attrs.forEach(attrAst => { mapResult[attrAst.name] = attrAst.value; });\n  elementAst.directives.forEach(dirAst => {\n    Object.keys(dirAst.directive.hostAttributes).forEach(name => {\n      const /** @type {?} */ value = dirAst.directive.hostAttributes[name];\n      const /** @type {?} */ prevValue = mapResult[name];\n      mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\n    });\n  });\n  // Note: We need to sort to get a defined output order\n  // for tests and for caching generated artifacts...\n  return o.literalArr(Object.keys(mapResult).sort().map(\n      (attrName) => o.literalArr([o.literal(attrName), o.literal(mapResult[attrName])])));\n}\n/**\n * @param {?} attrName\n * @param {?} attrValue1\n * @param {?} attrValue2\n * @return {?}\n */\nfunction mergeAttributeValue(attrName: string, attrValue1: string, attrValue2: string): string {\n  if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {\n    return `${attrValue1} ${attrValue2}`;\n  } else {\n    return attrValue2;\n  }\n}\n/**\n * @param {?} nodeIndex\n * @param {?} exprs\n * @return {?}\n */\nfunction callCheckStmt(nodeIndex: number, exprs: o.Expression[]): o.Expression {\n  if (exprs.length > 10) {\n    return CHECK_VAR.callFn(\n        [VIEW_VAR, o.literal(nodeIndex), o.literal(ArgumentType.Dynamic), o.literalArr(exprs)]);\n  } else {\n    return CHECK_VAR.callFn(\n        [VIEW_VAR, o.literal(nodeIndex), o.literal(ArgumentType.Inline), ...exprs]);\n  }\n}\n/**\n * @param {?} nodeIndex\n * @param {?} bindingIdx\n * @param {?} expr\n * @return {?}\n */\nfunction callUnwrapValue(nodeIndex: number, bindingIdx: number, expr: o.Expression): o.Expression {\n  return o.importExpr(Identifiers.unwrapValue).callFn([\n    VIEW_VAR, o.literal(nodeIndex), o.literal(bindingIdx), expr\n  ]);\n}\n/**\n * @record\n */\nfunction StaticAndDynamicQueryIds() {}\n\n\nfunction StaticAndDynamicQueryIds_tsickle_Closure_declarations() {\n/** @type {?} */\nStaticAndDynamicQueryIds.prototype.staticQueryIds;\n/** @type {?} */\nStaticAndDynamicQueryIds.prototype.dynamicQueryIds;\n}\n\n\ninterface StaticAndDynamicQueryIds {\n  staticQueryIds: Set<number>;\n  dynamicQueryIds: Set<number>;\n}\n/**\n * @param {?} nodes\n * @param {?=} result\n * @return {?}\n */\nfunction findStaticQueryIds(\n    nodes: TemplateAst[], result = new Map<TemplateAst, StaticAndDynamicQueryIds>()):\n    Map<TemplateAst, StaticAndDynamicQueryIds> {\n  nodes.forEach((node) => {\n    const /** @type {?} */ staticQueryIds = new Set<number>();\n    const /** @type {?} */ dynamicQueryIds = new Set<number>();\n    let /** @type {?} */ queryMatches: QueryMatch[] = /** @type {?} */(( undefined));\n    if (node instanceof ElementAst) {\n      findStaticQueryIds(node.children, result);\n      node.children.forEach((child) => {\n        const /** @type {?} */ childData = /** @type {?} */(( result.get(child)));\n        childData.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\n        childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n      });\n      queryMatches = node.queryMatches;\n    } else if (node instanceof EmbeddedTemplateAst) {\n      findStaticQueryIds(node.children, result);\n      node.children.forEach((child) => {\n        const /** @type {?} */ childData = /** @type {?} */(( result.get(child)));\n        childData.staticQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n        childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n      });\n      queryMatches = node.queryMatches;\n    }\n    if (queryMatches) {\n      queryMatches.forEach((match) => staticQueryIds.add(match.queryId));\n    }\n    dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\n    result.set(node, {staticQueryIds, dynamicQueryIds});\n  });\n  return result;\n}\n/**\n * @param {?} nodeStaticQueryIds\n * @return {?}\n */\nfunction staticViewQueryIds(nodeStaticQueryIds: Map<TemplateAst, StaticAndDynamicQueryIds>):\n    StaticAndDynamicQueryIds {\n  const /** @type {?} */ staticQueryIds = new Set<number>();\n  const /** @type {?} */ dynamicQueryIds = new Set<number>();\n  Array.from(nodeStaticQueryIds.values()).forEach((entry) => {\n    entry.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\n    entry.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n  });\n  dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\n  return {staticQueryIds, dynamicQueryIds};\n}\n/**\n * @param {?} eventAst\n * @param {?} dirAst\n * @return {?}\n */\nfunction elementEventNameAndTarget(\n    eventAst: BoundEventAst, dirAst: DirectiveAst | null): {name: string, target: string | null} {\n  if (eventAst.isAnimation) {\n    return {\n      name: `@${eventAst.name}.${eventAst.phase}`,\n      target: dirAst && dirAst.directive.isComponent ? 'component' : null\n    };\n  } else {\n    return eventAst;\n  }\n}\n/**\n * @param {?} queryIds\n * @param {?} queryId\n * @param {?} isFirst\n * @return {?}\n */\nfunction calcStaticDynamicQueryFlags(\n    queryIds: StaticAndDynamicQueryIds, queryId: number, isFirst: boolean) {\n  let /** @type {?} */ flags = NodeFlags.None;\n  // Note: We only make queries static that query for a single item.\n  // This is because of backwards compatibility with the old view compiler...\n  if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {\n    flags |= NodeFlags.StaticQuery;\n  } else {\n    flags |= NodeFlags.DynamicQuery;\n  }\n  return flags;\n}\n"]}