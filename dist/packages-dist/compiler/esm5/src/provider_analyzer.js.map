{"version":3,"sources":["../../../../../packages/compiler/src/provider_analyzer.ts"],"names":[],"mappings":"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","file":"provider_analyzer.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata, tokenName, tokenReference} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {Identifiers, createTokenForExternalReference} from './identifiers';\nimport {ParseError, ParseSourceSpan} from './parse_util';\nimport {AttrAst, DirectiveAst, ProviderAst, ProviderAstType, QueryMatch, ReferenceAst} from './template_parser/template_ast';\nexport class ProviderError extends ParseError {\n/**\n * @param {?} message\n * @param {?} span\n */\nconstructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\n/**\n * @record\n */\nexport function QueryWithId() {}\n\n\nfunction QueryWithId_tsickle_Closure_declarations() {\n/** @type {?} */\nQueryWithId.prototype.meta;\n/** @type {?} */\nQueryWithId.prototype.queryId;\n}\n\n\nexport interface QueryWithId {\n  meta: CompileQueryMetadata;\n  queryId: number;\n}\nexport class ProviderViewContext {\n/**\n * \\@internal\n */\nviewQueries: Map<any, QueryWithId[]>;\n/**\n * \\@internal\n */\nviewProviders: Map<any, boolean>;\n  errors: ProviderError[] = [];\n/**\n * @param {?} reflector\n * @param {?} component\n */\nconstructor(public reflector: CompileReflector,\npublic component: CompileDirectiveMetadata) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new Map<any, boolean>();\n    component.viewProviders.forEach((provider) => {\n      if (this.viewProviders.get(tokenReference(provider.token)) == null) {\n        this.viewProviders.set(tokenReference(provider.token), true);\n      }\n    });\n  }\n}\n\nfunction ProviderViewContext_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nProviderViewContext.prototype.viewQueries;\n/**\n * \\@internal\n * @type {?}\n */\nProviderViewContext.prototype.viewProviders;\n/** @type {?} */\nProviderViewContext.prototype.errors;\n/** @type {?} */\nProviderViewContext.prototype.reflector;\n/** @type {?} */\nProviderViewContext.prototype.component;\n}\n\nexport class ProviderElementContext {\nprivate _contentQueries: Map<any, QueryWithId[]>;\nprivate _transformedProviders = new Map<any, ProviderAst>();\nprivate _seenProviders = new Map<any, boolean>();\nprivate _allProviders: Map<any, ProviderAst>;\nprivate _attrs: {[key: string]: string};\nprivate _hasViewContainer: boolean = false;\nprivate _queriedTokens = new Map<any, QueryMatch[]>();\n/**\n * @param {?} viewContext\n * @param {?} _parent\n * @param {?} _isViewRoot\n * @param {?} _directiveAsts\n * @param {?} attrs\n * @param {?} refs\n * @param {?} isTemplate\n * @param {?} contentQueryStartId\n * @param {?} _sourceSpan\n */\nconstructor(\npublic viewContext: ProviderViewContext,\nprivate _parent: ProviderElementContext,\nprivate _isViewRoot: boolean,\nprivate _directiveAsts: DirectiveAst[], attrs: AttrAst[],\n      refs: ReferenceAst[], isTemplate: boolean, contentQueryStartId: number,\nprivate _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    const /** @type {?} */ directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n    this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);\n    });\n    if (isTemplate) {\n      const /** @type {?} */ templateRefId =\n          createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);\n      this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n    }\n    refs.forEach((refAst) => {\n      let /** @type {?} */ defaultQueryValue = refAst.value ||\n          createTokenForExternalReference(this.viewContext.reflector, Identifiers.ElementRef);\n      this._addQueryReadsTo({value: refAst.name}, defaultQueryValue, this._queriedTokens);\n    });\n    if (this._queriedTokens.get(\n            this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {\n      this._hasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      const /** @type {?} */ eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nafterElement() {\n    // collect lazy providers\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n/**\n * @return {?}\n */\nget transformProviders(): ProviderAst[] {\n    // Note: Maps keep their insertion order.\n    const /** @type {?} */ lazyProviders: ProviderAst[] = [];\n    const /** @type {?} */ eagerProviders: ProviderAst[] = [];\n    this._transformedProviders.forEach(provider => {\n      if (provider.eager) {\n        eagerProviders.push(provider);\n      } else {\n        lazyProviders.push(provider);\n      }\n    });\n    return lazyProviders.concat(eagerProviders);\n  }\n/**\n * @return {?}\n */\nget transformedDirectiveAsts(): DirectiveAst[] {\n    const /** @type {?} */ sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n    const /** @type {?} */ sortedDirectives = this._directiveAsts.slice();\n    sortedDirectives.sort(\n        (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n/**\n * @return {?}\n */\nget transformedHasViewContainer(): boolean { return this._hasViewContainer; }\n/**\n * @return {?}\n */\nget queryMatches(): QueryMatch[] {\n    const /** @type {?} */ allMatches: QueryMatch[] = [];\n    this._queriedTokens.forEach((matches: QueryMatch[]) => { allMatches.push(...matches); });\n    return allMatches;\n  }\n/**\n * @param {?} token\n * @param {?} defaultValue\n * @param {?} queryReadTokens\n * @return {?}\n */\n\nprivate _addQueryReadsTo(\n      token: CompileTokenMetadata, defaultValue: CompileTokenMetadata,\n      queryReadTokens: Map<any, QueryMatch[]>) {\n    this._getQueriesFor(token).forEach((query) => {\n      const /** @type {?} */ queryValue = query.meta.read || defaultValue;\n      const /** @type {?} */ tokenRef = tokenReference(queryValue);\n      let /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);\n      if (!queryMatches) {\n        queryMatches = [];\n        queryReadTokens.set(tokenRef, queryMatches);\n      }\n      queryMatches.push({queryId: query.queryId, value: queryValue});\n    });\n  }\n/**\n * @param {?} token\n * @return {?}\n */\n\nprivate _getQueriesFor(token: CompileTokenMetadata): QueryWithId[] {\n    const /** @type {?} */ result: QueryWithId[] = [];\n    let /** @type {?} */ currentEl: ProviderElementContext = this;\n    let /** @type {?} */ distance = 0;\n    let /** @type {?} */ queries: QueryWithId[]|undefined;\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(tokenReference(token));\n      if (queries) {\n        result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this.viewContext.viewQueries.get(tokenReference(token));\n    if (queries) {\n      result.push(...queries);\n    }\n    return result;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} token\n * @param {?} eager\n * @return {?}\n */\n\nprivate _getOrCreateLocalProvider(\n      requestingProviderType: ProviderAstType, token: CompileTokenMetadata,\n      eager: boolean): ProviderAst|null {\n    const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n                               requestingProviderType === ProviderAstType.PublicService) &&\n                              resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this.viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\n      let /** @type {?} */ transformedUseValue = provider.useValue;\n      let /** @type {?} */ transformedUseExisting = /** @type {?} */(( provider.useExisting));\n      let /** @type {?} */ transformedDeps: CompileDiDependencyMetadata[] = /** @type {?} */(( undefined));\n      if (provider.useExisting != null) {\n        const /** @type {?} */ existingDiDep = /** @type {?} */(( this._getDependency(\n            resolvedProvider.providerType, {token: provider.useExisting}, eager)));\n        if (existingDiDep.token != null) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = /** @type {?} */(( null));\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => /** @type {?} */(( this._getDependency(resolvedProvider.providerType, dep, eager))));\n      } else if (provider.useClass) {\n        const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => /** @type {?} */(( this._getDependency(resolvedProvider.providerType, dep, eager))));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @param {?=} eager\n * @return {?}\n */\n\nprivate _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = false): CompileDiDependencyMetadata|null {\n    if (dep.isAttribute) {\n      const /** @type {?} */ attrValue = this._attrs[ /** @type {?} */((dep.token)).value];\n      return {isValue: true, value: attrValue == null ? null : attrValue};\n    }\n\n    if (dep.token != null) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||\n            tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||\n            tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(\n                    Identifiers.ChangeDetectorRef) ||\n            tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n          return dep;\n        }\n        if (tokenReference(dep.token) ===\n            this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n          this._hasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (tokenReference(dep.token) ===\n          this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {\n        return dep;\n      }\n      // access providers\n      if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\n        return dep;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @param {?=} eager\n * @return {?}\n */\n\nprivate _getDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = false): CompileDiDependencyMetadata|null {\n    let /** @type {?} */ currElement: ProviderElementContext = this;\n    let /** @type {?} */ currEager: boolean = eager;\n    let /** @type {?} */ result: CompileDiDependencyMetadata|null = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (!result && dep.isOptional) {\n        result = {isValue: true, value: null};\n      }\n    } else {\n      // check parent elements\n      while (!result && currElement._parent) {\n        const /** @type {?} */ prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (!result) {\n        if (!dep.isHost || this.viewContext.component.isHost ||\n            this.viewContext.component.type.reference === tokenReference( /** @type {?} */((dep.token))) ||\n            this.viewContext.viewProviders.get(tokenReference( /** @type {?} */((dep.token)))) != null) {\n          result = dep;\n        } else {\n          result = dep.isOptional ? result = {isValue: true, value: null} : null;\n        }\n      }\n    }\n    if (!result) {\n      this.viewContext.errors.push(\n          new ProviderError(`No provider for ${tokenName(( /** @type {?} */((dep.token))))}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\nfunction ProviderElementContext_tsickle_Closure_declarations() {\n/** @type {?} */\nProviderElementContext.prototype._contentQueries;\n/** @type {?} */\nProviderElementContext.prototype._transformedProviders;\n/** @type {?} */\nProviderElementContext.prototype._seenProviders;\n/** @type {?} */\nProviderElementContext.prototype._allProviders;\n/** @type {?} */\nProviderElementContext.prototype._attrs;\n/** @type {?} */\nProviderElementContext.prototype._hasViewContainer;\n/** @type {?} */\nProviderElementContext.prototype._queriedTokens;\n/** @type {?} */\nProviderElementContext.prototype.viewContext;\n/** @type {?} */\nProviderElementContext.prototype._parent;\n/** @type {?} */\nProviderElementContext.prototype._isViewRoot;\n/** @type {?} */\nProviderElementContext.prototype._directiveAsts;\n/** @type {?} */\nProviderElementContext.prototype._sourceSpan;\n}\n\nexport class NgModuleProviderAnalyzer {\nprivate _transformedProviders = new Map<any, ProviderAst>();\nprivate _seenProviders = new Map<any, boolean>();\nprivate _allProviders: Map<any, ProviderAst>;\nprivate _errors: ProviderError[] = [];\n/**\n * @param {?} reflector\n * @param {?} ngModule\n * @param {?} extraProviders\n * @param {?} sourceSpan\n */\nconstructor(\nprivate reflector: CompileReflector, ngModule: CompileNgModuleMetadata,\n      extraProviders: CompileProviderMetadata[], sourceSpan: ParseSourceSpan) {\n    this._allProviders = new Map<any, ProviderAst>();\n    ngModule.transitiveModule.modules.forEach((ngModuleType: CompileTypeMetadata) => {\n      const /** @type {?} */ ngModuleProvider = {token: {identifier: ngModuleType}, useClass: ngModuleType};\n      _resolveProviders(\n          [ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors,\n          this._allProviders);\n    });\n    _resolveProviders(\n        ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders),\n        ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n  }\n/**\n * @return {?}\n */\nparse(): ProviderAst[] {\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.token, provider.eager);\n    });\n    if (this._errors.length > 0) {\n      const /** @type {?} */ errorString = this._errors.join('\\n');\n      throw new Error(`Provider parse errors:\\n${errorString}`);\n    }\n    // Note: Maps keep their insertion order.\n    const /** @type {?} */ lazyProviders: ProviderAst[] = [];\n    const /** @type {?} */ eagerProviders: ProviderAst[] = [];\n    this._transformedProviders.forEach(provider => {\n      if (provider.eager) {\n        eagerProviders.push(provider);\n      } else {\n        lazyProviders.push(provider);\n      }\n    });\n    return lazyProviders.concat(eagerProviders);\n  }\n/**\n * @param {?} token\n * @param {?} eager\n * @return {?}\n */\n\nprivate _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst|null {\n    const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider) {\n      return null;\n    }\n    let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this._errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`,\n          resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\n      let /** @type {?} */ transformedUseValue = provider.useValue;\n      let /** @type {?} */ transformedUseExisting = /** @type {?} */(( provider.useExisting));\n      let /** @type {?} */ transformedDeps: CompileDiDependencyMetadata[] = /** @type {?} */(( undefined));\n      if (provider.useExisting != null) {\n        const /** @type {?} */ existingDiDep =\n            this._getDependency({token: provider.useExisting}, eager, resolvedProvider.sourceSpan);\n        if (existingDiDep.token != null) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = /** @type {?} */(( null));\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (provider.useClass) {\n        const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n/**\n * @param {?} dep\n * @param {?=} eager\n * @param {?=} requestorSourceSpan\n * @return {?}\n */\n\nprivate _getDependency(\n      dep: CompileDiDependencyMetadata, eager: boolean = false,\n      requestorSourceSpan: ParseSourceSpan): CompileDiDependencyMetadata {\n    let /** @type {?} */ foundLocal = false;\n    if (!dep.isSkipSelf && dep.token != null) {\n      // access the injector\n      if (tokenReference(dep.token) ===\n              this.reflector.resolveExternalReference(Identifiers.Injector) ||\n          tokenReference(dep.token) ===\n              this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) {\n        foundLocal = true;\n        // access providers\n      } else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {\n        foundLocal = true;\n      }\n    }\n    let /** @type {?} */ result: CompileDiDependencyMetadata = dep;\n    if (dep.isSelf && !foundLocal) {\n      if (dep.isOptional) {\n        result = {isValue: true, value: null};\n      } else {\n        this._errors.push(\n            new ProviderError(`No provider for ${tokenName(( /** @type {?} */((dep.token))))}`, requestorSourceSpan));\n      }\n    }\n    return result;\n  }\n}\n\nfunction NgModuleProviderAnalyzer_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._transformedProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._seenProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._allProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._errors;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype.reflector;\n}\n\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return {\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  };\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(\n      provider.token, provider.multiProvider, provider.eager || eager, providers,\n      provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n}\n/**\n * @param {?} directives\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @return {?}\n */\nfunction _resolveProvidersFromDirectives(\n    directives: CompileDirectiveSummary[], sourceSpan: ParseSourceSpan,\n    targetErrors: ParseError[]): Map<any, ProviderAst> {\n  const /** @type {?} */ providersByToken = new Map<any, ProviderAst>();\n  directives.forEach((directive) => {\n    const /** @type {?} */ dirProvider:\n        CompileProviderMetadata = {token: {identifier: directive.type}, useClass: directive.type};\n    _resolveProviders(\n        [dirProvider],\n        directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true,\n        sourceSpan, targetErrors, providersByToken);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  const /** @type {?} */ directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(\n        directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors,\n        providersByToken);\n    _resolveProviders(\n        directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors,\n        providersByToken);\n  });\n  return providersByToken;\n}\n/**\n * @param {?} providers\n * @param {?} providerType\n * @param {?} eager\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @param {?} targetProvidersByToken\n * @return {?}\n */\nfunction _resolveProviders(\n    providers: CompileProviderMetadata[], providerType: ProviderAstType, eager: boolean,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProvidersByToken: Map<any, ProviderAst>) {\n  providers.forEach((provider) => {\n    let /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n    if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`,\n          sourceSpan));\n    }\n    if (!resolvedProvider) {\n      const /** @type {?} */ lifecycleHooks = provider.token.identifier &&\n              ( /** @type {?} */((<CompileTypeMetadata>provider.token.identifier))).lifecycleHooks ?\n          ( /** @type {?} */((<CompileTypeMetadata>provider.token.identifier))).lifecycleHooks :\n          [];\n      const /** @type {?} */ isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\n      resolvedProvider = new ProviderAst(\n          provider.token, !!provider.multi, eager || isUseValue, [provider], providerType,\n          lifecycleHooks, sourceSpan);\n      targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        resolvedProvider.providers.length = 0;\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction _getViewQueries(component: CompileDirectiveMetadata): Map<any, QueryWithId[]> {\n  // Note: queries start with id 1 so we can use the number in a Bloom filter!\n  let /** @type {?} */ viewQueryId = 1;\n  const /** @type {?} */ viewQueries = new Map<any, QueryWithId[]>();\n  if (component.viewQueries) {\n    component.viewQueries.forEach(\n        (query) => _addQueryToTokenMap(viewQueries, {meta: query, queryId: viewQueryId++}));\n  }\n  return viewQueries;\n}\n/**\n * @param {?} contentQueryStartId\n * @param {?} directives\n * @return {?}\n */\nfunction _getContentQueries(\n    contentQueryStartId: number, directives: CompileDirectiveSummary[]): Map<any, QueryWithId[]> {\n  let /** @type {?} */ contentQueryId = contentQueryStartId;\n  const /** @type {?} */ contentQueries = new Map<any, QueryWithId[]>();\n  directives.forEach((directive, directiveIndex) => {\n    if (directive.queries) {\n      directive.queries.forEach(\n          (query) => _addQueryToTokenMap(contentQueries, {meta: query, queryId: contentQueryId++}));\n    }\n  });\n  return contentQueries;\n}\n/**\n * @param {?} map\n * @param {?} query\n * @return {?}\n */\nfunction _addQueryToTokenMap(map: Map<any, QueryWithId[]>, query: QueryWithId) {\n  query.meta.selectors.forEach((token: CompileTokenMetadata) => {\n    let /** @type {?} */ entry = map.get(tokenReference(token));\n    if (!entry) {\n      entry = [];\n      map.set(tokenReference(token), entry);\n    }\n    entry.push(query);\n  });\n}\n"]}