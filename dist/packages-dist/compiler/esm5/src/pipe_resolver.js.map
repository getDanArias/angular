{"version":3,"sources":["../../../../../packages/compiler/src/pipe_resolver.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,IAAE,EAAW,iBAAA,EAAmB,UAAA,IAAc,SAAA,EAAU,MAAA,eAAA,CAAA;AAO/D,OALO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AAMzB,OALO,EAAA,QAAE,EAAQ,MAAA,sBAAA,CAAA;AAMjB,OALO,EAAA,kBAAE,EAAkB,MAAA,cAAA,CAAA;AAM3B;;;GAGG;AACH,yBARyB,IAAM;IAS7B,MAAM,CARC,IAAA,YAAgB,IAAA,CAAK;AAS9B,CAAC;AACD;;;;;;GAMG;AACH;IACA;;OAEG;IACH,sBATsB,UAAY;QAAZ,eAAA,GAAA,UAAA,CAAY;IAAkB,CAAA;IAUpD;;;OAGG;IACH,6BAZG,GAYH,UAZS,IAAe;QAapB,IAAM,gBAAgB,CAZhB,YAAA,GAAe,IAAA,CAAK,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,IAAC,CAAI,CAAC,CAAC;QAa1E,MAAI,CAZG,YAAA,IAAgB,YAAA,CAAa,IAAC,CAAI,eAAC,CAAe,CAAC;IAa5D,CAAC;IACH;;;;;OAKG;IACH,8BAdG,GAcH,UAdU,IAAe,EAAE,eAAkB;QAAlB,gCAAA,EAAA,sBAAkB;QAezC,IAAM,gBAAgB,CAdhB,KAAA,GAAQ,IAAA,CAAK,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,IAAC,CAAI,CAAC,CAAC;QAenE,EAAE,CAAC,CAAC,KAdC,CAAK,CAAC,CAAA;YAeT,IAAM,gBAAgB,CAdhB,UAAA,GAAa,QAAA,CAAS,KAAC,EAAM,eAAA,CAAgB,CAAC;YAepD,EAAE,CAAC,CAAC,UAdC,CAAU,CAAC,CAAA;gBAed,MAAM,CAdC,UAAA,CAAW;YAQxB,CAAA;QAQE,CAAC;QACD,EAAE,CAAC,CAAC,eAdC,CAAe,CAAC,CAAA;YAenB,MAdM,IAAI,KAAA,CAAM,gCAAC,SAA8B,CAAS,IAAC,CAAK,CAAE,CAAC;QAenE,CAAC;QACD,MAAM,CAdC,IAAA,CAAK;IAed,CAAC;IAQH,mBArBC;AAqBD,CAvCA,AAkBC;;AAAM,uBAAA,GAA+C;IAetD,EAdE,IAAA,EAAM,kBAAA,EA1BN;CAyCD,CAdC;AAeF,kBAAkB;AAbX,2BAAA,GAA4F,cAAM,OAAA;IAezG,EAAC,IAdC,EAAK,gBAAA,GAAiB;CAevB,EAhBwG,CAgBxG,CAdC;AAiBF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;AAClC,CAAC","file":"pipe_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, Type, resolveForwardRef, Éµstringify as stringify} from '@angular/core';\n\nimport {CompileReflector} from './compile_reflector';\nimport {findLast} from './directive_resolver';\nimport {CompilerInjectable} from './injectable';\n/**\n * @param {?} type\n * @return {?}\n */\nfunction _isPipeMetadata(type: any): boolean {\n  return type instanceof Pipe;\n}\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n * \n * This interface can be overridden by the application developer to create custom behavior.\n * \n * See {\\@link Compiler}\n */\nexport class PipeResolver {\n/**\n * @param {?} _reflector\n */\nconstructor(private _reflector: CompileReflector) {}\n/**\n * @param {?} type\n * @return {?}\n */\nisPipe(type: Type<any>) {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(_isPipeMetadata);\n  }\n/**\n * Return {\\@link Pipe} for a given `Type`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Pipe|null {\n    const /** @type {?} */ metas = this._reflector.annotations(resolveForwardRef(type));\n    if (metas) {\n      const /** @type {?} */ annotation = findLast(metas, _isPipeMetadata);\n      if (annotation) {\n        return annotation;\n      }\n    }\n    if (throwIfNotFound) {\n      throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n    }\n    return null;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: CompilerInjectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: CompileReflector, },\n];\n}\n\nfunction PipeResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nPipeResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPipeResolver.ctorParameters;\n/** @type {?} */\nPipeResolver.prototype._reflector;\n}\n\n"]}