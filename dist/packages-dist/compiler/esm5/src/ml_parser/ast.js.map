{"version":3,"sources":["../../../../../../packages/compiler/src/ml_parser/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {ParseSourceSpan} from '../parse_util';\n/**\n * @record\n */\nexport function Node() {}\n\n\nfunction Node_tsickle_Closure_declarations() {\n/** @type {?} */\nNode.prototype.sourceSpan;\n/** @type {?} */\nNode.prototype.visit;\n}\n\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context: any): any;\n}\nexport class Text implements Node {\n/**\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nfunction Text_tsickle_Closure_declarations() {\n/** @type {?} */\nText.prototype.value;\n/** @type {?} */\nText.prototype.sourceSpan;\n}\n\nexport class Expansion implements Node {\n/**\n * @param {?} switchValue\n * @param {?} type\n * @param {?} cases\n * @param {?} sourceSpan\n * @param {?} switchValueSourceSpan\n */\nconstructor(\npublic switchValue: string,\npublic type: string,\npublic cases: ExpansionCase[],\npublic sourceSpan: ParseSourceSpan,\npublic switchValueSourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitExpansion(this, context); }\n}\n\nfunction Expansion_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansion.prototype.switchValue;\n/** @type {?} */\nExpansion.prototype.type;\n/** @type {?} */\nExpansion.prototype.cases;\n/** @type {?} */\nExpansion.prototype.sourceSpan;\n/** @type {?} */\nExpansion.prototype.switchValueSourceSpan;\n}\n\nexport class ExpansionCase implements Node {\n/**\n * @param {?} value\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} valueSourceSpan\n * @param {?} expSourceSpan\n */\nconstructor(\npublic value: string,\npublic expression: Node[],\npublic sourceSpan: ParseSourceSpan,\npublic valueSourceSpan: ParseSourceSpan,\npublic expSourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitExpansionCase(this, context); }\n}\n\nfunction ExpansionCase_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionCase.prototype.value;\n/** @type {?} */\nExpansionCase.prototype.expression;\n/** @type {?} */\nExpansionCase.prototype.sourceSpan;\n/** @type {?} */\nExpansionCase.prototype.valueSourceSpan;\n/** @type {?} */\nExpansionCase.prototype.expSourceSpan;\n}\n\nexport class Attribute implements Node {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?=} valueSpan\n */\nconstructor(\npublic name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan,\npublic valueSpan?: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitAttribute(this, context); }\n}\n\nfunction Attribute_tsickle_Closure_declarations() {\n/** @type {?} */\nAttribute.prototype.name;\n/** @type {?} */\nAttribute.prototype.value;\n/** @type {?} */\nAttribute.prototype.sourceSpan;\n/** @type {?} */\nAttribute.prototype.valueSpan;\n}\n\nexport class Element implements Node {\n/**\n * @param {?} name\n * @param {?} attrs\n * @param {?} children\n * @param {?} sourceSpan\n * @param {?=} startSourceSpan\n * @param {?=} endSourceSpan\n */\nconstructor(\npublic name: string,\npublic attrs: Attribute[],\npublic children: Node[],\npublic sourceSpan: ParseSourceSpan,\npublic startSourceSpan: ParseSourceSpan|null = null,\npublic endSourceSpan: ParseSourceSpan|null = null) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitElement(this, context); }\n}\n\nfunction Element_tsickle_Closure_declarations() {\n/** @type {?} */\nElement.prototype.name;\n/** @type {?} */\nElement.prototype.attrs;\n/** @type {?} */\nElement.prototype.children;\n/** @type {?} */\nElement.prototype.sourceSpan;\n/** @type {?} */\nElement.prototype.startSourceSpan;\n/** @type {?} */\nElement.prototype.endSourceSpan;\n}\n\nexport class Comment implements Node {\n/**\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public value: string|null,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitComment(this, context); }\n}\n\nfunction Comment_tsickle_Closure_declarations() {\n/** @type {?} */\nComment.prototype.value;\n/** @type {?} */\nComment.prototype.sourceSpan;\n}\n\n/**\n * @record\n */\nexport function Visitor() {}\n\n\nfunction Visitor_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nVisitor.prototype.visit;\n/** @type {?} */\nVisitor.prototype.visitElement;\n/** @type {?} */\nVisitor.prototype.visitAttribute;\n/** @type {?} */\nVisitor.prototype.visitText;\n/** @type {?} */\nVisitor.prototype.visitComment;\n/** @type {?} */\nVisitor.prototype.visitExpansion;\n/** @type {?} */\nVisitor.prototype.visitExpansionCase;\n}\n\n\nexport interface Visitor {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node, context: any): any;\n\n  visitElement(element: Element, context: any): any;\n  visitAttribute(attribute: Attribute, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n  visitExpansion(expansion: Expansion, context: any): any;\n  visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\n/**\n * @param {?} visitor\n * @param {?} nodes\n * @param {?=} context\n * @return {?}\n */\nexport function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[] {\n  const /** @type {?} */ result: any[] = [];\n\n  const /** @type {?} */ visit = visitor.visit ?\n      (ast: Node) => /** @type {?} */(( visitor.visit))(ast, context) || ast.visit(visitor, context) :\n      (ast: Node) => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const /** @type {?} */ astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\nexport class RecursiveVisitor implements Visitor {\nconstructor() {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitElement(ast: Element, context: any): any {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(ast: Attribute, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitText(ast: Text, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitComment(ast: Comment, context: any): any {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(ast: Expansion, context: any): any {\n    return this.visitChildren(context, visit => { visit(ast.cases); });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(ast: ExpansionCase, context: any): any {}\n/**\n * @template T\n * @param {?} context\n * @param {?} cb\n * @return {?}\n */\n\nprivate visitChildren<T extends Node>(\n      context: any, cb: (visit: (<V extends Node>(children: V[]|undefined) => void)) => void) {\n    let /** @type {?} */ results: any[][] = [];\n    let /** @type {?} */ t = this;\n/**\n * @template T\n * @param {?} children\n * @return {?}\n */\nfunction visit<T extends Node>(children: T[] | undefined) {\n      if (children) results.push(visitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nexport type HtmlAstPath = AstPath<Node>;\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction spanOf(ast: Node) {\n  const /** @type {?} */ start = ast.sourceSpan.start.offset;\n  let /** @type {?} */ end = ast.sourceSpan.end.offset;\n  if (ast instanceof Element) {\n    if (ast.endSourceSpan) {\n      end = ast.endSourceSpan.end.offset;\n    } else if (ast.children && ast.children.length) {\n      end = spanOf(ast.children[ast.children.length - 1]).end;\n    }\n  }\n  return {start, end};\n}\n/**\n * @param {?} nodes\n * @param {?} position\n * @return {?}\n */\nexport function findNode(nodes: Node[], position: number): HtmlAstPath {\n  const /** @type {?} */ path: Node[] = [];\n\n  const /** @type {?} */ visitor = new class extends RecursiveVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisit(ast: Node, context: any): any {\n      const /** @type {?} */ span = spanOf(ast);\n      if (span.start <= position && position < span.end) {\n        path.push(ast);\n      } else {\n        // Returning a value here will result in the children being skipped.\n        return true;\n      }\n    }\n  };\n\n  visitAll(visitor, nodes);\n\n  return new AstPath<Node>(path, position);\n}"]}