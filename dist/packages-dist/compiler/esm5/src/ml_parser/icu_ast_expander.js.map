{"version":3,"sources":["../../../../../../packages/compiler/src/ml_parser/icu_ast_expander.ts"],"names":[],"mappings":"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","file":"icu_ast_expander.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseError, ParseSourceSpan} from '../parse_util';\n\nimport * as html from './ast';\n\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\nconst /** @type {?} */ PLURAL_CASES: string[] = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\n * Expands special forms into elements.\n * \n * For example,\n * \n * ```\n * { messages.length, plural,\n *   =0 {zero}\n *   =1 {one}\n *   other {more than one}\n * }\n * ```\n * \n * will be expanded into\n * \n * ```\n * <ng-container [ngPlural]=\"messages.length\">\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n * </ng-container>\n * ```\n * @param {?} nodes\n * @return {?}\n */\nexport function expandNodes(nodes: html.Node[]): ExpansionResult {\n  const /** @type {?} */ expander = new _Expander();\n  return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);\n}\nexport class ExpansionResult {\n/**\n * @param {?} nodes\n * @param {?} expanded\n * @param {?} errors\n */\nconstructor(public nodes: html.Node[],\npublic expanded: boolean,\npublic errors: ParseError[]) {}\n}\n\nfunction ExpansionResult_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionResult.prototype.nodes;\n/** @type {?} */\nExpansionResult.prototype.expanded;\n/** @type {?} */\nExpansionResult.prototype.errors;\n}\n\nexport class ExpansionError extends ParseError {\n/**\n * @param {?} span\n * @param {?} errorMsg\n */\nconstructor(span: ParseSourceSpan, errorMsg: string) { super(span, errorMsg); }\n}\n/**\n * Expand expansion forms (plural, select) to directives\n * \n * \\@internal\n */\nclass _Expander implements html.Visitor {\n  isExpanded: boolean = false;\n  errors: ParseError[] = [];\n/**\n * @param {?} element\n * @param {?} context\n * @return {?}\n */\nvisitElement(element: html.Element, context: any): any {\n    return new html.Element(\n        element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan,\n        element.startSourceSpan, element.endSourceSpan);\n  }\n/**\n * @param {?} attribute\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(attribute: html.Attribute, context: any): any { return attribute; }\n/**\n * @param {?} text\n * @param {?} context\n * @return {?}\n */\nvisitText(text: html.Text, context: any): any { return text; }\n/**\n * @param {?} comment\n * @param {?} context\n * @return {?}\n */\nvisitComment(comment: html.Comment, context: any): any { return comment; }\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(icu: html.Expansion, context: any): any {\n    this.isExpanded = true;\n    return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n                                  _expandDefaultForm(icu, this.errors);\n  }\n/**\n * @param {?} icuCase\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    throw new Error('Should not be reached');\n  }\n}\n\nfunction _Expander_tsickle_Closure_declarations() {\n/** @type {?} */\n_Expander.prototype.isExpanded;\n/** @type {?} */\n_Expander.prototype.errors;\n}\n\n/**\n * @param {?} ast\n * @param {?} errors\n * @return {?}\n */\nfunction _expandPluralForm(ast: html.Expansion, errors: ParseError[]): html.Element {\n  const /** @type {?} */ children = ast.cases.map(c => {\n    if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n      errors.push(new ExpansionError(\n          c.valueSourceSpan,\n          `Plural cases should be \"=<number>\" or one of ${PLURAL_CASES.join(\", \")}`));\n    }\n\n    const /** @type {?} */ expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    return new html.Element(\n        `ng-template`, [new html.Attribute('ngPluralCase', `${c.value}`, c.valueSourceSpan)],\n        expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const /** @type {?} */ switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n  return new html.Element(\n      'ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n/**\n * @param {?} ast\n * @param {?} errors\n * @return {?}\n */\nfunction _expandDefaultForm(ast: html.Expansion, errors: ParseError[]): html.Element {\n  const /** @type {?} */ children = ast.cases.map(c => {\n    const /** @type {?} */ expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    if (c.value === 'other') {\n      // other is the default case when no values match\n      return new html.Element(\n          `ng-template`, [new html.Attribute('ngSwitchDefault', '', c.valueSourceSpan)],\n          expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    }\n\n    return new html.Element(\n        `ng-template`, [new html.Attribute('ngSwitchCase', `${c.value}`, c.valueSourceSpan)],\n        expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const /** @type {?} */ switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n  return new html.Element(\n      'ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n"]}