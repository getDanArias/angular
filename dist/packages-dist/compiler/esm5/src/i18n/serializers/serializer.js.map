{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/serializers/serializer.ts"],"names":[],"mappings":"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","file":"serializer.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from '../i18n_ast';\n/**\n * @abstract\n */\nexport abstract class Serializer {\n  // - The `placeholders` and `placeholderToMessage` properties are irrelevant in the input messages\n  // - The `id` contains the message id that the serializer is expected to use\n  // - Placeholder names are already map to public names using the provided mapper\n  abstract write(messages: i18n.Message[], locale: string|null): string;\n\n  abstract load(content: string, url: string):\n      {locale: string | null, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};\n\n  abstract digest(message: i18n.Message): string;\n/**\n * @param {?} message\n * @return {?}\n */\ncreateNameMapper(message: i18n.Message): PlaceholderMapper|null { return null; }\n}\n\nfunction Serializer_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} messages\n * @param {?} locale\n * @return {?}\n */\nSerializer.prototype.write = function(messages, locale) {};\n\n/**\n * @abstract\n * @param {?} content\n * @param {?} url\n * @return {?}\n */\nSerializer.prototype.load = function(content, url) {};\n\n/**\n * @abstract\n * @param {?} message\n * @return {?}\n */\nSerializer.prototype.digest = function(message) {};\n}\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n * \n * It should be used for serialization format that put constraints on the placeholder names.\n * @record\n */\nexport function PlaceholderMapper() {}\n\n\nfunction PlaceholderMapper_tsickle_Closure_declarations() {\n/** @type {?} */\nPlaceholderMapper.prototype.toPublicName;\n/** @type {?} */\nPlaceholderMapper.prototype.toInternalName;\n}\n\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n  toPublicName(internalName: string): string|null;\n\n  toInternalName(publicName: string): string|null;\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport class SimplePlaceholderMapper extends i18n.RecurseVisitor implements PlaceholderMapper {\nprivate internalToPublic: {[k: string]: string} = {};\nprivate publicToNextId: {[k: string]: number} = {};\nprivate publicToInternal: {[k: string]: string} = {};\n/**\n * @param {?} message\n * @param {?} mapName\n */\nconstructor(message: i18n.Message,\nprivate mapName: (name: string) => string) {\n    super();\n    message.nodes.forEach(node => node.visit(this));\n  }\n/**\n * @param {?} internalName\n * @return {?}\n */\ntoPublicName(internalName: string): string|null {\n    return this.internalToPublic.hasOwnProperty(internalName) ?\n        this.internalToPublic[internalName] :\n        null;\n  }\n/**\n * @param {?} publicName\n * @return {?}\n */\ntoInternalName(publicName: string): string|null {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n                                                              null;\n  }\n/**\n * @param {?} text\n * @param {?=} context\n * @return {?}\n */\nvisitText(text: i18n.Text, context?: any): any { return null; }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitPlaceholder(ph: i18n.Placeholder, context?: any): any { this.visitPlaceholderName(ph.name); }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.name);\n  }\n/**\n * @param {?} internalName\n * @return {?}\n */\n\nprivate visitPlaceholderName(internalName: string): void {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n\n    let /** @type {?} */ publicName = this.mapName(internalName);\n\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const /** @type {?} */ nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n}\n\nfunction SimplePlaceholderMapper_tsickle_Closure_declarations() {\n/** @type {?} */\nSimplePlaceholderMapper.prototype.internalToPublic;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.publicToNextId;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.publicToInternal;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.mapName;\n}\n\n"]}