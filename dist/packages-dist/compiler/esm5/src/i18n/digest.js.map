{"version":3,"sources":["../../../../../../packages/compiler/src/i18n/digest.ts"],"names":[],"mappings":"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","file":"digest.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {utf8Encode} from '../util';\n\nimport * as i18n from './i18n_ast';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message: i18n.Message): string {\n  return message.id || sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n/**\n * @param {?} message\n * @return {?}\n */\nexport function decimalDigest(message: i18n.Message): string {\n  if (message.id) {\n    return message.id;\n  }\n\n  const /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();\n  const /** @type {?} */ parts = message.nodes.map(a => a.visit(visitor, null));\n  return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n * \n * The visitor is also used in the i18n parser tests\n * \n * \\@internal\n */\nclass _SerializerVisitor implements i18n.Visitor {\n/**\n * @param {?} text\n * @param {?} context\n * @return {?}\n */\nvisitText(text: i18n.Text, context: any): any { return text.value; }\n/**\n * @param {?} container\n * @param {?} context\n * @return {?}\n */\nvisitContainer(container: i18n.Container, context: any): any {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitIcu(icu: i18n.Icu, context: any): any {\n    const /** @type {?} */ strCases =\n        Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n/**\n * @param {?} ph\n * @param {?} context\n * @return {?}\n */\nvisitTagPlaceholder(ph: i18n.TagPlaceholder, context: any): any {\n    return ph.isVoid ?\n        `<ph tag name=\"${ph.startName}\"/>` :\n        `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n/**\n * @param {?} ph\n * @param {?} context\n * @return {?}\n */\nvisitPlaceholder(ph: i18n.Placeholder, context: any): any {\n    return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n}\n\nconst /** @type {?} */ serializerVisitor = new _SerializerVisitor();\n/**\n * @param {?} nodes\n * @return {?}\n */\nexport function serializeNodes(nodes: i18n.Node[]): string[] {\n  return nodes.map(a => a.visit(serializerVisitor, null));\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n * \n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n * \n * \\@internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitIcu(icu: i18n.Icu, context: any): any {\n    let /** @type {?} */ strCases = Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    // Do not take the expression into account\n    return `{${icu.type}, ${strCases.join(', ')}}`;\n  }\n}\n/**\n * Compute the SHA1 of the given string\n * \n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n * \n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n * @param {?} str\n * @return {?}\n */\nexport function sha1(str: string): string {\n  const /** @type {?} */ utf8 = utf8Encode(str);\n  const /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);\n  const /** @type {?} */ len = utf8.length * 8;\n\n  const /** @type {?} */ w = new Array(80);\n  let [a, b, c, d, e]: number[] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  words32[len >> 5] |= 0x80 << (24 - len % 32);\n  words32[((len + 64 >> 9) << 4) + 15] = len;\n\n  for (let /** @type {?} */ i = 0; i < words32.length; i += 16) {\n    const [h0, h1, h2, h3, h4]: number[] = [a, b, c, d, e];\n\n    for (let /** @type {?} */ j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      const [f, k] = fk(j, b, c, d);\n      const /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\n    }\n\n    [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\n  }\n\n  return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n}\n/**\n * @param {?} index\n * @param {?} b\n * @param {?} c\n * @param {?} d\n * @return {?}\n */\nfunction fk(index: number, b: number, c: number, d: number): [number, number] {\n  if (index < 20) {\n    return [(b & c) | (~b & d), 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n    return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n * \n * The output is 64 bit number encoded as a decimal string\n * \n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n * @param {?} str\n * @return {?}\n */\nexport function fingerprint(str: string): [number, number] {\n  const /** @type {?} */ utf8 = utf8Encode(str);\n\n  let [hi, lo] = [hash32(utf8, 0), hash32(utf8, 102072)];\n\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n\n  return [hi, lo];\n}\n/**\n * @param {?} msg\n * @param {?} meaning\n * @return {?}\n */\nexport function computeMsgId(msg: string, meaning: string): string {\n  let [hi, lo] = fingerprint(msg);\n\n  if (meaning) {\n    const [him, lom] = fingerprint(meaning);\n    [hi, lo] = add64(rol64([hi, lo], 1), [him, lom]);\n  }\n\n  return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n}\n/**\n * @param {?} str\n * @param {?} c\n * @return {?}\n */\nfunction hash32(str: string, c: number): number {\n  let [a, b] = [0x9e3779b9, 0x9e3779b9];\n  let /** @type {?} */ i: number;\n\n  const /** @type {?} */ len = str.length;\n\n  for (i = 0; i + 12 <= len; i += 12) {\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    c = add32(c, wordAt(str, i + 8, Endian.Little));\n    [a, b, c] = mix([a, b, c]);\n  }\n\n  a = add32(a, wordAt(str, i, Endian.Little));\n  b = add32(b, wordAt(str, i + 4, Endian.Little));\n  // the first byte of c is reserved for the length\n  c = add32(c, len);\n  c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n\n  return mix([a, b, c])[2];\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction mix([a, b, c]: [number, number, number]): [number, number, number] {\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 13;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 8;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 13;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 12;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 16;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 5;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 3;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 10;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 15;\n  return [a, b, c];\n}\ntype Endian = number;\nlet Endian: any = {};\nEndian.Little = 0;\nEndian.Big = 1;\nEndian[Endian.Little] = \"Little\";\nEndian[Endian.Big] = \"Big\";\n\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32(a: number, b: number): number {\n  return add32to64(a, b)[1];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32to64(a: number, b: number): [number, number] {\n  const /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);\n  const /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n/**\n * @param {?} __0\n * @param {?} __1\n * @return {?}\n */\nfunction add64([ah, al]: [number, number], [bh, bl]: [number, number]): [number, number] {\n  const [carry, l] = add32to64(al, bl);\n  const /** @type {?} */ h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sub32(a: number, b: number): number {\n  const /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);\n  const /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);\n  return (high << 16) | (low & 0xffff);\n}\n/**\n * @param {?} a\n * @param {?} count\n * @return {?}\n */\nfunction rol32(a: number, count: number): number {\n  return (a << count) | (a >>> (32 - count));\n}\n/**\n * @param {?} __0\n * @param {?} count\n * @return {?}\n */\nfunction rol64([hi, lo]: [number, number], count: number): [number, number] {\n  const /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));\n  const /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));\n  return [h, l];\n}\n/**\n * @param {?} str\n * @param {?} endian\n * @return {?}\n */\nfunction stringToWords32(str: string, endian: Endian): number[] {\n  const /** @type {?} */ words32 = Array((str.length + 3) >>> 2);\n\n  for (let /** @type {?} */ i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(str, i * 4, endian);\n  }\n\n  return words32;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @return {?}\n */\nfunction byteAt(str: string, index: number): number {\n  return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @param {?} endian\n * @return {?}\n */\nfunction wordAt(str: string, index: number, endian: Endian): number {\n  let /** @type {?} */ word = 0;\n  if (endian === Endian.Big) {\n    for (let /** @type {?} */ i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << (24 - 8 * i);\n    }\n  } else {\n    for (let /** @type {?} */ i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\n/**\n * @param {?} words32\n * @return {?}\n */\nfunction words32ToByteString(words32: number[]): string {\n  return words32.reduce((str, word) => str + word32ToByteString(word), '');\n}\n/**\n * @param {?} word\n * @return {?}\n */\nfunction word32ToByteString(word: number): string {\n  let /** @type {?} */ str = '';\n  for (let /** @type {?} */ i = 0; i < 4; i++) {\n    str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n  }\n  return str;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToHexString(str: string): string {\n  let /** @type {?} */ hex: string = '';\n  for (let /** @type {?} */ i = 0; i < str.length; i++) {\n    const /** @type {?} */ b = byteAt(str, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n  return hex.toLowerCase();\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToDecString(str: string): string {\n  let /** @type {?} */ decimal = '';\n  let /** @type {?} */ toThePower = '1';\n\n  for (let /** @type {?} */ i = str.length - 1; i >= 0; i--) {\n    decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n    toThePower = numberTimesBigInt(256, toThePower);\n  }\n\n  return decimal.split('').reverse().join('');\n}\n/**\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction addBigInt(x: string, y: string): string {\n  let /** @type {?} */ sum = '';\n  const /** @type {?} */ len = Math.max(x.length, y.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {\n    const /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n    if (tmpSum >= 10) {\n      carry = 1;\n      sum += tmpSum - 10;\n    } else {\n      carry = 0;\n      sum += tmpSum;\n    }\n  }\n\n  return sum;\n}\n/**\n * @param {?} num\n * @param {?} b\n * @return {?}\n */\nfunction numberTimesBigInt(num: number, b: string): string {\n  let /** @type {?} */ product = '';\n  let /** @type {?} */ bToThePower = b;\n  for (; num !== 0; num = num >>> 1) {\n    if (num & 1) product = addBigInt(product, bToThePower);\n    bToThePower = addBigInt(bToThePower, bToThePower);\n  }\n  return product;\n}\n"]}