{"version":3,"sources":["../../../../../../packages/compiler/src/i18n/i18n_parser.ts"],"names":[],"mappings":"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","file":"i18n_parser.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Lexer as ExpressionLexer} from '../expression_parser/lexer';\nimport {Parser as ExpressionParser} from '../expression_parser/parser';\nimport * as html from '../ml_parser/ast';\nimport {getHtmlTagDefinition} from '../ml_parser/html_tags';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseSourceSpan} from '../parse_util';\n\nimport * as i18n from './i18n_ast';\nimport {PlaceholderRegistry} from './serializers/placeholder';\n\nconst /** @type {?} */ _expParser = new ExpressionParser(new ExpressionLexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n * @param {?} interpolationConfig\n * @return {?}\n */\nexport function createI18nMessageFactory(interpolationConfig: InterpolationConfig): (\n    nodes: html.Node[], meaning: string, description: string, id: string) => i18n.Message {\n  const /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);\n\n  return (nodes: html.Node[], meaning: string, description: string, id: string) =>\n             visitor.toI18nMessage(nodes, meaning, description, id);\n}\nclass _I18nVisitor implements html.Visitor {\nprivate _isIcu: boolean;\nprivate _icuDepth: number;\nprivate _placeholderRegistry: PlaceholderRegistry;\nprivate _placeholderToContent: {[phName: string]: string};\nprivate _placeholderToMessage: {[phName: string]: i18n.Message};\n/**\n * @param {?} _expressionParser\n * @param {?} _interpolationConfig\n */\nconstructor(\nprivate _expressionParser: ExpressionParser,\nprivate _interpolationConfig: InterpolationConfig) {}\n/**\n * @param {?} nodes\n * @param {?} meaning\n * @param {?} description\n * @param {?} id\n * @return {?}\n */\n\npublic toI18nMessage(nodes: html.Node[], meaning: string, description: string, id: string):\n      i18n.Message {\n    this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;\n    this._icuDepth = 0;\n    this._placeholderRegistry = new PlaceholderRegistry();\n    this._placeholderToContent = {};\n    this._placeholderToMessage = {};\n\n    const /** @type {?} */ i18nodes: i18n.Node[] = html.visitAll(this, nodes, {});\n\n    return new i18n.Message(\n        i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n  }\n/**\n * @param {?} el\n * @param {?} context\n * @return {?}\n */\nvisitElement(el: html.Element, context: any): i18n.Node {\n    const /** @type {?} */ children = html.visitAll(this, el.children);\n    const /** @type {?} */ attrs: {[k: string]: string} = {};\n    el.attrs.forEach(attr => {\n      // Do not visit the attributes, translatable ones are top-level ASTs\n      attrs[attr.name] = attr.value;\n    });\n\n    const /** @type {?} */ isVoid: boolean = getHtmlTagDefinition(el.name).isVoid;\n    const /** @type {?} */ startPhName =\n        this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n    this._placeholderToContent[startPhName] = /** @type {?} */(( el.sourceSpan)).toString();\n\n    let /** @type {?} */ closePhName = '';\n\n    if (!isVoid) {\n      closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n      this._placeholderToContent[closePhName] = `</${el.name}>`;\n    }\n\n    return new i18n.TagPlaceholder(\n        el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */(( el.sourceSpan)));\n  }\n/**\n * @param {?} attribute\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(attribute: html.Attribute, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n  }\n/**\n * @param {?} text\n * @param {?} context\n * @return {?}\n */\nvisitText(text: html.Text, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(text.value, /** @type {?} */(( text.sourceSpan)));\n  }\n/**\n * @param {?} comment\n * @param {?} context\n * @return {?}\n */\nvisitComment(comment: html.Comment, context: any): i18n.Node|null { return null; }\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(icu: html.Expansion, context: any): i18n.Node {\n    this._icuDepth++;\n    const /** @type {?} */ i18nIcuCases: {[k: string]: i18n.Node} = {};\n    const /** @type {?} */ i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n    icu.cases.forEach((caze): void => {\n      i18nIcuCases[caze.value] = new i18n.Container(\n          caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);\n    });\n    this._icuDepth--;\n\n    if (this._isIcu || this._icuDepth > 0) {\n      // Returns an ICU node when:\n      // - the message (vs a part of the message) is an ICU message, or\n      // - the ICU message is nested.\n      const /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n      i18nIcu.expressionPlaceholder = expPh;\n      this._placeholderToContent[expPh] = icu.switchValue;\n\n      return i18nIcu;\n    }\n\n    // Else returns a placeholder\n    // ICU placeholders should not be replaced with their original content but with the their\n    // translations. We need to create a new visitor (they are not re-entrant) to compute the\n    // message id.\n    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n    const /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n    const /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n    this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n    return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n  }\n/**\n * @param {?} icuCase\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(icuCase: html.ExpansionCase, context: any): i18n.Node {\n    throw new Error('Unreachable code');\n  }\n/**\n * @param {?} text\n * @param {?} sourceSpan\n * @return {?}\n */\n\nprivate _visitTextWithInterpolation(text: string, sourceSpan: ParseSourceSpan): i18n.Node {\n    const /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(\n        text, sourceSpan.start.toString(), this._interpolationConfig);\n\n    if (!splitInterpolation) {\n      // No expression, return a single text\n      return new i18n.Text(text, sourceSpan);\n    }\n\n    // Return a group of text + expressions\n    const /** @type {?} */ nodes: i18n.Node[] = [];\n    const /** @type {?} */ container = new i18n.Container(nodes, sourceSpan);\n    const {start: sDelimiter, end: eDelimiter} = this._interpolationConfig;\n\n    for (let /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {\n      const /** @type {?} */ expression = splitInterpolation.expressions[i];\n      const /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n      const /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n\n      if (splitInterpolation.strings[i].length) {\n        // No need to add empty strings\n        nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));\n      }\n\n      nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));\n      this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n    }\n\n    // The last index contains no expression\n    const /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;\n    if (splitInterpolation.strings[lastStringIdx].length) {\n      nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));\n    }\n    return container;\n  }\n}\n\nfunction _I18nVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\n_I18nVisitor.prototype._isIcu;\n/** @type {?} */\n_I18nVisitor.prototype._icuDepth;\n/** @type {?} */\n_I18nVisitor.prototype._placeholderRegistry;\n/** @type {?} */\n_I18nVisitor.prototype._placeholderToContent;\n/** @type {?} */\n_I18nVisitor.prototype._placeholderToMessage;\n/** @type {?} */\n_I18nVisitor.prototype._expressionParser;\n/** @type {?} */\n_I18nVisitor.prototype._interpolationConfig;\n}\n\n\nconst /** @type {?} */ _CUSTOM_PH_EXP =\n    /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction _extractPlaceholderName(input: string): string {\n  return input.split(_CUSTOM_PH_EXP)[2];\n}\n"]}