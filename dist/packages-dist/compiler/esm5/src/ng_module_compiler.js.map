{"version":3,"sources":["../../../../../packages/compiler/src/ng_module_compiler.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAYH,OALO,EAAmD,cAAA,EAAe,MAAA,oBAAA,CAAA;AAMzE,OALO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AAMzB,OALO,EAAA,WAAE,EAAW,MAAA,eAAA,CAAA;AAMpB,OALO,EAAA,kBAAE,EAAkB,MAAA,cAAA,CAAA;AAM3B,OALO,KAAK,CAAA,MAAA,qBAAA,CAAA;AAMZ,OALO,EAAA,cAAE,EAAc,MAAA,cAAA,CAAA;AAMvB,OALO,EAAA,wBAAE,EAAwB,MAAA,qBAAA,CAAA;AAOjC,OALO,EAAA,mCAAE,EAA4C,WAAA,EAAY,MAAA,mCAAA,CAAA;AAMjE;IACA;;OAEG;IACH,+BAPqB,kBAAoB;QAApB,uBAAA,GAAA,kBAAA,CAAoB;IAAQ,CAAA;IAQjD,4BAPC;AAOD,CALA,AAFC,IAAA;;AASD;IACA,gBAAU;IACV,qBAAU,CAAA,SAAA,CAAA,kBAAwC,CAAA;AAClD,CAAC;AAGD,IAAM,gBAAI,CAbJ,OAAA,GAAU,CAAA,CAAE,QAAC,CAAQ,IAAC,CAAI,CAAC;AAcjC;IACA;;OAEG;IACH,0BAdsB,SAAW;QAAX,cAAA,GAAA,SAAA,CAAW;IAAkB,CAAA;IAenD;;;;;OAKG;IACH,kCApBG,GAoBH,UACM,GApBK,EAAe,YAAc,EAqBlC,cApBwC;QAqB1C,IAAM,gBAAA,CApBA,UAAA,GAAa,cAAA,CAAe,UAAC,EAAW,YAAA,CAAa,IAAC,CAAI,CAAC;QAqBjE,IAAM,gBAAgB,CApBhB,uBAAA,GAA0B,YAAA,CAAa,gBAAC,CAAgB,eAAC,CAAe;QAqB9E,IAAM,gBAAgB,CApBhB,mBAAA,GAAsB,YAAA,CAAa,mBAAC,CAAmB;QAqB7D,IAAM,gBAAc,CApBd,cAAA,GAqBF,IApBI,wBAAA,CAAyB,IAAC,CAAI,SAAC,EAAU,YAAA,EAAc,cAAA,EAAgB,UAAA,CAAW,CAAC;QAqB3F,IAAM,gBAAG,CApBH,YAAA,GAqBF,CAAC,mCApBC,CAqBD,IAAA,CApBS,SAAC,EAAU,GAAA,gBAAqB,uBAAA,CAAwB,CAAC;aAqB/D,MApBE,CAAM,cAAC,CAAc,KAAC,EAAK,CAAE,GAAC,CAAG,UAAC,QAAC,IAAY,OAAA,WAAA,CAAY,GAAC,EAAI,QAAA,CAAS,EAA1B,CAA0B,CAAC,CAAC;aAqB5E,GApBC,CAAG,UAAC,EAA0C;gBAAzC,8BAAC,EAAa,sBAAA,EAAU,gBAAA,EAAO,wBAAA;YAqBpC,MAAE,CApBK,CAAA,CAAE,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,CAAC,MAAC,CAAM;gBAqBxD,CAAA,CApBE,OAAC,CAAO,KAAC,CAAK,EAAE,SAAA,EAAW,YAAA,EAAc,QAAA;aAqBhD,CApBK,CAAC;QAqBX,CAAA,CApBQ,CAAC;QAsBX,IAAM,gBAAK,CApBL,WAAA,GAAc,CAAA,CAAE,UAAC,CAAU,WAAC,CAAW,SAAC,CAAS,CAAC,MAAC,CAAM,CAAC,CAAC,CAAC,UAAC,CAAU,YAAC,CAAY,CAAC,CAAC,CAAC;QAqB7F,IAAA,gBAAA,CApBM,kBAAA,GAAqB,CAAA,CAAE,EAAC,CAqB1B,CAAC,IApBI,CAAA,CAAE,OAAC,CAAO,gBAAA,CAAA,CAAA,CAAA,OAAC,CAAO,IAAC,CAAA,CAAA,CAAM,CAAC,EAAE,CAAA,IAAK,CAAA,CAAE,eAAC,CAAe,WAAC,CAAW,CAAC,EAAE,CAAA,CAAE,aAAC,CAAa,CAAC;QAsB5F,IAAM,gBAAA,CApBA,kBAAA,GAAqB,cAAI,CAAc,YAAC,CAAY,IAAC,CAAI,cAAC,CAAW;QAqB3E,IAAA,CApBK,sBAAC,CAqBF,GAAG,EApBE,YAAA,CAAa,IAAC,CAAI,SAAC,EAAU,CAAA,CAAE,UAAC,CAAU,WAAC,CAAW,mBAAC,CAAmB,CAAC,MAAC,CAAM;YAqBrF,GAAA,CApBI,UAAC,CAAU,YAAC,CAAY,IAAC,CAAI,SAAC,CAAS;YAqB3C,CAAA,CApBE,UAAC,CAAU,mBAAC,CAAmB,GAAC,CAAG,UAAA,EAAC,IAAK,OAAA,GAAA,CAAI,UAAC,CAAU,EAAC,CAAE,SAAC,CAAS,EAA5B,CAA4B,CAAC,CAAC;YAqBzE,kBAAA;SACD,CApBC,CAAC,CAAC;QAsBR,EAAE,CAAC,CAAC,YApBC,CAAY,EAAC,CAAE,CAAC,CAAA;YAqBnB,IAAM,gBAAO,CApBP,mBAAA,GAqBF,CAAC,CApBC,UAAC,CAAU,WAAC,CAAW,uBAAC,CAAuB;iBAqB5C,MApBC,CAAM,CAAC,CAAC,CAAC,OAAC,CAAO,YAAC,CAAY,EAAC,CAAE,EAAE,CAAA,CAAE,QAAC,CAAQ,kBAAC,CAAkB,CAAC,CAAC;iBAqBpE,MApBC,EAAM,CAAE;YAqBlB,GAAG,CApBC,UAAC,CAAU,IAAC,CAAI,mBAAC,CAAmB,CAAC;QAqB3C,CAAC;QAED,MAAM,CApBC,IAAI,qBAAA,CAAsB,kBAAC,CAAkB,CAAC;IAqBvD,CAAC;IACH;;;;OAIG;IACH,qCAxBG,GAwBH,UAxBa,GAAK,EAAe,iBAAmB;QAyBhD,IAAI,CAxBC,sBAAC,CAAsB,GAAC,EAAI,iBAAA,EAAmB,CAAA,CAAE,SAAC,CAAS,CAAC;IAyBnE,CAAC;IACH;;;;;OAKG;IA5BO,iDAAA,GA8BV,UA9BiC,GAAK,EAAe,SAAW,EAAK,KAAU;QA+B3E,IAAM,gBAAgB,CA9BhB,kBAAA,GAAqB,cAAI,CAAc,EAAC,SAAC,EAAU,SAAA,EAAU,CAAC,cAAC,CAAW;QA+BhF,IAAM,gBAAgB,CA9BhB,mBAAA,GA+BF,CAAC,CA9BC,QAAC,CAAQ,kBAAC,CAAkB;aA+BzB,GA9BC,CAAG,KAAC,CAAK;aA+BV,UA9BC,CA+BE,CAAC,CA9BC,UAAC,CA+BC,WAAW,CA9BC,eAAC,EAAgB,CAAA,gBAAA,CAAA,CAAA,CAAA,CAAE,CAAC,cAAC,CAAc,GAAC,CAAG,UAAC,CAAU,SAAC,CAAS,CAAC,CAAA,CAAA,CAAG,EA+B5E,CAAC,CA9BC,CAAC,YAAC,CAAY,KAAC,CAAK,CAAC,EA+B3B,CAAC,CA9BC,CAAC,YAAC,CAAY,KAAC,EAAM,CAAA,CAAE,YAAC,CAAY,QAAC,CAAQ,CAAC,CAAC;QAgC7D,GAAG,CA9BC,UAAC,CAAU,IAAC,CAAI,mBAAC,CAAmB,CAAC;IA+B3C,CAAC;IAQH,uBArCC;AAqCD,CAtFA,AAiDC;;AAAM,2BAAA,GAA+C;IA+BtD,EA9BE,IAAA,EAAM,kBAAA,EA9DN;CA6FD,CA9BC;AA+BF,kBAAkB;AA7BX,+BAAA,GAA4F,cAAM,OAAA;IA+BzG,EAAC,IA9BC,EAAK,gBAAA,GAAiB;CA+BvB,EAhCwG,CAgCxG,CA9BC;AAiCF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC;AACrC,CAAC","file":"ng_module_compiler.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ÉµNodeFlags as NodeFlags} from '@angular/core';\n\nimport {CompileNgModuleMetadata, CompileProviderMetadata, identifierName} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {Identifiers} from './identifiers';\nimport {CompilerInjectable} from './injectable';\nimport * as o from './output/output_ast';\nimport {typeSourceSpan} from './parse_util';\nimport {NgModuleProviderAnalyzer} from './provider_analyzer';\nimport {OutputContext} from './util';\nimport {componentFactoryResolverProviderDef, depDef, providerDef} from './view_compiler/provider_compiler';\nexport class NgModuleCompileResult {\n/**\n * @param {?} ngModuleFactoryVar\n */\nconstructor(public ngModuleFactoryVar: string) {}\n}\n\nfunction NgModuleCompileResult_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleCompileResult.prototype.ngModuleFactoryVar;\n}\n\n\nconst /** @type {?} */ LOG_VAR = o.variable('_l');\nexport class NgModuleCompiler {\n/**\n * @param {?} reflector\n */\nconstructor(private reflector: CompileReflector) {}\n/**\n * @param {?} ctx\n * @param {?} ngModuleMeta\n * @param {?} extraProviders\n * @return {?}\n */\ncompile(\n      ctx: OutputContext, ngModuleMeta: CompileNgModuleMetadata,\n      extraProviders: CompileProviderMetadata[]): NgModuleCompileResult {\n    const /** @type {?} */ sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n    const /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n    const /** @type {?} */ bootstrapComponents = ngModuleMeta.bootstrapComponents;\n    const /** @type {?} */ providerParser =\n        new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n    const /** @type {?} */ providerDefs =\n        [componentFactoryResolverProviderDef(\n             this.reflector, ctx, NodeFlags.None, entryComponentFactories)]\n            .concat(providerParser.parse().map((provider) => providerDef(ctx, provider)))\n            .map(({providerExpr, depsExpr, flags, tokenExpr}) => {\n              return o.importExpr(Identifiers.moduleProviderDef).callFn([\n                o.literal(flags), tokenExpr, providerExpr, depsExpr\n              ]);\n            });\n\n    const /** @type {?} */ ngModuleDef = o.importExpr(Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n    const /** @type {?} */ ngModuleDefFactory = o.fn(\n        [new o.FnParam( /** @type {?} */((LOG_VAR.name)))], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n\n    const /** @type {?} */ ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\n    this._createNgModuleFactory(\n        ctx, ngModuleMeta.type.reference, o.importExpr(Identifiers.createModuleFactory).callFn([\n          ctx.importExpr(ngModuleMeta.type.reference),\n          o.literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))),\n          ngModuleDefFactory\n        ]));\n\n    if (ngModuleMeta.id) {\n      const /** @type {?} */ registerFactoryStmt =\n          o.importExpr(Identifiers.RegisterModuleFactoryFn)\n              .callFn([o.literal(ngModuleMeta.id), o.variable(ngModuleFactoryVar)])\n              .toStmt();\n      ctx.statements.push(registerFactoryStmt);\n    }\n\n    return new NgModuleCompileResult(ngModuleFactoryVar);\n  }\n/**\n * @param {?} ctx\n * @param {?} ngModuleReference\n * @return {?}\n */\ncreateStub(ctx: OutputContext, ngModuleReference: any) {\n    this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n  }\n/**\n * @param {?} ctx\n * @param {?} reference\n * @param {?} value\n * @return {?}\n */\n\nprivate _createNgModuleFactory(ctx: OutputContext, reference: any, value: o.Expression) {\n    const /** @type {?} */ ngModuleFactoryVar = `${identifierName({reference: reference})}NgFactory`;\n    const /** @type {?} */ ngModuleFactoryStmt =\n        o.variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(\n                o.importType(\n                    Identifiers.NgModuleFactory, [ /** @type {?} */((o.expressionType(ctx.importExpr(reference))))],\n                    [o.TypeModifier.Const]),\n                [o.StmtModifier.Final, o.StmtModifier.Exported]);\n\n    ctx.statements.push(ngModuleFactoryStmt);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: CompilerInjectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: CompileReflector, },\n];\n}\n\nfunction NgModuleCompiler_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModuleCompiler.ctorParameters;\n/** @type {?} */\nNgModuleCompiler.prototype.reflector;\n}\n\n"]}