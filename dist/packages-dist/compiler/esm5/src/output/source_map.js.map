{"version":3,"sources":["../../../../../../packages/compiler/src/output/source_map.ts"],"names":[],"mappings":"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","file":"source_map.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {utf8Encode} from '../util';\n\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nconst /** @type {?} */ VERSION = 3;\n\nconst /** @type {?} */ JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\n\ntype Segment = {\n  col0: number,\n  sourceUrl?: string,\n  sourceLine0?: number,\n  sourceCol0?: number,\n};\n\nexport type SourceMap = {\n  version: number,\n  file?: string,\n  sourceRoot: string,\n  sources: string[],\n  sourcesContent: (string | null)[],\n  mappings: string,\n};\nexport class SourceMapGenerator {\nprivate sourcesContent: Map<string, string|null> = new Map();\nprivate lines: Segment[][] = [];\nprivate lastCol0: number = 0;\nprivate hasMappings = false;\n/**\n * @param {?=} file\n */\nconstructor(private file: string|null = null) {}\n/**\n * @param {?} url\n * @param {?=} content\n * @return {?}\n */\naddSource(url: string, content: string|null = null): this {\n    if (!this.sourcesContent.has(url)) {\n      this.sourcesContent.set(url, content);\n    }\n    return this;\n  }\n/**\n * @return {?}\n */\naddLine(): this {\n    this.lines.push([]);\n    this.lastCol0 = 0;\n    return this;\n  }\n/**\n * @param {?} col0\n * @param {?=} sourceUrl\n * @param {?=} sourceLine0\n * @param {?=} sourceCol0\n * @return {?}\n */\naddMapping(col0: number, sourceUrl?: string, sourceLine0?: number, sourceCol0?: number): this {\n    if (!this.currentLine) {\n      throw new Error(`A line must be added before mappings can be added`);\n    }\n    if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n      throw new Error(`Unknown source file \"${sourceUrl}\"`);\n    }\n    if (col0 == null) {\n      throw new Error(`The column in the generated code must be provided`);\n    }\n    if (col0 < this.lastCol0) {\n      throw new Error(`Mapping should be added in output order`);\n    }\n    if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n      throw new Error(`The source location must be provided when a source url is provided`);\n    }\n\n    this.hasMappings = true;\n    this.lastCol0 = col0;\n    this.currentLine.push({col0, sourceUrl, sourceLine0, sourceCol0});\n    return this;\n  }\n/**\n * @return {?}\n */\n\nprivate get currentLine(): Segment[]|null { return this.lines.slice(-1)[0]; }\n/**\n * @return {?}\n */\ntoJSON(): SourceMap|null {\n    if (!this.hasMappings) {\n      return null;\n    }\n\n    const /** @type {?} */ sourcesIndex = new Map<string, number>();\n    const /** @type {?} */ sources: string[] = [];\n    const /** @type {?} */ sourcesContent: (string | null)[] = [];\n\n    Array.from(this.sourcesContent.keys()).forEach((url: string, i: number) => {\n      sourcesIndex.set(url, i);\n      sources.push(url);\n      sourcesContent.push(this.sourcesContent.get(url) || null);\n    });\n\n    let /** @type {?} */ mappings: string = '';\n    let /** @type {?} */ lastCol0: number = 0;\n    let /** @type {?} */ lastSourceIndex: number = 0;\n    let /** @type {?} */ lastSourceLine0: number = 0;\n    let /** @type {?} */ lastSourceCol0: number = 0;\n\n    this.lines.forEach(segments => {\n      lastCol0 = 0;\n\n      mappings += segments\n                      .map(segment => {\n                        // zero-based starting column of the line in the generated code\n                        let /** @type {?} */ segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                        lastCol0 = segment.col0;\n\n                        if (segment.sourceUrl != null) {\n                          // zero-based index into the “sources” list\n                          segAsStr +=\n                              toBase64VLQ( /** @type {?} */((sourcesIndex.get(segment.sourceUrl))) - lastSourceIndex);\n                          lastSourceIndex = /** @type {?} */(( sourcesIndex.get(segment.sourceUrl)));\n                          // the zero-based starting line in the original source\n                          segAsStr += toBase64VLQ( /** @type {?} */((segment.sourceLine0)) - lastSourceLine0);\n                          lastSourceLine0 = /** @type {?} */(( segment.sourceLine0));\n                          // the zero-based starting column in the original source\n                          segAsStr += toBase64VLQ( /** @type {?} */((segment.sourceCol0)) - lastSourceCol0);\n                          lastSourceCol0 = /** @type {?} */(( segment.sourceCol0));\n                        }\n\n                        return segAsStr;\n                      })\n                      .join(',');\n      mappings += ';';\n    });\n\n    mappings = mappings.slice(0, -1);\n\n    return {\n      'file': this.file || '',\n      'version': VERSION,\n      'sourceRoot': '',\n      'sources': sources,\n      'sourcesContent': sourcesContent,\n      'mappings': mappings,\n    };\n  }\n/**\n * @return {?}\n */\ntoJsComment(): string {\n    return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n                              '';\n  }\n}\n\nfunction SourceMapGenerator_tsickle_Closure_declarations() {\n/** @type {?} */\nSourceMapGenerator.prototype.sourcesContent;\n/** @type {?} */\nSourceMapGenerator.prototype.lines;\n/** @type {?} */\nSourceMapGenerator.prototype.lastCol0;\n/** @type {?} */\nSourceMapGenerator.prototype.hasMappings;\n/** @type {?} */\nSourceMapGenerator.prototype.file;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nexport function toBase64String(value: string): string {\n  let /** @type {?} */ b64 = '';\n  value = utf8Encode(value);\n  for (let /** @type {?} */ i = 0; i < value.length;) {\n    const /** @type {?} */ i1 = value.charCodeAt(i++);\n    const /** @type {?} */ i2 = value.charCodeAt(i++);\n    const /** @type {?} */ i3 = value.charCodeAt(i++);\n    b64 += toBase64Digit(i1 >> 2);\n    b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\n    b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\n    b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\n  }\n\n  return b64;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBase64VLQ(value: number): string {\n  value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n\n  let /** @type {?} */ out = '';\n  do {\n    let /** @type {?} */ digit = value & 31;\n    value = value >> 5;\n    if (value > 0) {\n      digit = digit | 32;\n    }\n    out += toBase64Digit(digit);\n  } while (value > 0);\n\n  return out;\n}\n\nconst /** @type {?} */ B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBase64Digit(value: number): string {\n  if (value < 0 || value >= 64) {\n    throw new Error(`Can only encode value in the range [0, 63]`);\n  }\n\n  return B64_DIGITS[value];\n}\n"]}