{"version":3,"sources":["../../../../../packages/compiler/src/directive_resolver.ts"],"names":[],"mappings":"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","file":"directive_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, HostBinding, HostListener, Input, Output, Query, Type, resolveForwardRef, Éµstringify as stringify} from '@angular/core';\n\nimport {CompileReflector} from './compile_reflector';\nimport {CompilerInjectable} from './injectable';\nimport {splitAtColon} from './util';\nexport class DirectiveResolver {\n/**\n * @param {?} _reflector\n */\nconstructor(private _reflector: CompileReflector) {}\n/**\n * @param {?} type\n * @return {?}\n */\nisDirective(type: Type<any>) {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n  }\n\n  /**\n   * Return {@link Directive} for a given `Type`.\n   */\n  resolve(type: Type<any>): Directive;\n  resolve(type: Type<any>, throwIfNotFound: true): Directive;\n  resolve(type: Type<any>, throwIfNotFound: boolean): Directive|null;\n/**\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Directive|null {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    if (typeMetadata) {\n      const /** @type {?} */ metadata = findLast(typeMetadata, isDirectiveMetadata);\n      if (metadata) {\n        const /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n      }\n    }\n\n    if (throwIfNotFound) {\n      throw new Error(`No Directive annotation found on ${stringify(type)}`);\n    }\n\n    return null;\n  }\n/**\n * @param {?} dm\n * @param {?} propertyMetadata\n * @param {?} directiveType\n * @return {?}\n */\n\nprivate _mergeWithPropertyMetadata(\n      dm: Directive, propertyMetadata: {[key: string]: any[]},\n      directiveType: Type<any>): Directive {\n    const /** @type {?} */ inputs: string[] = [];\n    const /** @type {?} */ outputs: string[] = [];\n    const /** @type {?} */ host: {[key: string]: string} = {};\n    const /** @type {?} */ queries: {[key: string]: any} = {};\n\n    Object.keys(propertyMetadata).forEach((propName: string) => {\n      const /** @type {?} */ input = findLast(propertyMetadata[propName], (a) => a instanceof Input);\n      if (input) {\n        if (input.bindingPropertyName) {\n          inputs.push(`${propName}: ${input.bindingPropertyName}`);\n        } else {\n          inputs.push(propName);\n        }\n      }\n      const /** @type {?} */ output = findLast(propertyMetadata[propName], (a) => a instanceof Output);\n      if (output) {\n        if (output.bindingPropertyName) {\n          outputs.push(`${propName}: ${output.bindingPropertyName}`);\n        } else {\n          outputs.push(propName);\n        }\n      }\n      const /** @type {?} */ hostBindings = propertyMetadata[propName].filter(a => a && a instanceof HostBinding);\n      hostBindings.forEach(hostBinding => {\n        if (hostBinding.hostPropertyName) {\n          const /** @type {?} */ startWith = hostBinding.hostPropertyName[0];\n          if (startWith === '(') {\n            throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);\n          } else if (startWith === '[') {\n            throw new Error(\n                `@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);\n          }\n          host[`[${hostBinding.hostPropertyName}]`] = propName;\n        } else {\n          host[`[${propName}]`] = propName;\n        }\n      });\n      const /** @type {?} */ hostListeners = propertyMetadata[propName].filter(a => a && a instanceof HostListener);\n      hostListeners.forEach(hostListener => {\n        const /** @type {?} */ args = hostListener.args || [];\n        host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\n      });\n      const /** @type {?} */ query = findLast(propertyMetadata[propName], (a) => a instanceof Query);\n      if (query) {\n        queries[propName] = query;\n      }\n    });\n    return this._merge(dm, inputs, outputs, host, queries, directiveType);\n  }\n/**\n * @param {?} def\n * @return {?}\n */\n\nprivate _extractPublicName(def: string) { return splitAtColon(def, [ /** @type {?} */((null)), def])[1].trim(); }\n/**\n * @param {?} bindings\n * @return {?}\n */\n\nprivate _dedupeBindings(bindings: string[]): string[] {\n    const /** @type {?} */ names = new Set<string>();\n    const /** @type {?} */ reversedResult: string[] = [];\n    // go last to first to allow later entries to overwrite previous entries\n    for (let /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {\n      const /** @type {?} */ binding = bindings[i];\n      const /** @type {?} */ name = this._extractPublicName(binding);\n      if (!names.has(name)) {\n        names.add(name);\n        reversedResult.push(binding);\n      }\n    }\n    return reversedResult.reverse();\n  }\n/**\n * @param {?} directive\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} host\n * @param {?} queries\n * @param {?} directiveType\n * @return {?}\n */\n\nprivate _merge(\n      directive: Directive, inputs: string[], outputs: string[], host: {[key: string]: string},\n      queries: {[key: string]: any}, directiveType: Type<any>): Directive {\n    const /** @type {?} */ mergedInputs =\n        this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n    const /** @type {?} */ mergedOutputs =\n        this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n    const /** @type {?} */ mergedHost = directive.host ? {...directive.host, ...host} : host;\n    const /** @type {?} */ mergedQueries = directive.queries ? {...directive.queries, ...queries} : queries;\n\n    if (directive instanceof Component) {\n      return new Component({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        moduleId: directive.moduleId,\n        queries: mergedQueries,\n        changeDetection: directive.changeDetection,\n        providers: directive.providers,\n        viewProviders: directive.viewProviders,\n        entryComponents: directive.entryComponents,\n        template: directive.template,\n        templateUrl: directive.templateUrl,\n        styles: directive.styles,\n        styleUrls: directive.styleUrls,\n        encapsulation: directive.encapsulation,\n        animations: directive.animations,\n        interpolation: directive.interpolation\n      });\n    } else {\n      return new Directive({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        queries: mergedQueries,\n        providers: directive.providers\n      });\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: CompilerInjectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: CompileReflector, },\n];\n}\n\nfunction DirectiveResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectiveResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDirectiveResolver.ctorParameters;\n/** @type {?} */\nDirectiveResolver.prototype._reflector;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nfunction isDirectiveMetadata(type: any): type is Directive {\n  return type instanceof Directive;\n}\n/**\n * @template T\n * @param {?} arr\n * @param {?} condition\n * @return {?}\n */\nexport function findLast<T>(arr: T[], condition: (value: T) => boolean): T|null {\n  for (let /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return arr[i];\n    }\n  }\n  return null;\n}\n"]}