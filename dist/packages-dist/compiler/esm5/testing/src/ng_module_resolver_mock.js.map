{"version":3,"sources":["../../../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH;;;;;;GAMc;AAEd,OALO,EAAA,gBAAE,EAAiB,gBAAA,EAAiB,MAAA,mBAAA,CAAA;AAM3C,OALO,EAAA,QAAE,EAAS,UAAA,EAAY,QAAA,EAAyB,MAAA,eAAA,CAAA;AAMvD;IAH0C,gDAAA;IAK1C;;;OAGG;IACH,8BANsB,SAAW,EAAU,SAAW;QAMtD,YAN0E,kBAAM,SAAC,CAAS,SAAE;QAAtE,eAAA,GAAA,SAAA,CAAW;QAFvB,gBAAA,GAAa,IAAI,GAAA,EAAwB,CAAG;;IAEsC,CAAA;IAO5F;;;;;OAKG;IACH,0CARG,GAQH,UARc,IAAe,EAAE,QAAU;QASrC,IAAI,CARC,UAAC,CAAU,GAAC,CAAG,IAAC,EAAK,QAAA,CAAS,CAAC;QASpC,IAAI,CARC,cAAC,CAAc,IAAC,CAAI,CAAC;IAS5B,CAAC;IACH;;;;;;;;OAQG;IACH,sCAVG,GAUH,UAVU,IAAe,EAAE,eAAkB;QAAlB,gCAAA,EAAA,sBAAkB;QAWzC,MAAM,CAVC,IAAA,CAAK,UAAC,CAAU,GAAC,CAAG,IAAC,CAAI,IAAC,CAAA,CAAG,iBAAM,OAAC,YAAO,IAAC,EAAK,eAAA,CAAgB,CAAA,CAAA,CAAG;IAW7E,CAAC;IAKH,sBAbc,2CAAA;QASd;;WANE;aAUF,cAbsC,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,GAAC,CAAG,QAAC,CAAQ,CAAC,CAAC,CAAA;;;OAAA;IAc3E;;;OAGG;IAfO,6CAAA,GAiBV,UAjByB,SAAoB,IAAI,IAAA,CAAK,SAAC,CAAS,aAAC,CAAa,SAAC,CAAS,CAAC,CAAC,CAAA;IA0B1F,2BAzBC;AAyBD,CAhDA,AAuBC,CA1ByC,gBAAA;;AA0BnC,+BAAA,GAA+C;IAkBtD,EAjBE,IAAA,EAAM,UAAA,EA5BN;CA8CD,CAjBC;AAkBF,kBAAkB;AAhBX,mCAAA,GAA4F,cAAM,OAAA;IAkBzG,EAAC,IAjBC,EAAK,QAAA,GAAS;IAkBhB,EAAC,IAjBC,EAAK,gBAAA,GAAiB;CAkBvB,EApBwG,CAoBxG,CAjBC;AAoBF;IACA,gBAAgB;IAChB,oBAAoB,CAAC,UAAU,CAAC;IAChC;;;OAGG;IACH,oBAAoB,CAAC,cAAc,CAAC;IACpC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC1C,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;AACzC,CAAC","file":"ng_module_resolver_mock.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, NgModuleResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, NgModule, Type} from '@angular/core';\nexport class MockNgModuleResolver extends NgModuleResolver {\nprivate _ngModules = new Map<Type<any>, NgModule>();\n/**\n * @param {?} _injector\n * @param {?} reflector\n */\nconstructor(private _injector: Injector, reflector: CompileReflector) { super(reflector); }\n/**\n * Overrides the {\\@link NgModule} for a module.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nsetNgModule(type: Type<any>, metadata: NgModule): void {\n    this._ngModules.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n/**\n * Returns the {\\@link NgModule} for a module:\n * - Set the {\\@link NgModule} to the overridden view when it exists or fallback to the\n * default\n * `NgModuleResolver`, see `setNgModule`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): NgModule {\n    return this._ngModules.get(type) || /** @type {?} */(( super.resolve(type, throwIfNotFound)));\n  }\n/**\n * @return {?}\n */\n\nprivate get _compiler(): Compiler { return this._injector.get(Compiler); }\n/**\n * @param {?} component\n * @return {?}\n */\n\nprivate _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Injector, },\n{type: CompileReflector, },\n];\n}\n\nfunction MockNgModuleResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nMockNgModuleResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMockNgModuleResolver.ctorParameters;\n/** @type {?} */\nMockNgModuleResolver.prototype._ngModules;\n/** @type {?} */\nMockNgModuleResolver.prototype._injector;\n}\n\n"]}