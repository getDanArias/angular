{"version":3,"sources":["../../../../../../packages/compiler/testing/src/directive_resolver_mock.ts"],"names":[],"mappings":"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","file":"directive_resolver_mock.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, DirectiveResolver} from '@angular/compiler';\nimport {Compiler, Component, Directive, Injectable, Injector, Provider, Type, resolveForwardRef, ÉµViewMetadata as ViewMetadata} from '@angular/core';\n/**\n * An implementation of {\\@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport class MockDirectiveResolver extends DirectiveResolver {\nprivate _directives = new Map<Type<any>, Directive>();\nprivate _providerOverrides = new Map<Type<any>, any[]>();\nprivate _viewProviderOverrides = new Map<Type<any>, any[]>();\nprivate _views = new Map<Type<any>, ViewMetadata>();\nprivate _inlineTemplates = new Map<Type<any>, string>();\n/**\n * @param {?} _injector\n * @param {?} reflector\n */\nconstructor(private _injector: Injector, reflector: CompileReflector) { super(reflector); }\n/**\n * @return {?}\n */\n\nprivate get _compiler(): Compiler { return this._injector.get(Compiler); }\n/**\n * @param {?} component\n * @return {?}\n */\n\nprivate _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\n\n  resolve(type: Type<any>): Directive;\n  resolve(type: Type<any>, throwIfNotFound: true): Directive;\n  resolve(type: Type<any>, throwIfNotFound: boolean): Directive|null;\n/**\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Directive|null {\n    let /** @type {?} */ metadata = this._directives.get(type) || null;\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound);\n    }\n    if (!metadata) {\n      return null;\n    }\n\n    const /** @type {?} */ providerOverrides = this._providerOverrides.get(type);\n    const /** @type {?} */ viewProviderOverrides = this._viewProviderOverrides.get(type);\n\n    let /** @type {?} */ providers = metadata.providers;\n    if (providerOverrides != null) {\n      const /** @type {?} */ originalViewProviders: Provider[] = metadata.providers || [];\n      providers = originalViewProviders.concat(providerOverrides);\n    }\n\n    if (metadata instanceof Component) {\n      let /** @type {?} */ viewProviders = metadata.viewProviders;\n      if (viewProviderOverrides != null) {\n        const /** @type {?} */ originalViewProviders: Provider[] = metadata.viewProviders || [];\n        viewProviders = originalViewProviders.concat(viewProviderOverrides);\n      }\n\n      let /** @type {?} */ view = this._views.get(type) || metadata;\n      let /** @type {?} */ animations = view.animations;\n      let /** @type {?} */ templateUrl: string|undefined = view.templateUrl;\n\n      let /** @type {?} */ inlineTemplate = this._inlineTemplates.get(type);\n      if (inlineTemplate) {\n        templateUrl = undefined;\n      } else {\n        inlineTemplate = view.template;\n      }\n\n      return new Component({\n        selector: metadata.selector,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        host: metadata.host,\n        exportAs: metadata.exportAs,\n        moduleId: metadata.moduleId,\n        queries: metadata.queries,\n        changeDetection: metadata.changeDetection,\n        providers: providers,\n        viewProviders: viewProviders,\n        entryComponents: metadata.entryComponents,\n        template: inlineTemplate,\n        templateUrl: templateUrl,\n        animations: animations,\n        styles: view.styles,\n        styleUrls: view.styleUrls,\n        encapsulation: view.encapsulation,\n        interpolation: view.interpolation\n      });\n    }\n\n    return new Directive({\n      selector: metadata.selector,\n      inputs: metadata.inputs,\n      outputs: metadata.outputs,\n      host: metadata.host,\n      providers: providers,\n      exportAs: metadata.exportAs,\n      queries: metadata.queries\n    });\n  }\n/**\n * Overrides the {\\@link Directive} for a directive.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nsetDirective(type: Type<any>, metadata: Directive): void {\n    this._directives.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n/**\n * @param {?} type\n * @param {?} providers\n * @return {?}\n */\nsetProvidersOverride(type: Type<any>, providers: Provider[]): void {\n    this._providerOverrides.set(type, providers);\n    this._clearCacheFor(type);\n  }\n/**\n * @param {?} type\n * @param {?} viewProviders\n * @return {?}\n */\nsetViewProvidersOverride(type: Type<any>, viewProviders: Provider[]): void {\n    this._viewProviderOverrides.set(type, viewProviders);\n    this._clearCacheFor(type);\n  }\n/**\n * Overrides the {\\@link ViewMetadata} for a component.\n * @param {?} component\n * @param {?} view\n * @return {?}\n */\nsetView(component: Type<any>, view: ViewMetadata): void {\n    this._views.set(component, view);\n    this._clearCacheFor(component);\n  }\n/**\n * Overrides the inline template for a component - other configuration remains unchanged.\n * @param {?} component\n * @param {?} template\n * @return {?}\n */\nsetInlineTemplate(component: Type<any>, template: string): void {\n    this._inlineTemplates.set(component, template);\n    this._clearCacheFor(component);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Injector, },\n{type: CompileReflector, },\n];\n}\n\nfunction MockDirectiveResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nMockDirectiveResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMockDirectiveResolver.ctorParameters;\n/** @type {?} */\nMockDirectiveResolver.prototype._directives;\n/** @type {?} */\nMockDirectiveResolver.prototype._providerOverrides;\n/** @type {?} */\nMockDirectiveResolver.prototype._viewProviderOverrides;\n/** @type {?} */\nMockDirectiveResolver.prototype._views;\n/** @type {?} */\nMockDirectiveResolver.prototype._inlineTemplates;\n/** @type {?} */\nMockDirectiveResolver.prototype._injector;\n}\n\n/**\n * @param {?} tree\n * @param {?} out\n * @return {?}\n */\nfunction flattenArray(tree: any[], out: Array<Type<any>|any[]>): void {\n  if (tree == null) return;\n  for (let /** @type {?} */ i = 0; i < tree.length; i++) {\n    const /** @type {?} */ item = resolveForwardRef(tree[i]);\n    if (Array.isArray(item)) {\n      flattenArray(item, out);\n    } else {\n      out.push(item);\n    }\n  }\n}\n"]}