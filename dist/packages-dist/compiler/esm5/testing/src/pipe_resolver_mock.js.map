{"version":3,"sources":["../../../../../../packages/compiler/testing/src/pipe_resolver_mock.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH;;;;;;GAMc;AAEd,OALO,EAAA,gBAAE,EAAiB,YAAA,EAAa,MAAA,mBAAA,CAAA;AAMvC,OALO,EAAA,QAAE,EAAS,UAAA,EAAY,QAAA,EAAqB,MAAA,eAAA,CAAA;AAMnD;IAHsC,4CAAA;IAKtC;;;OAGG;IACH,0BANsB,SAAW,EAAU,QAAU;QAMrD,YANyE,kBAAM,QAAC,CAAQ,SAAE;QAApE,eAAA,GAAA,SAAA,CAAW;QAFvB,YAAA,GAAS,IAAI,GAAA,EAAoB,CAAG;;IAE4C,CAAA;IAW1F,sBATc,uCAAA;QAKd;;WAEG;aAEH,cATsC,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,GAAC,CAAG,QAAC,CAAQ,CAAC,CAAC,CAAA;;;OAAA;IAU3E;;;OAGG;IAXO,yCAAA,GAaV,UAbyB,IAAe,IAAI,IAAA,CAAK,SAAC,CAAS,aAAC,CAAa,IAAC,CAAI,CAAC,CAAC,CAAA;IAchF;;;;;OAKG;IACH,kCAfG,GAeH,UAfU,IAAe,EAAE,QAAU;QAgBjC,IAAI,CAfC,MAAC,CAAM,GAAC,CAAG,IAAC,EAAK,QAAA,CAAS,CAAC;QAgBhC,IAAA,CAfK,cAAC,CAAc,IAAC,CAAI,CAAC;IAgB5B,CAAC;IACH;;;;;;;;OAQG;IACH,kCAjBG,GAiBH,UAjBU,IAAe,EAAE,eAAkB;QAAlB,gCAAA,EAAA,sBAAkB;QAkBzC,IAAI,gBAAgB,CAjBhB,QAAA,GAAW,IAAA,CAAK,MAAC,CAAM,GAAC,CAAG,IAAC,CAAI,CAAC;QAkBrC,EAAE,CAAC,CAAC,CAjBC,QAAC,CAAQ,CAAC,CAAA;YAkBb,QAAQ,GAjBC,CAAA,CAAE,iBAAM,OAAC,YAAO,IAAC,EAAK,eAAA,CAAgB,CAAA,CAAA,CAAG;QAkBpD,CAAC;QACD,MAAM,CAjBC,QAAA,CAAS;IAkBlB,CAAC;IASH,uBAzBC;AAyBD,CApDA,AA2BC,CA9BqC,YAAA;;AA8B/B,2BAAA,GAA+C;IAkBtD,EAjBE,IAAA,EAAM,UAAA,EAhCN;CAkDD,CAjBC;AAkBF,kBAAkB;AAhBX,+BAAA,GAA4F,cAAM,OAAA;IAkBzG,EAAC,IAjBC,EAAK,QAAA,GAAS;IAkBhB,EAAC,IAjBC,EAAK,gBAAA,GAAiB;CAkBvB,EApBwG,CAoBxG,CAjBC;AAoBF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;IAClC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC;AACrC,CAAC","file":"pipe_resolver_mock.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, PipeResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, Pipe, Type} from '@angular/core';\nexport class MockPipeResolver extends PipeResolver {\nprivate _pipes = new Map<Type<any>, Pipe>();\n/**\n * @param {?} _injector\n * @param {?} refector\n */\nconstructor(private _injector: Injector, refector: CompileReflector) { super(refector); }\n/**\n * @return {?}\n */\n\nprivate get _compiler(): Compiler { return this._injector.get(Compiler); }\n/**\n * @param {?} pipe\n * @return {?}\n */\n\nprivate _clearCacheFor(pipe: Type<any>) { this._compiler.clearCacheFor(pipe); }\n/**\n * Overrides the {\\@link Pipe} for a pipe.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nsetPipe(type: Type<any>, metadata: Pipe): void {\n    this._pipes.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n/**\n * Returns the {\\@link Pipe} for a pipe:\n * - Set the {\\@link Pipe} to the overridden view when it exists or fallback to the\n * default\n * `PipeResolver`, see `setPipe`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Pipe {\n    let /** @type {?} */ metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = /** @type {?} */(( super.resolve(type, throwIfNotFound)));\n    }\n    return metadata;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Injector, },\n{type: CompileReflector, },\n];\n}\n\nfunction MockPipeResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nMockPipeResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMockPipeResolver.ctorParameters;\n/** @type {?} */\nMockPipeResolver.prototype._pipes;\n/** @type {?} */\nMockPipeResolver.prototype._injector;\n}\n\n"]}