{"version":3,"sources":["../../../../../../packages/compiler/testing/src/testing.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH;;;;;;;;;;;;;;GAcG;AACH,OAAO,EAAA,kBAAE,EAAA,MAAsB,wBAAA,CAAA;AAC/B,OAAO,EAAA,qBAAmB,EAAA,MAAA,2BAA2B,CAAA;AACrD,OAAO,EAAA,oBAAqB,EAAC,MAAA,2BAAgC,CAAA;AAC7D,OAAO,EAAA,gBAAE,EAAA,MAAsB,sBAAK,CAAA;AAEpC,OALO,EAAA,qBAAE,EAAoD,UAAA,EAA6B,gBAAA,EAAkB,eAAA,EAAoD,QAAA,EAAU,QAAA,EAAU,SAAA,EAAW,SAAA,EAAW,IAAA,EAAyB,UAAA,EAAW,MAAA,eAAA,CAAA;AAM9O,OALO,EAAmB,uBAAA,IAA2B,sBAAA,EAA4D,MAAA,uBAAA,CAAA;AAMjH,OALO,EAAA,mBAAE,EAAiC,iBAAA,EAAmB,gBAAA,EAAkB,YAAA,EAAc,uBAAA,EAAyB,gBAAA,EAAiB,MAAA,mBAAA,CAAA;AAMvI,OALO,EAAA,qBAAE,EAAqB,MAAA,2BAAA,CAAA;AAM9B,OALO,EAAA,oBAAE,EAAoB,MAAA,2BAAA,CAAA;AAM7B,OALO,EAAA,gBAAE,EAAgB,MAAA,sBAAA,CAAA;AAMzB,OALO,EAAA,iBAAE,EAAiB,MAAA,sBAAA,CAAA;AAM1B;IACA;;OAEG;IACH,oCANsB,gBAAkB;QAAlB,qBAAA,GAAA,gBAAA,CAAkB;IAAiB,CAAA;IAOzD;;;OAGG;IACH,0DATG,GASH,UATwB,OAAyB;QAU7C,IAAM,gBAAgB,CAThB,QAAA,GAAS,CAAe,IAAC,CAAI,gBAAC,CAAgB,cAAC,CAAc,OAAC,CAAO,CAAA,CAAC;QAU5E,MAAM,CATC,IAAI,mBAAA,CAUP,QAAQ,EATE,QAAA,CAAS,QAAC,CAAQ,GAAC,CAAG,qBAAC,CAAqB,EAUtD,QAAQ,CATC,QAAC,CAAQ,GAAC,CAAG,gBAAC,CAAgB,EAAE,QAAA,CAAS,QAAC,CAAQ,GAAC,CAAG,oBAAC,CAAoB,EAG1F,QAAA,CAFe,QAAC,CAAQ,GAAC,CAAG,uBAAC,CAAuB,CAAC,CAAC;IAUtD,CAAC;IAQH,iCAhBC;AAgBD,CAvBA,AAOC;;AAAM,qCAAA,GAA+C;IAUtD,EATE,IAAA,EAAM,UAAA,EAZN;CAsBD,CATC;AAUF,kBAPc;AADP,yCAAA,GAA4F,cAAM,OAAA;IAUzG,EAAC,IATC,EAAK,eAAA,GAAgB;CAUtB,EAXwG,CAWxG,CATC;AAYF;IACA,gBAPI;IAQJ,0BAA0B,CAAC,UAAU,CAAC;IACtC;;;OAGG;IACH,0BAP0B,CAAC,cAAA,CAAA;IAQ3B,gBAPI;IAQJ,0BAA0B,CAAC,SAAS,CAAC,gBAAgB,CAAC;AACtD,CAAC;AAED;IAEA;;;;;;OAMG;IACH,6BAlCc,SAAW,EAAqB,kBAAoB,EACpD,aAAe,EAA0B,eAAiB,EAC1D,iBAAmB;QAFnB,cAAA,GAAA,SAAA,CAAW;QAAqB,uBAAA,GAAA,kBAAA,CAAoB;QACpD,kBAAA,GAAA,aAAA,CAAe;QAA0B,oBAAA,GAAA,eAAA,CAAiB;QAC1D,sBAAA,GAAA,iBAAA,CAAmB;QAJvB,eAAA,GAAa,IAAI,iBAAA,EAAkB,CAAE;IAIW,CAAA;IAyC1D,sBAxCM,yCAAA;QAqCN;;WAEG;aACH,cAxC6B,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,QAAC,CAAQ,CAAC,CAAA;;;OAAA;IAyC7D;;;;OAIG;IACH,+CArCG,GAqCH,UA5CsB,UAAoB;QA6CtC,MAPM,CArCC,IAAA,CAAK,SAAC,CAAS,iBAAC,CAAiB,UAAC,CAAU,CAAC;IA6CtD,CAAC;IACH;;;;OAIG;IACH,gDAzCG,GAyCH,UAhDuB,UAAoB;QAiDvC,MAAM,CAhDC,IAAA,CAAK,SAAC,CAAS,kBAAC,CAAkB,UAAC,CAAU,CAAC;IAiDvD,CAAC;IACH;;;;OAIG;IACH,+DA9CG,GA8CH,UArDsC,UAAoB;QAsDtD,MAAM,CArDC,IAAA,CAAK,SAAC,CAAS,iCAAC,CAAiC,UAAC,CAAU,CAAC;IAsDtE,CAAC;IACH;;;;OAIG;IACH,gEAlDG,GAkDH,UAzDuC,UAAoB;QA2DvD,MAPG,CAlDI,IAAA,CAAK,SAAC,CAAS,kCAAC,CAAkC,UAAC,CAAU,CAAC;IA0DvE,CAAC;IACH;;;OAGG;IACH,mDArDG,GAqDH,UA5DwB,SAAoB;QA6DxC,MAAM,CA5DC,IAAA,CAAK,SAAC,CAAS,qBAAC,CAAqB,SAAC,CAAS,CAAC;IA6DzD,CAAC;IACH;;;;OAIG;IACH,iDAzDG,GAyDH,UAhEwB,SAAmB;QAiEvC,MAPK,CAzDE,IAAA,CAAK,SAAC,CAAS,mBAAC,CAAmB,SAAC,CAAS,CAAC;IAiEvD,CAAC;IACH;;;OAGG;IACH,kDA5DG,GA4DH,UAnEuB,IAAe;QAoElC,EAAE,CAAC,CAAC,IAnEC,CAAI,SAAC,CAAS,aAAC,CAAa,IAAC,CAAI,CAAC,CAAC,CAAA;YAoEtC,MAnEM,IAAI,KAAA,CAAO,UAAG,CAAU,IAAC,CAAI,0DAAC,CAAuD,CAAC;QAoE9F,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,4CAhEG,GAgEH,UAvEiB,QAAmB,EAAE,QAAoC;QAwEtE,IAAI,CAvEC,oBAAC,CAAoB,QAAC,CAAQ,CAAC;QAwEpC,IAAM,gBAAgB,CAvEhB,WAAA,GAAc,IAAA,CAAK,eAAC,CAAe,OAAC,CAAO,QAAC,EAAS,KAAA,CAAM,CAAC;QAwElE,IAAI,CAvEC,eAAC,CAAe,WAAC,CAwElB,QAAQ,EAvEE,IAAA,CAAK,UAAC,CAAU,gBAAC,CAAgB,QAAC,EAAS,WAAA,EAAa,QAAA,CAAS,CAAC,CAAC;IAwEnF,CAAC;IACH;;;;OAIG;IACH,+CArEG,GAqEH,UA5EoB,SAAoB,EAAE,QAAqC;QA6E3E,IAAI,CA5EC,oBAAC,CAAoB,SAAC,CAAS,CAAC;QA6ErC,IAAM,gBAAgB,CA5EhB,WAAA,GAAc,IAAA,CAAK,kBAAC,CAAkB,OAAC,CAAO,SAAC,EAAU,KAAA,CAAM,CAAC;QA6EtE,IAAI,CA5EC,kBAAC,CAAkB,YAAC,CA6ErB,SAAS,EA5EE,IAAA,CAAK,UAAC,CAAU,gBAAC,CAAgB,SAAC,EAAS,gBAAA,CAAA,CAAA,CAAC,WAAA,CAAA,CAAA,EAAe,QAAA,CAAS,CAAC,CAAC;IA6EvF,CAAC;IACH;;;;OAIG;IACH,+CA1EG,GA0EH,UAjFoB,SAAoB,EAAE,QAAqC;QAkF3E,IAAI,CAjFC,oBAAC,CAAoB,SAAC,CAAS,CAAC;QAkFrC,IAAM,gBAAgB,CAjFhB,WAAA,GAAc,IAAA,CAAK,kBAAC,CAAkB,OAAC,CAAO,SAAC,EAAU,KAAA,CAAM,CAAC;QAkFtE,IAAI,CAjFC,kBAAC,CAAkB,YAAC,CAkFrB,SAAS,EAjFE,IAAA,CAAK,UAAC,CAAU,gBAAC,CAAgB,SAAC,EAAS,gBAAA,CAAA,CAAA,CAAC,WAAA,CAAA,CAAA,EAAe,QAAA,CAAS,CAAC,CAAC;IAkFvF,CAAC;IACH;;;;OAIG;IACH,0CA/EG,GA+EH,UAtFe,IAAe,EAAE,QAAgC;QAuF5D,IAAI,CAtFC,oBAAC,CAAoB,IAAC,CAAI,CAAC;QAuFhC,IAAM,gBAAgB,CAtFhB,WAAA,GAAc,IAAA,CAAK,aAAC,CAAa,OAAC,CAAO,IAAC,EAAK,KAAA,CAAM,CAAC;QAuF5D,IAAI,CAtFC,aAAC,CAAa,OAAC,CAAO,IAAC,EAAK,IAAA,CAAK,UAAC,CAAU,gBAAC,CAAgB,IAAC,EAAK,WAAA,EAAa,QAAA,CAAS,CAAC,CAAC;IAuFlG,CAAC;IACH;;;OAGG;IACH,8CAnFG,GAmFH,UA1FmB,SAAqB,IAAK,IAAA,CAAK,SAAC,CAAS,gBAAC,CAAgB,SAAC,CAAS,CAAC,CAAC,CAAA;IA2FzF;;OAEG;IACH,wCAtFG,GAsFH,cA7FuB,IAAA,CAAK,SAAC,CAAS,UAAC,EAAU,CAAE,CAAC,CAAA;IA8FpD;;;OAGG;IACH,2CA1FG,GA0FH,UAjGgB,IAAe,IAAI,IAAA,CAAK,SAAC,CAAS,aAAC,CAAa,IAAC,CAAI,CAAC,CAAC,CAAA;IAkGvE,0BAjGC;AAiGD,CArIA,AAoCC,IAAA;;AAmGD;IACA,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,UAAU,CAAC;IACzC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,kBAAkB,CAAC;IACjD,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC5C,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC9C,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,iBAAiB,CAAC;AAChD,CAAC;AAED;;;;GAIG;AACH,MAzGC,CAPM,IAAA,gBAAA,CAAM,0BAAA,GAiHT,qBAAqB,CAhHC,mBAAC,EAAoB,oBAAA,EAAsB;IAiH/D;QACE,OAAO,EAhHE,gBAAA;QAiHT,QAAQ,EAhHE;YAiHR,SAAS,EAhHE;gBAiHT,EAAC,OAhHC,EAAQ,gBAAA,EAAkB,IAAA,EAAM,CAAA,QAAE,EAAS,gBAAA,CAAiB,EAAC;gBAiH/D,EAAC,OAhHC,EAAQ,YAAA,EAAc,WAAA,EAAa,gBAAA,EAAiB;gBAiHtD,EAAC,OAhHC,EAAQ,qBAAA,EAAuB,IAAA,EAAM,CAAA,QAAE,EAAS,gBAAA,CAAiB,EAAC;gBAiHpE,EAAC,OAhHC,EAAQ,iBAAA,EAAmB,WAAA,EAAa,qBAAA,EAAsB;gBAiHhE,EAAC,OAhHC,EAAQ,oBAAA,EAAsB,IAAA,EAAM,CAAA,QAAE,EAAS,gBAAA,CAAiB,EAAC;gBAiHnE,EAAC,OAhHC,EAAQ,gBAAA,EAAkB,WAAA,EAAa,oBAAA,EAAqB;aAiH/D;SACF;QACD,KAAK,EAhHE,IAAA;KAiHR;IACD;QACE,OAAO,EAhHE,sBAAA;QAiHT,QAAQ,EAhHE,0BAAA;QAiHV,IAAI,EAhHE,CAAA,eAAE,CAAe;KAiHxB;CACF,CAhHC,CAAC","file":"testing.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport {MockSchemaRegistry} from './schema_registry_mock';\nexport {MockDirectiveResolver} from './directive_resolver_mock';\nexport {MockNgModuleResolver} from './ng_module_resolver_mock';\nexport {MockPipeResolver} from './pipe_resolver_mock';\n\nimport {createPlatformFactory, ModuleWithComponentFactories, Injectable, CompilerOptions, COMPILER_OPTIONS, CompilerFactory, ComponentFactory, NgModuleFactory, Injector, NgModule, Component, Directive, Pipe, Type, PlatformRef, ɵstringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompilerFactory as TestingCompilerFactory, ɵTestingCompiler as TestingCompiler} from '@angular/core/testing';\nimport {platformCoreDynamic, JitCompiler, DirectiveResolver, NgModuleResolver, PipeResolver, CompileMetadataResolver, CompileReflector} from '@angular/compiler';\nimport {MockDirectiveResolver} from './directive_resolver_mock';\nimport {MockNgModuleResolver} from './ng_module_resolver_mock';\nimport {MockPipeResolver} from './pipe_resolver_mock';\nimport {MetadataOverrider} from './metadata_overrider';\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n/**\n * @param {?} _compilerFactory\n */\nconstructor(private _compilerFactory: CompilerFactory) {}\n/**\n * @param {?} options\n * @return {?}\n */\ncreateTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const /** @type {?} */ compiler = /** @type {?} */(( <JitCompiler>this._compilerFactory.createCompiler(options)));\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver),\n        compiler.injector.get(CompileMetadataResolver));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: CompilerFactory, },\n];\n}\n\nfunction TestingCompilerFactoryImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nTestingCompilerFactoryImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestingCompilerFactoryImpl.ctorParameters;\n/** @type {?} */\nTestingCompilerFactoryImpl.prototype._compilerFactory;\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\nprivate _overrider = new MetadataOverrider();\n/**\n * @param {?} _compiler\n * @param {?} _directiveResolver\n * @param {?} _pipeResolver\n * @param {?} _moduleResolver\n * @param {?} _metadataResolver\n */\nconstructor(\nprivate _compiler: JitCompiler,\nprivate _directiveResolver: MockDirectiveResolver,\nprivate _pipeResolver: MockPipeResolver,\nprivate _moduleResolver: MockNgModuleResolver,\nprivate _metadataResolver: CompileMetadataResolver) {}\n/**\n * @return {?}\n */\nget injector(): Injector { return this._compiler.injector; }\n/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n/**\n * @param {?} component\n * @return {?}\n */\ngetNgContentSelectors(component: Type<any>): string[] {\n    return this._compiler.getNgContentSelectors(component);\n  }\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\ngetComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n/**\n * @param {?} type\n * @return {?}\n */\ncheckOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n/**\n * @param {?} ngModule\n * @param {?} override\n * @return {?}\n */\noverrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const /** @type {?} */ oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n  }\n/**\n * @param {?} directive\n * @param {?} override\n * @return {?}\n */\noverrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const /** @type {?} */ oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, /** @type {?} */(( oldMetadata)), override));\n  }\n/**\n * @param {?} component\n * @param {?} override\n * @return {?}\n */\noverrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const /** @type {?} */ oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, /** @type {?} */(( oldMetadata)), override));\n  }\n/**\n * @param {?} pipe\n * @param {?} override\n * @return {?}\n */\noverridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const /** @type {?} */ oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n  }\n/**\n * @param {?} summaries\n * @return {?}\n */\nloadAotSummaries(summaries: () => any[]) { this._compiler.loadAotSummaries(summaries); }\n/**\n * @return {?}\n */\nclearCache(): void { this._compiler.clearCache(); }\n/**\n * @param {?} type\n * @return {?}\n */\nclearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n}\n\nfunction TestingCompilerImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nTestingCompilerImpl.prototype._overrider;\n/** @type {?} */\nTestingCompilerImpl.prototype._compiler;\n/** @type {?} */\nTestingCompilerImpl.prototype._directiveResolver;\n/** @type {?} */\nTestingCompilerImpl.prototype._pipeResolver;\n/** @type {?} */\nTestingCompilerImpl.prototype._moduleResolver;\n/** @type {?} */\nTestingCompilerImpl.prototype._metadataResolver;\n}\n\n/**\n * Platform for dynamic tests\n * \n * \\@experimental\n */\nexport const /** @type {?} */ platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {\n        provide: COMPILER_OPTIONS,\n        useValue: {\n          providers: [\n            {provide: MockPipeResolver, deps: [Injector, CompileReflector]},\n            {provide: PipeResolver, useExisting: MockPipeResolver},\n            {provide: MockDirectiveResolver, deps: [Injector, CompileReflector]},\n            {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n            {provide: MockNgModuleResolver, deps: [Injector, CompileReflector]},\n            {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n          ]\n        },\n        multi: true\n      },\n      {\n        provide: TestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [CompilerFactory]\n      }\n    ]);\n"]}