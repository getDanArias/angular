{"version":3,"sources":["../../../../packages/forms/src/validators.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAAe,aAAA,IAAiB,YAAA,EAAc,UAAA,IAAc,SAAA,EAAU,MAAA,eAAA,CAAA;AAO/E,OALO,EAAA,QAAE,EAAQ,MAAA,0BAAA,CAAA;AAMjB,OALO,EAAA,WAAE,EAAW,MAAA,6BAAA,CAAA;AAMpB,OALO,EAAA,GAAE,EAAG,MAAA,mBAAA,CAAA;AAQZ;;;GAGG;AACH,2BAR2B,KAAO;IAShC,8DAA8D;IAC9D,MAAM,CARC,KAAA,IAAS,IAAA,IAAQ,KAAA,CAAM,MAAC,KAAU,CAAA,CAAE;AAS7C,CAAC;AACD;;;;;;GAMG;AACH,MAPC,CAAM,MAAA,gBAAA,CAAM,aAAA,GAAgB,IAAI,cAAA,CAAyC,cAAE,CAAc,CAAC;AAQ3F;;;;;;;;;GASG;AACH,MANC,CAAM,MAAA,gBAAA,CAAM,mBAAA,GAOT,IANI,cAAA,CAAyC,mBAAE,CAAmB,CAAC;AAQvE,MAAM,gBAAgB,CANhB,YAAA,GAOF,4LAA4L,CANC;AAOjM;;;;;;;;;;;;;GAaG;AACH,MALC;IAMD;;;;OAIG;IACH,MAPG,CAAM,GAAA,CAAI,GAAK;QAQd,MAAM,CAPC,CAAA,OAAU;YAQf,EAAE,CAAC,CAAC,iBAPC,CAAiB,OAAC,CAAO,KAAC,CAAK,IAAI,iBAAA,CAAkB,GAAC,CAAG,CAAC,CAAC,CAAA;gBAQ9D,MAAM,CAPC,IAAA,CAAK,CAAC,yDAAA;YAQf,CAAC;YACD,MAAM,gBAAgB,CAPhB,KAAA,GAAQ,UAAA,CAAW,OAAC,CAAO,KAAC,CAAK,CAAC;YAQxC,2EAA2E;YAC3E,0FAA0F;YAC1F,MAAM,CAPC,CAAA,KAAE,CAAK,KAAC,CAAK,IAAI,KAAA,GAAQ,GAAA,GAAM,EAAA,KAAE,EAAM,EAAA,KAAE,EAAM,GAAA,EAAK,QAAA,EAAU,OAAA,CAAQ,KAAC,EAAK,EAAC,GAAG,IAAA,CAAK;QAQ9F,CAAC,CAPC;IAQJ,CAAC;IACH;;;;OAIG;IACH,MARG,CAAM,GAAA,CAAI,GAAK;QASd,MAAM,CARC,CAAA,OAAU;YASf,EAAE,CAAC,CAAC,iBARC,CAAiB,OAAC,CAAO,KAAC,CAAK,IAAI,iBAAA,CAAkB,GAAC,CAAG,CAAC,CAAC,CAAA;gBAS9D,MAAM,CARC,IAAA,CAAK,CAAC,yDAAA;YASf,CAAC;YACD,MAAM,gBAAgB,CARhB,KAAA,GAAQ,UAAA,CAAW,OAAC,CAAO,KAAC,CAAK,CAAC;YASxC,2EAA2E;YAC3E,0FAA0F;YAC1F,MAAM,CARC,CAAA,KAAE,CAAK,KAAC,CAAK,IAAI,KAAA,GAAQ,GAAA,GAAM,EAAA,KAAE,EAAM,EAAA,KAAE,EAAM,GAAA,EAAK,QAAA,EAAU,OAAA,CAAQ,KAAC,EAAK,EAAC,GAAG,IAAA,CAAK;QAS9F,CAAC,CARC;IASJ,CAAC;IACH;;;;OAIG;IACH,MATG,CAAM,QAAA,CAAS,OAAS;QAUvB,MAAM,CATC,iBAAA,CAAkB,OAAC,CAAO,KAAC,CAAK,GAAG,EAAA,UAAE,EAAW,IAAA,EAAK,GAAG,IAAA,CAAK;IAUtE,CAAC;IACH;;;;OAIG;IACH,MAVG,CAAM,YAAA,CAAa,OAAS;QAW3B,MAAM,CAVC,OAAA,CAAQ,KAAC,KAAS,IAAA,GAAO,IAAA,GAAO,EAAA,UAAE,EAAW,IAAA,EAAK,CAAC;IAW5D,CAAC;IACH;;;;OAIG;IACH,MAXG,CAAM,KAAA,CAAM,OAAS;QAYpB,MAAM,CAXC,YAAA,CAAa,IAAC,CAAI,OAAC,CAAO,KAAC,CAAK,GAAG,IAAA,GAAO,EAAA,OAAE,EAAQ,IAAA,EAAK,CAAC;IAYnE,CAAC;IACH;;;;OAIG;IACH,MAZG,CAAM,SAAA,CAAU,SAAW;QAa1B,MAAM,CAZC,CAAA,OAAU;YAaf,EAAE,CAAC,CAAC,iBAZC,CAAiB,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC,CAAA;gBAapC,MAAM,CAZC,IAAA,CAAK,CAAC,yDAAA;YAaf,CAAC;YACD,MAAM,gBAAgB,CAZhB,MAAA,GAAiB,OAAA,CAAQ,KAAC,GAAO,OAAA,CAAQ,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE;YAahE,MAAM,CAZC,MAAA,GAAS,SAAA;gBAaZ,EAAC,WAZC,EAAY,EAAA,gBAAE,EAAiB,SAAA,EAAW,cAAA,EAAgB,MAAA,EAAO,EAAC;gBAapE,IAAI,CAZC;QAaX,CAAC,CAZC;IAaJ,CAAC;IACH;;;;OAIG;IACH,MAbG,CAAM,SAAA,CAAU,SAAW;QAc1B,MAAM,CAbC,CAAA,OAAU;YAcf,MAAM,gBAAgB,CAbhB,MAAA,GAAiB,OAAA,CAAQ,KAAC,GAAO,OAAA,CAAQ,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE;YAchE,MAAM,CAbC,MAAA,GAAS,SAAA;gBAcZ,EAAC,WAbC,EAAY,EAAA,gBAAE,EAAiB,SAAA,EAAW,cAAA,EAAgB,MAAA,EAAO,EAAC;gBAcpE,IAAI,CAbC;QAcX,CAAC,CAbC;IAcJ,CAAC;IACH;;;;OAIG;IACH,MAdG,CAAM,OAAA,CAAQ,OAAiB;QAe9B,EAAE,CAAC,CAAC,CAdC,OAAC,CAAO;YAAC,MAAA,CAAO,UAAA,CAAW,aAAC,CAAa;QAe9C,IAAI,gBAAgB,CAdhB,KAAO,CAAO;QAelB,IAAI,gBAAgB,CAdhB,QAAU,CAAO;QAerB,EAAE,CAAC,CAAC,OAdO,OAAA,KAAY,QAAA,CAAS,CAAC,CAAA;YAe/B,QAAQ,GAdG,IAAA,OAAK,GAAO,CAAG;YAe1B,KAAK,GAdG,IAAI,MAAA,CAAO,QAAC,CAAQ,CAAC;QAe/B,CAAC;QAdC,IAAA,CAAK,CAAA;YAeL,QAAQ,GAdG,OAAA,CAAQ,QAAC,EAAQ,CAAE;YAe9B,KAAK,GAdG,OAAA,CAAQ;QAelB,CAAC;QACD,MAAM,CAdC,CAAA,OAAU;YAef,EAAE,CAAC,CAAC,iBAdC,CAAiB,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC,CAAA;gBAepC,MAAM,CAdC,IAAA,CAAK,CAAC,yDAAA;YAef,CAAC;YACD,MAAM,gBAAgB,CAdhB,KAAA,GAAgB,OAAA,CAAQ,KAAC,CAAK;YAepC,MAAM,CAdC,KAAA,CAAM,IAAC,CAAI,KAAC,CAAK,GAAG,IAAA;gBAeA,EAAC,SAdC,EAAU,EAAA,iBAAE,EAAkB,QAAA,EAAU,aAAA,EAAe,KAAA,EAAM,EAAC,CAAC;QAe9F,CAAC,CAdC;IAeJ,CAAC;IACH;;;;OAIG;IACH,MAfG,CAAM,aAAA,CAAc,CAAG,IAA0C,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAuBjF;;;OAGG;IACH,MAnBG,CAAM,OAAA,CAAQ,UAA4C;QAoBzD,EAAE,CAAC,CAAC,CAnBC,UAAC,CAAU;YAAC,MAAA,CAAO,IAAA,CAAK;QAoB7B,MAAM,gBAAgB,CAnBhB,iBAAA,GAAiC,CAAE,UAAA,CAAW,MAAC,CAAM,SAAC,CAAa,CAAA,CAAI;QAoB7E,EAAE,CAAC,CAAC,iBAnBC,CAAiB,MAAC,IAAS,CAAA,CAAE;YAAC,MAAA,CAAO,IAAA,CAAK;QAqB/C,MAAM,CAnBC,UAAA,OAAkB;YAoBvB,MAAM,CAnBC,YAAA,CAAa,kBAAC,CAAkB,OAAC,EAAQ,iBAAA,CAAkB,CAAC,CAAC;QAoBtE,CAAC,CAnBC;IAoBJ,CAAC;IACH;;;OAGG;IACH,MAtBG,CAAM,YAAA,CAAa,UAAoC;QAuBtD,EAAE,CAAC,CAAC,CAtBC,UAAC,CAAU;YAAC,MAAA,CAAO,IAAA,CAAK;QAuB7B,MAAM,gBAAgB,CAtBhB,iBAAA,GAAsC,CAAE,UAAA,CAAW,MAAC,CAAM,SAAC,CAAa,CAAA,CAAI;QAuBlF,EAAE,CAAC,CAAC,iBAtBC,CAAiB,MAAC,IAAS,CAAA,CAAE;YAAC,MAAA,CAAO,IAAA,CAAK;QAwB/C,MAAM,CAtBC,UAAA,OAAkB;YAuBvB,MAAM,gBAAgB,CAtBhB,WAAA,GAAc,uBAAA,CAAwB,OAAC,EAAQ,iBAAA,CAAkB,CAAC,GAAC,CAAG,YAAC,CAAY,CAAC;YAuB1F,MAAM,CAtBC,GAAA,CAAI,IAAC,CAAI,QAAC,CAAQ,WAAC,CAAW,EAAE,YAAA,CAAa,CAAC;QAuBvD,CAAC,CAtBC;IAuBJ,CAAC;CArBF;AAuBD;;;GAGG;AACH,mBAzBmB,CAAG;IA0BpB,MAAM,CAzBC,CAAA,IAAK,IAAA,CAAK;AA0BnB,CAAC;AACD;;;GAGG;AACH,MA5BC,uBAA4B,CAAG;IA6B9B,MAAM,gBAAgB,CA5BhB,GAAA,GAAM,SAAA,CAAU,CAAC,CAAC,GAAG,WAAA,CAAY,CAAC,CAAC,GAAG,CAAA,CAAE;IA6B9C,EAAE,CAAC,CAAC,CA5BC,CAAC,YAAC,CAAY,GAAC,CAAG,CAAC,CAAC,CAAC,CAAA;QA6BxB,MA5BM,IAAI,KAAA,CAAM,qDAAC,CAAqD,CAAC;IA6BzE,CAAC;IACD,MAAM,CA5BC,GAAA,CAAI;AA6Bb,CAAC;AACD;;;;GAIG;AACH,4BAhC4B,OAAS,EAAiB,UAAwB;IAiC5E,MAAM,CAhCC,UAAA,CAAW,GAAC,CAAG,CAAC,IAAI,CAAA,CAAE,OAAC,CAAO,CAAC,CAAC;AAiCzC,CAAC;AACD;;;;GAIG;AACH,iCApCiC,OAAS,EAAiB,UAA6B;IAqCtF,MAAM,CApCC,UAAA,CAAW,GAAC,CAAG,CAAC,IAAI,CAAA,CAAE,OAAC,CAAO,CAAC,CAAC;AAqCzC,CAAC;AACD;;;GAGG;AACH,sBAvCsB,aAAgC;IAwCpD,MAAM,gBAAgB,CAvChB,GAAA,GAwCF,aAAa,CAvCC,MAAC,CAAM,CAAC,GAAwB,EAAM,MAA2B;QAwC7E,MAAM,CAvCC,MAAA,IAAU,IAAA,qBAAS,gBAAA,CAAA,CAAA,CAAA,GAAG,CAAA,CAAA,EAAM,MAAI,IAAO,CAAA,CAAE,GAAA,CAAA,CAAA,CAAM;IAwCxD,CAAC,EAvCE,EAAA,CAAG,CAAC;IAwCX,MAAM,CAvCC,MAAA,CAAO,IAAC,CAAI,GAAC,CAAG,CAAC,MAAC,KAAU,CAAA,GAAI,IAAA,GAAO,GAAA,CAAI;AAwCpD,CAAC","file":"validators.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, ɵisObservable as isObservable, ɵisPromise as isPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {map} from 'rxjs/operator/map';\nimport {AsyncValidatorFn, ValidationErrors, Validator, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormControl} from './model';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value: any): boolean {\n  // we don't check for string here so it also works with arrays\n  return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n * \n * Provide this using `multi: true` to add validators.\n * \n * \\@stable\n */\nexport const /** @type {?} */ NG_VALIDATORS = new InjectionToken<Array<Validator|Function>>('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n * \n * Provide this using `multi: true` to add validators.\n * \n * See {\\@link NG_VALIDATORS} for more details.\n * \n * \\@stable\n */\nexport const /** @type {?} */ NG_ASYNC_VALIDATORS =\n    new InjectionToken<Array<Validator|Function>>('NgAsyncValidators');\n\nconst /** @type {?} */ EMAIL_REGEXP =\n    /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n * \n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n * \n * ### Example\n * \n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n * \n * \\@stable\n */\nexport class Validators {\n/**\n * Validator that requires controls to have a value greater than a number.\n * @param {?} min\n * @return {?}\n */\nstatic min(min: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n      return !isNaN(value) && value < min ? {'min': {'min': min, 'actual': control.value}} : null;\n    };\n  }\n/**\n * Validator that requires controls to have a value less than a number.\n * @param {?} max\n * @return {?}\n */\nstatic max(max: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n      return !isNaN(value) && value > max ? {'max': {'max': max, 'actual': control.value}} : null;\n    };\n  }\n/**\n * Validator that requires controls to have a non-empty value.\n * @param {?} control\n * @return {?}\n */\nstatic required(control: AbstractControl): ValidationErrors|null {\n    return isEmptyInputValue(control.value) ? {'required': true} : null;\n  }\n/**\n * Validator that requires control value to be true.\n * @param {?} control\n * @return {?}\n */\nstatic requiredTrue(control: AbstractControl): ValidationErrors|null {\n    return control.value === true ? null : {'required': true};\n  }\n/**\n * Validator that performs email validation.\n * @param {?} control\n * @return {?}\n */\nstatic email(control: AbstractControl): ValidationErrors|null {\n    return EMAIL_REGEXP.test(control.value) ? null : {'email': true};\n  }\n/**\n * Validator that requires controls to have a value of a minimum length.\n * @param {?} minLength\n * @return {?}\n */\nstatic minLength(minLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ length: number = control.value ? control.value.length : 0;\n      return length < minLength ?\n          {'minlength': {'requiredLength': minLength, 'actualLength': length}} :\n          null;\n    };\n  }\n/**\n * Validator that requires controls to have a value of a maximum length.\n * @param {?} maxLength\n * @return {?}\n */\nstatic maxLength(maxLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const /** @type {?} */ length: number = control.value ? control.value.length : 0;\n      return length > maxLength ?\n          {'maxlength': {'requiredLength': maxLength, 'actualLength': length}} :\n          null;\n    };\n  }\n/**\n * Validator that requires a control to match a regex to its value.\n * @param {?} pattern\n * @return {?}\n */\nstatic pattern(pattern: string|RegExp): ValidatorFn {\n    if (!pattern) return Validators.nullValidator;\n    let /** @type {?} */ regex: RegExp;\n    let /** @type {?} */ regexStr: string;\n    if (typeof pattern === 'string') {\n      regexStr = `^${pattern}$`;\n      regex = new RegExp(regexStr);\n    } else {\n      regexStr = pattern.toString();\n      regex = pattern;\n    }\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ value: string = control.value;\n      return regex.test(value) ? null :\n                                 {'pattern': {'requiredPattern': regexStr, 'actualValue': value}};\n    };\n  }\n/**\n * No-op validator.\n * @param {?} c\n * @return {?}\n */\nstatic nullValidator(c: AbstractControl): ValidationErrors|null { return null; }\n\n  /**\n   * Compose multiple validators into a single function that returns the union\n   * of the individual error maps.\n   */\n  static compose(validators: null): null;\n  static compose(validators: (ValidatorFn|null|undefined)[]): ValidatorFn|null;\n/**\n * @param {?} validators\n * @return {?}\n */\nstatic compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null {\n    if (!validators) return null;\n    const /** @type {?} */ presentValidators: ValidatorFn[] = /** @type {?} */(( validators.filter(isPresent) as any));\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      return _mergeErrors(_executeValidators(control, presentValidators));\n    };\n  }\n/**\n * @param {?} validators\n * @return {?}\n */\nstatic composeAsync(validators: (AsyncValidatorFn|null)[]): AsyncValidatorFn|null {\n    if (!validators) return null;\n    const /** @type {?} */ presentValidators: AsyncValidatorFn[] = /** @type {?} */(( validators.filter(isPresent) as any));\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      const /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n      return map.call(forkJoin(observables), _mergeErrors);\n    };\n  }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o: any): boolean {\n  return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function toObservable(r: any): Observable<any> {\n  const /** @type {?} */ obs = isPromise(r) ? fromPromise(r) : r;\n  if (!(isObservable(obs))) {\n    throw new Error(`Expected validator to return Promise or Observable.`);\n  }\n  return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control: AbstractControl, validators: ValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control: AbstractControl, validators: AsyncValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors|null {\n  const /** @type {?} */ res: {[key: string]: any} =\n      arrayOfErrors.reduce((res: ValidationErrors | null, errors: ValidationErrors | null) => {\n        return errors != null ? {... /** @type {?} */((res)), ...errors} : /** @type {?} */(( res));\n      }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\n"]}