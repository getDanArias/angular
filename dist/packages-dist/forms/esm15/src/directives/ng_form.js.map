{"version":3,"sources":["../../../../../packages/forms/src/directives/ng_form.ts"],"names":[],"mappings":"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","file":"ng_form.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, Optional, Self, forwardRef} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from './shared';\n\nexport const /** @type {?} */ formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst /** @type {?} */ resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n * \n * \\@howToUse \n * \n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n * \n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n * \n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n * \n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgForm extends ControlContainer implements Form {\nprivate _submitted: boolean = false;\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n/**\n * @return {?}\n */\nget submitted(): boolean { return this._submitted; }\n/**\n * @return {?}\n */\nget formDirective(): Form { return this; }\n/**\n * @return {?}\n */\nget control(): FormGroup { return this.form; }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      dir._control = /** @type {?} */(( <FormControl>container.registerControl(dir.name, dir.control)));\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: NgModel): FormControl { return /** @type {?} */(( <FormControl>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      const /** @type {?} */ group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormGroup(dir: NgModelGroup): FormGroup { return /** @type {?} */(( <FormGroup>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ ctrl = /** @type {?} */(( <FormControl>this.form.get( /** @type {?} */((dir.path)))));\n      ctrl.setValue(value);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nsetValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n/**\n * @return {?}\n */\nonReset(): void { this.resetForm(); }\n/**\n * @param {?=} value\n * @return {?}\n */\nresetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n/**\n * \\@internal\n * @param {?} path\n * @return {?}\n */\n_findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? /** @type {?} */(( <FormGroup>this.form.get(path))) : this.form;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\nfunction NgForm_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForm.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForm.ctorParameters;\n/** @type {?} */\nNgForm.prototype._submitted;\n/** @type {?} */\nNgForm.prototype.form;\n/** @type {?} */\nNgForm.prototype.ngSubmit;\n}\n\n"]}