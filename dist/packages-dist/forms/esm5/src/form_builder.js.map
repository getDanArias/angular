{"version":3,"sources":["../../../../../packages/forms/src/form_builder.ts"],"names":[],"mappings":"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","file":"form_builder.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n * \n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n * \n * \\@howToUse \n * \n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n * \n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  * **NgModule**: {\\@link ReactiveFormsModule}\n * \n * \\@stable\n */\nexport class FormBuilder {\n/**\n * Construct a new {\\@link FormGroup} with the given map of configuration.\n * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n * \n * See the {\\@link FormGroup} constructor for more details.\n * @param {?} controlsConfig\n * @param {?=} extra\n * @return {?}\n */\ngroup(controlsConfig: {[key: string]: any}, extra: {[key: string]: any}|null = null): FormGroup {\n    const /** @type {?} */ controls = this._reduceControls(controlsConfig);\n    const /** @type {?} */ validator: ValidatorFn = extra != null ? extra['validator'] : null;\n    const /** @type {?} */ asyncValidator: AsyncValidatorFn = extra != null ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n/**\n * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n * `asyncValidator`.\n * \n * `formState` can either be a standalone value for the form control or an object\n * that contains both a value and a disabled status.\n * \n * @param {?} formState\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\ncontrol(\n      formState: Object, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n/**\n * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n * configuration, with the given optional `validator` and `asyncValidator`.\n * @param {?} controlsConfig\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\narray(\n      controlsConfig: any[], validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null): FormArray {\n    const /** @type {?} */ controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n/**\n * \\@internal\n * @param {?} controlsConfig\n * @return {?}\n */\n_reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const /** @type {?} */ controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n/**\n * \\@internal\n * @param {?} controlConfig\n * @return {?}\n */\n_createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const /** @type {?} */ value = controlConfig[0];\n      const /** @type {?} */ validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const /** @type {?} */ asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction FormBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nFormBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormBuilder.ctorParameters;\n}\n\n"]}