{"version":3,"sources":["../../../../../packages/forms/src/model.ts"],"names":[],"mappings":"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","file":"model.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {composeAsyncValidators, composeValidators} from './directives/shared';\nimport {AsyncValidatorFn, ValidationErrors, ValidatorFn} from './directives/validators';\nimport {toObservable} from './validators';\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nexport const /** @type {?} */ VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nexport const /** @type {?} */ INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const /** @type {?} */ PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nexport const /** @type {?} */ DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control: AbstractControl, path: Array<string|number>| string, delimiter: string) {\n  if (path == null) return null;\n\n  if (!(path instanceof Array)) {\n    path = ( /** @type {?} */((<string>path))).split(delimiter);\n  }\n  if (path instanceof Array && (path.length === 0)) return null;\n\n  return ( /** @type {?} */((<Array<string|number>>path))).reduce((v: AbstractControl, name) => {\n    if (v instanceof FormGroup) {\n      return v.controls[name] || null;\n    }\n\n    if (v instanceof FormArray) {\n      return v.at( /** @type {?} */((<number>name))) || null;\n    }\n\n    return null;\n  }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): ValidatorFn|\n    null {\n  const /** @type {?} */ validator = /** @type {?} */((\n      (isOptionsObj(validatorOrOpts) ? ( /** @type {?} */((validatorOrOpts as AbstractControlOptions))).validators :\n                                       validatorOrOpts) as ValidatorFn |\n      ValidatorFn[] | null));\n\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null, validatorOrOpts?: ValidatorFn |\n        ValidatorFn[] | AbstractControlOptions | null): AsyncValidatorFn|null {\n  const /** @type {?} */ origAsyncValidator = /** @type {?} */((\n      (isOptionsObj(validatorOrOpts) ? ( /** @type {?} */((validatorOrOpts as AbstractControlOptions))).asyncValidators :\n                                       asyncValidator) as AsyncValidatorFn |\n      AsyncValidatorFn | null));\n\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n                                             origAsyncValidator || null;\n}\n\nexport type FormHooks = 'change' | 'blur' | 'submit';\n/**\n * @record\n */\nexport function AbstractControlOptions() {}\n\n\nfunction AbstractControlOptions_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nAbstractControlOptions.prototype.validators;\n/** @type {?|undefined} */\nAbstractControlOptions.prototype.asyncValidators;\n/** @type {?|undefined} */\nAbstractControlOptions.prototype.updateOn;\n}\n\n\nexport interface AbstractControlOptions {\n  validators?: ValidatorFn|ValidatorFn[]|null;\n  asyncValidators?: AsyncValidatorFn|AsyncValidatorFn[]|null;\n  updateOn?: FormHooks;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): boolean {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n      typeof validatorOrOpts === 'object';\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n * \n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class AbstractControl {\n/**\n * \\@internal\n */\n_value: any;\n/**\n * \\@internal\n */\n_pendingDirty: boolean;\n/**\n * \\@internal\n */\n_pendingTouched: boolean;\n/**\n * \\@internal\n */\n_onCollectionChange = () => {};\n/**\n * \\@internal\n */\n_updateOn: FormHooks;\nprivate _valueChanges: EventEmitter<any>;\nprivate _statusChanges: EventEmitter<any>;\nprivate _status: string;\nprivate _errors: ValidationErrors|null;\nprivate _pristine: boolean = true;\nprivate _touched: boolean = false;\nprivate _parent: FormGroup|FormArray;\nprivate _asyncValidationSubscription: any;\n/**\n * @param {?} validator\n * @param {?} asyncValidator\n */\nconstructor(public validator: ValidatorFn|null,\npublic asyncValidator: AsyncValidatorFn|null) {}\n/**\n * The value of the control.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * The parent control.\n * @return {?}\n */\nget parent(): FormGroup|FormArray { return this._parent; }\n/**\n * The validation status of the control. There are four possible\n * validation statuses:\n * \n * * **VALID**:  control has passed all validation checks\n * * **INVALID**: control has failed at least one validation check\n * * **PENDING**: control is in the midst of conducting a validation check\n * * **DISABLED**: control is exempt from validation checks\n * \n * These statuses are mutually exclusive, so a control cannot be\n * both valid AND invalid or invalid AND disabled.\n * @return {?}\n */\nget status(): string { return this._status; }\n/**\n * A control is `valid` when its `status === VALID`.\n * \n * In order to have this status, the control must have passed all its\n * validation checks.\n * @return {?}\n */\nget valid(): boolean { return this._status === VALID; }\n/**\n * A control is `invalid` when its `status === INVALID`.\n * \n * In order to have this status, the control must have failed\n * at least one of its validation checks.\n * @return {?}\n */\nget invalid(): boolean { return this._status === INVALID; }\n/**\n * A control is `pending` when its `status === PENDING`.\n * \n * In order to have this status, the control must be in the\n * middle of conducting a validation check.\n * @return {?}\n */\nget pending(): boolean { return this._status == PENDING; }\n/**\n * A control is `disabled` when its `status === DISABLED`.\n * \n * Disabled controls are exempt from validation checks and\n * are not included in the aggregate value of their ancestor\n * controls.\n * @return {?}\n */\nget disabled(): boolean { return this._status === DISABLED; }\n/**\n * A control is `enabled` as long as its `status !== DISABLED`.\n * \n * In other words, it has a status of `VALID`, `INVALID`, or\n * `PENDING`.\n * @return {?}\n */\nget enabled(): boolean { return this._status !== DISABLED; }\n/**\n * Returns any errors generated by failing validation. If there\n * are no errors, it will return null.\n * @return {?}\n */\nget errors(): ValidationErrors|null { return this._errors; }\n/**\n * A control is `pristine` if the user has not yet changed\n * the value in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget pristine(): boolean { return this._pristine; }\n/**\n * A control is `dirty` if the user has changed the value\n * in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget dirty(): boolean { return !this.pristine; }\n/**\n * A control is marked `touched` once the user has triggered\n * a `blur` event on it.\n * @return {?}\n */\nget touched(): boolean { return this._touched; }\n/**\n * A control is `untouched` if the user has not yet triggered\n * a `blur` event on it.\n * @return {?}\n */\nget untouched(): boolean { return !this._touched; }\n/**\n * Emits an event every time the value of the control changes, in\n * the UI or programmatically.\n * @return {?}\n */\nget valueChanges(): Observable<any> { return this._valueChanges; }\n/**\n * Emits an event every time the validation status of the control\n * is re-calculated.\n * @return {?}\n */\nget statusChanges(): Observable<any> { return this._statusChanges; }\n/**\n * Returns the update strategy of the `AbstractControl` (i.e.\n * the event on which the control will update itself).\n * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n * @return {?}\n */\nget updateOn(): FormHooks {\n    return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n  }\n/**\n * Sets the synchronous validators that are active on this control.  Calling\n * this will overwrite any existing sync validators.\n * @param {?} newValidator\n * @return {?}\n */\nsetValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void {\n    this.validator = coerceToValidator(newValidator);\n  }\n/**\n * Sets the async validators that are active on this control. Calling this\n * will overwrite any existing async validators.\n * @param {?} newValidator\n * @return {?}\n */\nsetAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]): void {\n    this.asyncValidator = coerceToAsyncValidator(newValidator);\n  }\n/**\n * Empties out the sync validator list.\n * @return {?}\n */\nclearValidators(): void { this.validator = null; }\n/**\n * Empties out the async validator list.\n * @return {?}\n */\nclearAsyncValidators(): void { this.asyncValidator = null; }\n/**\n * Marks the control as `touched`.\n * \n * This will also mark all direct ancestors as `touched` to maintain\n * the model.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsTouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = true;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched(opts);\n    }\n  }\n/**\n * Marks the control as `untouched`.\n * \n * If the control has any children, it will also mark all children as `untouched`\n * to maintain the model, and re-calculate the `touched` status of all parent\n * controls.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsUntouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = false;\n    this._pendingTouched = false;\n\n    this._forEachChild(\n        (control: AbstractControl) => { control.markAsUntouched({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n/**\n * Marks the control as `dirty`.\n * \n * This will also mark all direct ancestors as `dirty` to maintain\n * the model.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsDirty(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = false;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty(opts);\n    }\n  }\n/**\n * Marks the control as `pristine`.\n * \n * If the control has any children, it will also mark all children as `pristine`\n * to maintain the model, and re-calculate the `pristine` status of all parent\n * controls.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsPristine(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = true;\n    this._pendingDirty = false;\n\n    this._forEachChild((control: AbstractControl) => { control.markAsPristine({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n/**\n * Marks the control as `pending`.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsPending(opts: {onlySelf?: boolean} = {}): void {\n    this._status = PENDING;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending(opts);\n    }\n  }\n/**\n * Disables the control. This means the control will be exempt from validation checks and\n * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n * \n * If the control has children, all children will be disabled to maintain the model.\n * @param {?=} opts\n * @return {?}\n */\ndisable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = DISABLED;\n    this._errors = null;\n    this._forEachChild((control: AbstractControl) => { control.disable({onlySelf: true}); });\n    this._updateValue();\n\n    if (opts.emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    this._updateAncestors(!!opts.onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n/**\n * Enables the control. This means the control will be included in validation checks and\n * the aggregate value of its parent. Its status is re-calculated based on its value and\n * its validators.\n * \n * If the control has children, all children will be enabled.\n * @param {?=} opts\n * @return {?}\n */\nenable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = VALID;\n    this._forEachChild((control: AbstractControl) => { control.enable({onlySelf: true}); });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n\n    this._updateAncestors(!!opts.onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n/**\n * @param {?} onlySelf\n * @return {?}\n */\n\nprivate _updateAncestors(onlySelf: boolean) {\n    if (this._parent && !onlySelf) {\n      this._parent.updateValueAndValidity();\n      this._parent._updatePristine();\n      this._parent._updateTouched();\n    }\n  }\n/**\n * @param {?} parent\n * @return {?}\n */\nsetParent(parent: FormGroup|FormArray): void { this._parent = parent; }\n\n  /**\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract setValue(value: any, options?: Object): void;\n\n  /**\n   * Patches the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract patchValue(value: any, options?: Object): void;\n\n  /**\n   * Resets the control. Abstract method (implemented in sub-classes).\n   */\n  abstract reset(value?: any, options?: Object): void;\n/**\n * Re-calculates the value and validation status of the control.\n * \n * By default, it will also update the value and validity of its ancestors.\n * @param {?=} opts\n * @return {?}\n */\nupdateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      this._cancelExistingSubscription();\n      this._errors = this._runValidator();\n      this._status = this._calculateStatus();\n\n      if (this._status === VALID || this._status === PENDING) {\n        this._runAsyncValidator(opts.emitEvent);\n      }\n    }\n\n    if (opts.emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n    }\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n  }\n/**\n * @return {?}\n */\n\nprivate _setInitialStatus() { this._status = this._allControlsDisabled() ? DISABLED : VALID; }\n/**\n * @return {?}\n */\n\nprivate _runValidator(): ValidationErrors|null {\n    return this.validator ? this.validator(this) : null;\n  }\n/**\n * @param {?=} emitEvent\n * @return {?}\n */\n\nprivate _runAsyncValidator(emitEvent?: boolean): void {\n    if (this.asyncValidator) {\n      this._status = PENDING;\n      const /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription =\n          obs.subscribe((errors: ValidationErrors | null) => this.setErrors(errors, {emitEvent}));\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate _cancelExistingSubscription(): void {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n    }\n  }\n/**\n * Sets errors on a form control.\n * \n * This is used when validations are run manually by the user, rather than automatically.\n * \n * Calling `setErrors` will also update the validity of the parent control.\n * \n * ### Example\n * \n * ```\n * const login = new FormControl(\"someLogin\");\n * login.setErrors({\n *   \"notUnique\": true\n * });\n * \n * expect(login.valid).toEqual(false);\n * expect(login.errors).toEqual({\"notUnique\": true});\n * \n * login.setValue(\"someOtherLogin\");\n * \n * expect(login.valid).toEqual(true);\n * ```\n * @param {?} errors\n * @param {?=} opts\n * @return {?}\n */\nsetErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void {\n    this._errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false);\n  }\n/**\n * Retrieves a child control given the control's name or path.\n * \n * Paths can be passed in as an array or a string delimited by a dot.\n * \n * To get a control nested within a `person` sub-group:\n * \n * * `this.form.get('person.name');`\n * \n * -OR-\n * \n * * `this.form.get(['person', 'name']);`\n * @param {?} path\n * @return {?}\n */\nget(path: Array<string|number>|string): AbstractControl|null { return _find(this, path, '.'); }\n/**\n * Returns true if the control with the given path has the error specified. Otherwise\n * returns null or undefined.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\ngetError(errorCode: string, path?: string[]): any {\n    const /** @type {?} */ control = path ? this.get(path) : this;\n    return control && control._errors ? control._errors[errorCode] : null;\n  }\n/**\n * Returns true if the control with the given path has the error specified. Otherwise\n * returns false.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\nhasError(errorCode: string, path?: string[]): boolean { return !!this.getError(errorCode, path); }\n/**\n * Retrieves the top-level ancestor of this control.\n * @return {?}\n */\nget root(): AbstractControl {\n    let /** @type {?} */ x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n/**\n * \\@internal\n * @param {?} emitEvent\n * @return {?}\n */\n_updateControlsErrors(emitEvent: boolean): void {\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n/**\n * @return {?}\n */\n\nprivate _calculateStatus(): string {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this._errors) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _forEachChild(cb: Function): void;\n\n  /** @internal */\n  abstract _anyControls(condition: Function): boolean;\n\n  /** @internal */\n  abstract _allControlsDisabled(): boolean;\n\n  /** @internal */\n  abstract _syncPendingControls(): boolean;\n/**\n * \\@internal\n * @param {?} status\n * @return {?}\n */\n_anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updatePristine(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = !this._anyControlsDirty();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updateTouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = this._anyControlsTouched();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n/**\n * \\@internal\n */\n_onDisabledChange: Function[] = [];\n/**\n * \\@internal\n * @param {?} formState\n * @return {?}\n */\n_isBoxedValue(formState: any): boolean {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n  }\n/**\n * \\@internal\n * @param {?} fn\n * @return {?}\n */\n_registerOnCollectionChange(fn: () => void): void { this._onCollectionChange = fn; }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_setUpdateStrategy(opts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null): void {\n    if (isOptionsObj(opts) && ( /** @type {?} */((opts as AbstractControlOptions))).updateOn != null) {\n      this._updateOn = /** @type {?} */(( ( /** @type {?} */((opts as AbstractControlOptions))).updateOn));\n    }\n  }\n}\n\nfunction AbstractControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._value;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._pendingDirty;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._pendingTouched;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._onCollectionChange;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._updateOn;\n/** @type {?} */\nAbstractControl.prototype._valueChanges;\n/** @type {?} */\nAbstractControl.prototype._statusChanges;\n/** @type {?} */\nAbstractControl.prototype._status;\n/** @type {?} */\nAbstractControl.prototype._errors;\n/** @type {?} */\nAbstractControl.prototype._pristine;\n/** @type {?} */\nAbstractControl.prototype._touched;\n/** @type {?} */\nAbstractControl.prototype._parent;\n/** @type {?} */\nAbstractControl.prototype._asyncValidationSubscription;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._onDisabledChange;\n/** @type {?} */\nAbstractControl.prototype.validator;\n/** @type {?} */\nAbstractControl.prototype.asyncValidator;\n\n/**\n * Sets the value of the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nAbstractControl.prototype.setValue = function(value, options) {};\n\n/**\n * Patches the value of the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nAbstractControl.prototype.patchValue = function(value, options) {};\n\n/**\n * Resets the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nAbstractControl.prototype.reset = function(value, options) {};\n\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\nAbstractControl.prototype._updateValue = function() {};\n\n/**\n * \\@internal\n * @abstract\n * @param {?} cb\n * @return {?}\n */\nAbstractControl.prototype._forEachChild = function(cb) {};\n\n/**\n * \\@internal\n * @abstract\n * @param {?} condition\n * @return {?}\n */\nAbstractControl.prototype._anyControls = function(condition) {};\n\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\nAbstractControl.prototype._allControlsDisabled = function() {};\n\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\nAbstractControl.prototype._syncPendingControls = function() {};\n}\n\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n * \n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n * \n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n * \n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n * \n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n * \n * The second {\\@link FormControl} argument can accept one of three things:\n * * a sync validator function\n * * an array of sync validator functions\n * * an options object containing validator and/or async validator functions\n * \n * Example of a single sync validator function:\n * \n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n * \n * Example using options object:\n * \n * ```ts\n * const ctrl = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n * \n * The options object can also be used to define when the control should update.\n * By default, the value and validity of a control updates whenever the value\n * changes. You can configure it to update on the blur event instead by setting\n * the `updateOn` option to `'blur'`.\n * \n * ```ts\n * const c = new FormControl('', { updateOn: 'blur' });\n * ```\n * \n * You can also set `updateOn` to `'submit'`, which will delay value and validity\n * updates until the parent form of the control fires a submit event.\n * \n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormControl extends AbstractControl {\n/**\n * \\@internal\n */\n_onChange: Function[] = [];\n/**\n * \\@internal\n */\n_pendingValue: any;\n/**\n * @param {?=} formState\n * @param {?=} validatorOrOpts\n * @param {?=} asyncValidator\n */\nconstructor(\n      formState: any = null,\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(\n        coerceToValidator(validatorOrOpts),\n        coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    this._applyFormState(formState);\n    this._setUpdateStrategy(validatorOrOpts);\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n/**\n * Set the value of the form control to `value`.\n * \n * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n * and not its parent component. This defaults to false.\n * \n * If `emitEvent` is `true`, this\n * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n * to true (as it falls through to `updateValueAndValidity`).\n * \n * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n * specified.\n * \n * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this._value = this._pendingValue = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach(\n          (changeFn) => changeFn(this._value, options.emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity(options);\n  }\n/**\n * Patches the value of a control.\n * \n * This function is functionally the same as {\\@link FormControl#setValue} at this level.\n * It exists for symmetry with {\\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,\n * where it does behave differently.\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n/**\n * Resets the form control. This means by default:\n * \n * * it is marked as `pristine`\n * * it is marked as `untouched`\n * * value is set to null\n * \n * You can also reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n * \n * Ex:\n * \n * ```ts\n * this.control.reset('Nancy');\n * \n * console.log(this.control.value);  // 'Nancy'\n * ```\n * \n * OR\n * \n * ```\n * this.control.reset({value: 'Nancy', disabled: true});\n * \n * console.log(this.control.value);  // 'Nancy'\n * console.log(this.control.status);  // 'DISABLED'\n * ```\n * @param {?=} formState\n * @param {?=} options\n * @return {?}\n */\nreset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this._value, options);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue() {}\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean { return false; }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean { return this.disabled; }\n/**\n * Register a listener for change events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void { this._onChange.push(fn); }\n/**\n * \\@internal\n * @return {?}\n */\n_clearChangeFns(): void {\n    this._onChange = [];\n    this._onDisabledChange = [];\n    this._onCollectionChange = () => {};\n  }\n/**\n * Register a listener for disabled events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function): void {}\n/**\n * \\@internal\n * @return {?}\n */\n_syncPendingControls(): boolean {\n    if (this.updateOn === 'submit') {\n      this.setValue(this._pendingValue, {onlySelf: true, emitModelToViewChange: false});\n      if (this._pendingDirty) this.markAsDirty();\n      if (this._pendingTouched) this.markAsTouched();\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} formState\n * @return {?}\n */\n\nprivate _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      this._value = this._pendingValue = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      this._value = this._pendingValue = formState;\n    }\n  }\n}\n\nfunction FormControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nFormControl.prototype._onChange;\n/**\n * \\@internal\n * @type {?}\n */\nFormControl.prototype._pendingValue;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n * \n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n * \n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n * \n * ### Example\n * \n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n * \n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n * \n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n * \n * ### Example\n * \n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n * \n * \n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n * \n * Like {\\@link FormControl} instances, you can alternatively choose to pass in\n * validators and async validators as part of an options object.\n * \n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\n * ```\n * \n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n * \n * ```ts\n * const c = new FormGroup({\n *    one: new FormControl()\n * }, {updateOn: 'blur'});\n * ```\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormGroup extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validatorOrOpts\n * @param {?=} asyncValidator\n */\nconstructor(\npublic controls: {[key: string]: AbstractControl},\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(\n        coerceToValidator(validatorOrOpts),\n        coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n * Registers a control with the group's list of controls.\n * \n * This method does not update value or validity of the control, so for\n * most cases you'll want to use {\\@link FormGroup#addControl} instead.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\nregisterControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n/**\n * Add a control to this group.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\naddControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Remove a control from this group.\n * @param {?} name\n * @return {?}\n */\nremoveControl(name: string): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Replace an existing control.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\nsetControl(name: string, control: AbstractControl): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Check whether there is an enabled control with the given name in the group.\n * \n * It will return false for disabled controls. If you'd like to check for\n * existence in the group only, use {\\@link AbstractControl#get} instead.\n * @param {?} controlName\n * @return {?}\n */\ncontains(controlName: string): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n/**\n *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n *  the structure of the group, with control names as keys.\n * \n * This method performs strict checks, so it will throw an error if you try\n * to set the value of a control that doesn't exist or if you exclude the\n * value of a control.\n * \n *  ### Example\n * \n *  ```\n *  const form = new FormGroup({\n *     first: new FormControl(),\n *     last: new FormControl()\n *  });\n *  console.log(form.value);   // {first: null, last: null}\n * \n *  form.setValue({first: 'Nancy', last: 'Drew'});\n *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n * \n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._checkAllValuesPresent(value);\n    Object.keys(value).forEach(name => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n *  names as keys, and will do its best to match the values to the correct controls\n *  in the group.\n * \n *  It accepts both super-sets and sub-sets of the group without throwing an error.\n * \n *  ### Example\n * \n *  ```\n *  const form = new FormGroup({\n *     first: new FormControl(),\n *     last: new FormControl()\n *  });\n *  console.log(form.value);   // {first: null, last: null}\n * \n *  form.patchValue({first: 'Nancy'});\n *  console.log(form.value);   // {first: 'Nancy', last: null}\n * \n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    Object.keys(value).forEach(name => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n * Resets the {\\@link FormGroup}. This means by default:\n * \n * * The group and all descendants are marked `pristine`\n * * The group and all descendants are marked `untouched`\n * * The value of all descendants will be null or null maps\n * \n * You can also reset to a specific form state by passing in a map of states\n * that matches the structure of your form, with control names as keys. The state\n * can be a standalone value or a form state object with both a value and a disabled\n * status.\n * \n * ### Example\n * \n * ```ts\n * this.form.reset({first: 'name', last: 'last name'});\n * \n * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n * ```\n * \n * - OR -\n * \n * ```\n * this.form.reset({\n *   first: {value: 'name', disabled: true},\n *   last: 'last'\n * });\n * \n * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n * console.log(this.form.get('first').status);  // 'DISABLED'\n * ```\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n/**\n * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n * \n * If you'd like to include all values regardless of disabled status, use this method.\n * Otherwise, the `value` property is the best way to get the value of the group.\n * @return {?}\n */\ngetRawValue(): any {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control instanceof FormControl ? control.value : ( /** @type {?} */((<any>control))).getRawValue();\n          return acc;\n        });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_syncPendingControls(): boolean {\n    let /** @type {?} */ subtreeUpdated = this._reduceChildren(false, (updated: boolean, child: AbstractControl) => {\n      return child._syncPendingControls() ? true : updated;\n    });\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n/**\n * \\@internal\n * @param {?} name\n * @return {?}\n */\n_throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: (v: any, k: string) => void): void {\n    Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue(): void { this._value = this._reduceValue(); }\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean {\n    let /** @type {?} */ res = false;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && condition(control));\n    });\n    return res;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n/**\n * \\@internal\n * @param {?} initValue\n * @param {?} fn\n * @return {?}\n */\n_reduceChildren(initValue: any, fn: Function) {\n    let /** @type {?} */ res = initValue;\n    this._forEachChild(\n        (control: AbstractControl, name: string) => { res = fn(res, control, name); });\n    return res;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean {\n    for (const /** @type {?} */ controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\nfunction FormGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroup.prototype.controls;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n * \n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n * \n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n * \n * ### Example\n * \n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n * \n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n * \n * You can also include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n * \n * The two types of validators can be passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n * \n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n * \n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n * \n * ```ts\n * const c = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n * \n * ### Adding or removing controls\n * \n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormArray extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validatorOrOpts\n * @param {?=} asyncValidator\n */\nconstructor(\npublic controls: AbstractControl[],\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(\n        coerceToValidator(validatorOrOpts),\n        coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n * Get the {\\@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nat(index: number): AbstractControl { return this.controls[index]; }\n/**\n * Insert a new {\\@link AbstractControl} at the end of the array.\n * @param {?} control\n * @return {?}\n */\npush(control: AbstractControl): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\ninsert(index: number, control: AbstractControl): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Remove the control at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nremoveAt(index: number): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Replace an existing control.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\nsetControl(index: number, control: AbstractControl): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n\n    if (control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Length of the control array.\n * @return {?}\n */\nget length(): number { return this.controls.length; }\n/**\n *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n *  the structure of the control.\n * \n * This method performs strict checks, so it will throw an error if you try\n * to set the value of a control that doesn't exist or if you exclude the\n * value of a control.\n * \n *  ### Example\n * \n *  ```\n *  const arr = new FormArray([\n *     new FormControl(),\n *     new FormControl()\n *  ]);\n *  console.log(arr.value);   // [null, null]\n * \n *  arr.setValue(['Nancy', 'Drew']);\n *  console.log(arr.value);   // ['Nancy', 'Drew']\n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n *  structure of the control, and will do its best to match the values to the correct\n *  controls in the group.\n * \n *  It accepts both super-sets and sub-sets of the array without throwing an error.\n * \n *  ### Example\n * \n *  ```\n *  const arr = new FormArray([\n *     new FormControl(),\n *     new FormControl()\n *  ]);\n *  console.log(arr.value);   // [null, null]\n * \n *  arr.patchValue(['Nancy']);\n *  console.log(arr.value);   // ['Nancy', null]\n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n * Resets the {\\@link FormArray}. This means by default:\n * \n * * The array and all descendants are marked `pristine`\n * * The array and all descendants are marked `untouched`\n * * The value of all descendants will be null or null maps\n * \n * You can also reset to a specific form state by passing in an array of states\n * that matches the structure of the control. The state can be a standalone value\n * or a form state object with both a value and a disabled status.\n * \n * ### Example\n * \n * ```ts\n * this.arr.reset(['name', 'last name']);\n * \n * console.log(this.arr.value);  // ['name', 'last name']\n * ```\n * \n * - OR -\n * \n * ```\n * this.arr.reset([\n *   {value: 'name', disabled: true},\n *   'last'\n * ]);\n * \n * console.log(this.arr.value);  // ['name', 'last name']\n * console.log(this.arr.get(0).status);  // 'DISABLED'\n * ```\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n/**\n * The aggregate value of the array, including any disabled controls.\n * \n * If you'd like to include all values regardless of disabled status, use this method.\n * Otherwise, the `value` property is the best way to get the value of the array.\n * @return {?}\n */\ngetRawValue(): any[] {\n    return this.controls.map((control: AbstractControl) => {\n      return control instanceof FormControl ? control.value : ( /** @type {?} */((<any>control))).getRawValue();\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_syncPendingControls(): boolean {\n    let /** @type {?} */ subtreeUpdated = this.controls.reduce((updated: boolean, child: AbstractControl) => {\n      return child._syncPendingControls() ? true : updated;\n    }, false);\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n/**\n * \\@internal\n * @param {?} index\n * @return {?}\n */\n_throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => { cb(control, index); });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue(): void {\n    this._value = this.controls.filter((control) => control.enabled || this.disabled)\n                      .map((control) => control.value);\n  }\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => this._registerControl(control));\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean {\n    for (const /** @type {?} */ control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n/**\n * @param {?} control\n * @return {?}\n */\n\nprivate _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n}\n\nfunction FormArray_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArray.prototype.controls;\n}\n\n"]}