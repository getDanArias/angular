{"version":3,"sources":["../../../../../../packages/forms/src/directives/select_control_value_accessor.ts"],"names":[],"mappings":"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","file":"select_control_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, ÉµlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ SELECT_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use select controls with form directives\n * \n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n * \n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n * \n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n * \n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n * \n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n * \n * ### Caveat: Option selection\n * \n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n * \n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n * \n * #### Syntax\n * \n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n * \n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n * \n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n/**\n * \\@internal\n */\n_optionMap: Map<string, any> = new Map<string, any>();\n/**\n * \\@internal\n */\n_idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\nprivate _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.value = value;\n    const /** @type {?} */ id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const /** @type {?} */ valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = valueString;\n      fn(this._getOptionValue(valueString));\n    };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_registerOption(): string { return (this._idCounter++).toString(); }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_getOptionId(value: any): string|null {\n    for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} valueString\n * @return {?}\n */\n_getOptionValue(valueString: string): any {\n    const /** @type {?} */ id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"compareWith\": [{ type: Input },],\n};\n}\n\nfunction SelectControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectControlValueAccessor.ctorParameters;\n/** @type {?} */\nSelectControlValueAccessor.propDecorators;\n/** @type {?} */\nSelectControlValueAccessor.prototype.value;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._optionMap;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._idCounter;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onChange;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nSelectControlValueAccessor.prototype._compareWith;\n/** @type {?} */\nSelectControlValueAccessor.prototype._renderer;\n/** @type {?} */\nSelectControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n * \n * \\@howToUse \n * \n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n * \n * \\@stable\n */\nexport class NgSelectOption implements OnDestroy {\n  id: string;\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _select\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngValue\": [{ type: Input, args: ['ngValue', ] },],\n\"value\": [{ type: Input, args: ['value', ] },],\n};\n}\n\nfunction NgSelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSelectOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSelectOption.ctorParameters;\n/** @type {?} */\nNgSelectOption.propDecorators;\n/** @type {?} */\nNgSelectOption.prototype.id;\n/** @type {?} */\nNgSelectOption.prototype._element;\n/** @type {?} */\nNgSelectOption.prototype._renderer;\n/** @type {?} */\nNgSelectOption.prototype._select;\n}\n\n"]}