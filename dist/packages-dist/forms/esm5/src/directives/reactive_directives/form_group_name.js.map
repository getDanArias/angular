{"version":3,"sources":["../../../../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts"],"names":[],"mappings":"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","file":"form_group_name.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const /** @type {?} */ formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n * \n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get} method. Ex: `this.form.get('name')`.\n * \n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[formGroupName]', providers: [formGroupNameProvider]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"name\": [{ type: Input, args: ['formGroupName', ] },],\n};\n}\n\nfunction FormGroupName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroupName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormGroupName.ctorParameters;\n/** @type {?} */\nFormGroupName.propDecorators;\n/** @type {?} */\nFormGroupName.prototype.name;\n}\n\n\nexport const /** @type {?} */ formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n * \n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}\n * methods.\n * \n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges} event to be notified when the validation\n * status is re-calculated.\n * \n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray#push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n/**\n * \\@internal\n */\n_parent: ControlContainer;\n/**\n * \\@internal\n */\n_validators: any[];\n/**\n * \\@internal\n */\n_asyncValidators: any[];\n\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._checkParentType(); /** @type {?} */((\n    this.formDirective)).addFormArray(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n/**\n * @return {?}\n */\nget control(): FormArray { return /** @type {?} */(( this.formDirective)).getFormArray(this); }\n/**\n * @return {?}\n */\nget formDirective(): FormGroupDirective|null {\n    return this._parent ? /** @type {?} */(( <FormGroupDirective>this._parent.formDirective)) : null;\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._validators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n/**\n * @return {?}\n */\n\nprivate _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[formArrayName]', providers: [formArrayNameProvider]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"name\": [{ type: Input, args: ['formArrayName', ] },],\n};\n}\n\nfunction FormArrayName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArrayName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormArrayName.ctorParameters;\n/** @type {?} */\nFormArrayName.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._parent;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._validators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._asyncValidators;\n/** @type {?} */\nFormArrayName.prototype.name;\n}\n\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n"]}