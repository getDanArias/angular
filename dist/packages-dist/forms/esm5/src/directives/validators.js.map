{"version":3,"sources":["../../../../../../packages/forms/src/directives/validators.ts"],"names":[],"mappings":"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","file":"validators.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, SimpleChanges, StaticProvider, forwardRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n/** @experimental */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n/**\n * An interface that can be implemented by classes that can act as validators.\n * \n * ## Usage\n * \n * ```typescript\n * \\@Directive({ \n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n * \n * \\@stable\n * @record\n */\nexport function Validator() {}\n\n\nfunction Validator_tsickle_Closure_declarations() {\n/** @type {?} */\nValidator.prototype.validate;\n/** @type {?|undefined} */\nValidator.prototype.registerOnValidatorChange;\n}\n\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): ValidationErrors|null;\n  registerOnValidatorChange?(fn: () => void): void;\n}\n/**\n * \\@experimental\n * @record\n */\nexport function AsyncValidator() {}\n\n\nfunction AsyncValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncValidator.prototype.validate;\n}\n\n\n/** @experimental */\nexport interface AsyncValidator extends Validator {\n  validate(c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\nexport const /** @type {?} */ REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n * \n * \\@stable\n */\nexport class RequiredValidator implements Validator {\nprivate _required: boolean;\nprivate _onChange: () => void;\n/**\n * @return {?}\n */\nget required(): boolean|string { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"required\": [{ type: Input },],\n};\n}\n\nfunction RequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRequiredValidator.ctorParameters;\n/** @type {?} */\nRequiredValidator.propDecorators;\n/** @type {?} */\nRequiredValidator.prototype._required;\n/** @type {?} */\nRequiredValidator.prototype._onChange;\n}\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n * \n * \\@experimental\n */\nexport class CheckboxRequiredValidator extends RequiredValidator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(c) : null;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxRequiredValidator.ctorParameters;\n}\n\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nexport const /** @type {?} */ EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n * \n * \\@experimental\n */\nexport class EmailValidator implements Validator {\nprivate _enabled: boolean;\nprivate _onChange: () => void;\n/**\n * @param {?} value\n * @return {?}\n */\nset email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"email\": [{ type: Input },],\n};\n}\n\nfunction EmailValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEmailValidator.ctorParameters;\n/** @type {?} */\nEmailValidator.propDecorators;\n/** @type {?} */\nEmailValidator.prototype._enabled;\n/** @type {?} */\nEmailValidator.prototype._onChange;\n}\n\n/**\n * \\@stable\n * @record\n */\nexport function ValidatorFn() {}\n\n\nfunction ValidatorFn_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(c: AbstractControl): ValidationErrors|null;\n*/\n}\n\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): ValidationErrors|null; }\n/**\n * \\@stable\n * @record\n */\nexport function AsyncValidatorFn() {}\n\n\nfunction AsyncValidatorFn_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n*/\n}\n\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n * \n * ## Example:\n * \n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const /** @type {?} */ MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n * \n * \\@stable\n */\nexport class MinLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   minlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\n\nprivate _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"minlength\": [{ type: Input },],\n};\n}\n\nfunction MinLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMinLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMinLengthValidator.ctorParameters;\n/** @type {?} */\nMinLengthValidator.propDecorators;\n/** @type {?} */\nMinLengthValidator.prototype._validator;\n/** @type {?} */\nMinLengthValidator.prototype._onChange;\n/** @type {?} */\nMinLengthValidator.prototype.minlength;\n}\n\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n * \n * ## Example:\n * \n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const /** @type {?} */ MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n * \n * \\@stable\n */\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   maxlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\n\nprivate _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"maxlength\": [{ type: Input },],\n};\n}\n\nfunction MaxLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMaxLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaxLengthValidator.ctorParameters;\n/** @type {?} */\nMaxLengthValidator.propDecorators;\n/** @type {?} */\nMaxLengthValidator.prototype._validator;\n/** @type {?} */\nMaxLengthValidator.prototype._onChange;\n/** @type {?} */\nMaxLengthValidator.prototype.maxlength;\n}\n\n\n\nexport const /** @type {?} */ PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n * \n * ### Example\n * \n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nexport class PatternValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   pattern: string|RegExp;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null { return this._validator(c); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\n\nprivate _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"pattern\": [{ type: Input },],\n};\n}\n\nfunction PatternValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nPatternValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPatternValidator.ctorParameters;\n/** @type {?} */\nPatternValidator.propDecorators;\n/** @type {?} */\nPatternValidator.prototype._validator;\n/** @type {?} */\nPatternValidator.prototype._onChange;\n/** @type {?} */\nPatternValidator.prototype.pattern;\n}\n\n"]}