{"version":3,"sources":["../../../../../../packages/forms/src/directives/ng_model.ts"],"names":[],"mappings":"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","file":"ng_model.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n * \n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst /** @type {?} */ resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n * \n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n * \n * \\@howToUse \n * \n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n * \n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n * \n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n * \n * The following is an example of a simple standalone control using `ngModel`:\n * \n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n * \n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n * \n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n * \n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n * \n * Take a look at an example of using `ngModel` within a form:\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * To see `ngModel` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n/**\n * \\@internal\n */\n_control = new FormControl();\n/**\n * \\@internal\n */\n_registered = false;\n  viewModel: any;\n\n   name: string;\n   isDisabled: boolean;\n   model: any;\n   options: {name?: string, standalone?: boolean};\n\n   update = new EventEmitter();\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(  parent: ControlContainer,\n                 validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nget path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @return {?}\n */\n\nprivate _setUpControl(): void {\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n/**\n * @return {?}\n */\n\nprivate _isStandalone(): boolean {\n                return !this._parent || !!(this.options && this.options.standalone);\n              }\n/**\n * @return {?}\n */\n\nprivate _setUpStandalone(): void {\n                setUpControl(this._control, this);\n                this._control.updateValueAndValidity({emitEvent: false});\n              }\n/**\n * @return {?}\n */\n\nprivate _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n/**\n * @return {?}\n */\n\nprivate _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n/**\n * @return {?}\n */\n\nprivate _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n/**\n * @param {?} value\n * @return {?}\n */\n\nprivate _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _updateDisabled(changes: SimpleChanges) {\n                const /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\n                const /** @type {?} */ isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"name\": [{ type: Input },],\n\"isDisabled\": [{ type: Input, args: ['disabled', ] },],\n\"model\": [{ type: Input, args: ['ngModel', ] },],\n\"options\": [{ type: Input, args: ['ngModelOptions', ] },],\n\"update\": [{ type: Output, args: ['ngModelChange', ] },],\n};\n}\n\nfunction NgModel_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModel.ctorParameters;\n/** @type {?} */\nNgModel.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._registered;\n/** @type {?} */\nNgModel.prototype.viewModel;\n/** @type {?} */\nNgModel.prototype.name;\n/** @type {?} */\nNgModel.prototype.isDisabled;\n/** @type {?} */\nNgModel.prototype.model;\n/** @type {?} */\nNgModel.prototype.options;\n/** @type {?} */\nNgModel.prototype.update;\n}\n\n"]}