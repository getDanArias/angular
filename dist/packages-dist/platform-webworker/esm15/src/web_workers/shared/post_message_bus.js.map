{"version":3,"sources":["../../../../../../packages/platform-webworker/src/web_workers/shared/post_message_bus.ts"],"names":[],"mappings":"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","file":"post_message_bus.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, NgZone} from '@angular/core';\n\nimport {MessageBus, MessageBusSink, MessageBusSource} from './message_bus';\n/**\n * @record\n */\nexport function PostMessageTarget() {}\n\n\nfunction PostMessageTarget_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageTarget.prototype.postMessage;\n}\n\n\n\n\n// TODO(jteplitz602) Replace this with the definition in lib.webworker.d.ts(#3492)\nexport interface PostMessageTarget {\n  postMessage: (message: any, transfer?: [ArrayBuffer]) => void;\n}\nexport class PostMessageBusSink implements MessageBusSink {\nprivate _zone: NgZone;\nprivate _channels: {[key: string]: _Channel} = {};\nprivate _messageBuffer: Array<Object> = [];\n/**\n * @param {?} _postMessageTarget\n */\nconstructor(private _postMessageTarget: PostMessageTarget) {}\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone): void {\n    this._zone = zone;\n    this._zone.runOutsideAngular(\n        () => { this._zone.onStable.subscribe({next: () => { this._handleOnEventDone(); }}); });\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true): void {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const /** @type {?} */ emitter = new EventEmitter(false);\n    const /** @type {?} */ channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n    emitter.subscribe((data: Object) => {\n      const /** @type {?} */ message = {channel: channel, message: data};\n      if (runInZone) {\n        this._messageBuffer.push(message);\n      } else {\n        this._sendMessages([message]);\n      }\n    });\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nto(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate _handleOnEventDone() {\n    if (this._messageBuffer.length > 0) {\n      this._sendMessages(this._messageBuffer);\n      this._messageBuffer = [];\n    }\n  }\n/**\n * @param {?} messages\n * @return {?}\n */\n\nprivate _sendMessages(messages: Array<Object>) { this._postMessageTarget.postMessage(messages); }\n}\n\nfunction PostMessageBusSink_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBusSink.prototype._zone;\n/** @type {?} */\nPostMessageBusSink.prototype._channels;\n/** @type {?} */\nPostMessageBusSink.prototype._messageBuffer;\n/** @type {?} */\nPostMessageBusSink.prototype._postMessageTarget;\n}\n\nexport class PostMessageBusSource implements MessageBusSource {\nprivate _zone: NgZone;\nprivate _channels: {[key: string]: _Channel} = {};\n/**\n * @param {?=} eventTarget\n */\nconstructor(eventTarget?: EventTarget) {\n    if (eventTarget) {\n      eventTarget.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    } else {\n      // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope\n      const /** @type {?} */ workerScope = /** @type {?} */(( <EventTarget>self));\n      workerScope.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    }\n  }\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone) { this._zone = zone; }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true) {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const /** @type {?} */ emitter = new EventEmitter(false);\n    const /** @type {?} */ channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n/**\n * @param {?} ev\n * @return {?}\n */\n\nprivate _handleMessages(ev: MessageEvent): void {\n    const /** @type {?} */ messages = ev.data;\n    for (let /** @type {?} */ i = 0; i < messages.length; i++) {\n      this._handleMessage(messages[i]);\n    }\n  }\n/**\n * @param {?} data\n * @return {?}\n */\n\nprivate _handleMessage(data: any): void {\n    const /** @type {?} */ channel = data.channel;\n    if (this._channels.hasOwnProperty(channel)) {\n      const /** @type {?} */ channelInfo = this._channels[channel];\n      if (channelInfo.runInZone) {\n        this._zone.run(() => { channelInfo.emitter.emit(data.message); });\n      } else {\n        channelInfo.emitter.emit(data.message);\n      }\n    }\n  }\n}\n\nfunction PostMessageBusSource_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBusSource.prototype._zone;\n/** @type {?} */\nPostMessageBusSource.prototype._channels;\n}\n\n/**\n * A TypeScript implementation of {\\@link MessageBus} for communicating via JavaScript's\n * postMessage API.\n */\nexport class PostMessageBus implements MessageBus {\n/**\n * @param {?} sink\n * @param {?} source\n */\nconstructor(public sink: PostMessageBusSink,\npublic source: PostMessageBusSource) {}\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone): void {\n    this.source.attachToZone(zone);\n    this.sink.attachToZone(zone);\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true): void {\n    this.source.initChannel(channel, runInZone);\n    this.sink.initChannel(channel, runInZone);\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string): EventEmitter<any> { return this.source.from(channel); }\n/**\n * @param {?} channel\n * @return {?}\n */\nto(channel: string): EventEmitter<any> { return this.sink.to(channel); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: PostMessageBusSink, },\n{type: PostMessageBusSource, },\n];\n}\n\nfunction PostMessageBus_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPostMessageBus.ctorParameters;\n/** @type {?} */\nPostMessageBus.prototype.sink;\n/** @type {?} */\nPostMessageBus.prototype.source;\n}\n\n/**\n * Helper class that wraps a channel's {\\@link EventEmitter} and\n * keeps track of if it should run in the zone.\n */\nclass _Channel {\n/**\n * @param {?} emitter\n * @param {?} runInZone\n */\nconstructor(public emitter: EventEmitter<any>,\npublic runInZone: boolean) {}\n}\n\nfunction _Channel_tsickle_Closure_declarations() {\n/** @type {?} */\n_Channel.prototype.emitter;\n/** @type {?} */\n_Channel.prototype.runInZone;\n}\n\n"]}