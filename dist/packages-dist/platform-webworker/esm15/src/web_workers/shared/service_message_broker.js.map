{"version":3,"sources":["../../../../../../packages/platform-webworker/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","file":"service_message_broker.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, Type} from '@angular/core';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBrokerFactory {\n  /**\n   * Initializes the given channel and attaches a new {@link ServiceMessageBroker} to it.\n   */\n  abstract createMessageBroker(channel: string, runInZone?: boolean): ServiceMessageBroker;\n}\n\nfunction ServiceMessageBrokerFactory_tsickle_Closure_declarations() {\n\n/**\n * Initializes the given channel and attaches a new {\\@link ServiceMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\nServiceMessageBrokerFactory.prototype.createMessageBroker = function(channel, runInZone) {};\n}\n\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n/**\n * \\@internal\n */\n_serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ServiceMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServiceMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nServiceMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nServiceMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n * \n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBroker {\n  abstract registerMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>|null, method: Function,\n      returnType?: Type<any>|SerializerTypes): void;\n}\n\nfunction ServiceMessageBroker_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nServiceMessageBroker.prototype.registerMethod = function(methodName, signature, method, returnType) {};\n}\n\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\nprivate _sink: EventEmitter<any>;\nprivate _methods = new Map<string, Function>();\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(messageBus: MessageBus,\nprivate _serializer: Serializer,\npublic channel: string) {\n    super();\n    this._sink = messageBus.to(channel);\n    const /** @type {?} */ source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n/**\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>,\n      method: (..._: any[]) => Promise<any>| void, returnType?: Type<any>|SerializerTypes): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const /** @type {?} */ serializedArgs = message.args;\n      const /** @type {?} */ numArgs = signature ? signature.length : 0;\n      const /** @type {?} */ deserializedArgs = new Array(numArgs);\n      for (let /** @type {?} */ i = 0; i < numArgs; i++) {\n        const /** @type {?} */ serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      const /** @type {?} */ promise = method(...deserializedArgs);\n      if (returnType && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n/**\n * @param {?} message\n * @return {?}\n */\n\nprivate _handleMessage(message: ReceivedMessage): void {\n    if (this._methods.has(message.method)) { /** @type {?} */((\n      this._methods.get(message.method)))(message);\n    }\n  }\n/**\n * @param {?} id\n * @param {?} promise\n * @param {?} type\n * @return {?}\n */\n\nprivate _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>|SerializerTypes):\n      void {\n    promise.then((result: any) => {\n      this._sink.emit({\n        'type': 'result',\n        'value': this._serializer.serialize(result, type),\n        'id': id,\n      });\n    });\n  }\n}\n\nfunction ServiceMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBroker_.prototype._sink;\n/** @type {?} */\nServiceMessageBroker_.prototype._methods;\n/** @type {?} */\nServiceMessageBroker_.prototype._serializer;\n/** @type {?} */\nServiceMessageBroker_.prototype.channel;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n * @record\n */\nexport function ReceivedMessage() {}\n\n\nfunction ReceivedMessage_tsickle_Closure_declarations() {\n/** @type {?} */\nReceivedMessage.prototype.method;\n/** @type {?} */\nReceivedMessage.prototype.args;\n/** @type {?} */\nReceivedMessage.prototype.id;\n/** @type {?} */\nReceivedMessage.prototype.type;\n}\n\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport interface ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n}\n"]}