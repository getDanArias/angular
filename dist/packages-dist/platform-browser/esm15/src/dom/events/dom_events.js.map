{"version":3,"sources":["../../../../../../packages/platform-browser/src/dom/events/dom_events.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,MAAE,EAAO,UAAA,EAAY,MAAA,EAAQ,OAAA,IAAW,MAAA,EAAO,MAAA,eAAA,CAAA;AAOtD,OALO,EAAA,QAAE,EAAQ,MAAA,eAAA,CAAA;AAOjB,OALO,EAAA,kBAAE,EAAkB,MAAA,iBAAA,CAAA;AAM3B;;;;GAIG;AACH,MAJC,gBAAA,CAAK,IAAA,GAAO,MAAA,CAAO,MAAC,CAAM,CAAC;AAK5B,MAAM,gBAAA,CAJA,UAAA,GAAa,IAAA,IAAQ,IAAA,CAAK,YAAC,CAAY,IAAI,UAAW,CAAI;IAK9D,MAAM,CAJC,CAAA,CAAE;AAKX,CAAc,CAJZ;AAKF,MAAM,gBAAO,CAJP,kBAAA,GAAyC,UAAA,CAAW,kBAAC,CAAkB,CAAC;AAK9E,MAAM,gBAA+B,CAJ/B,qBAAA,GAA+C,UAAA,CAAW,qBAAC,CAAqB,CAAC;AAKvF,MAFC,sBAA4B,SAAQ,kBAAA;IAGrC;;;OAGG;IACH,YANgC,GAAK,EAAa,MAAQ;QAAU,KAAA,CAAM,GAAC,CAAG,CAAC;QAA7B,WAAA,GAAA,MAAA,CAAQ;IAAsB,CAAA;IAQhF;;;OAGG;IACH,QARG,CAAQ,SAAW,IAAmB,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAStD;;;;;OAKG;IACH,gBAbG,CAAgB,OAAS,EAAa,SAAW,EAAQ,OAAS;QAcrE;;;;;;;;;;WAUG;QACH,MAbK,gBAAA,CAAK,IAAA,GAAO,IAAA,CAAK;QAclB,IAAI,gBAAgB,CAbhB,YAAA,GAAe,OAAA,CAAQ,kBAAC,CAAkB,CAAC;QAc/C,IAAI,gBAAgB,CAbhB,QAAA,GAAwB,CAAE,OAAW,CAAA,CAAc;QAcvD,EAAE,CAAC,CAAC,YAbC,CAAY,CAAC,CAAA;YAchB,QAAQ,GAbG;gBAcT,MAAM,CAbC,IAAA,CAAK,MAAC,CAAM,OAAC,CAAO,gBAAA,CAAA,CAAA,OAAW,CAAA,EAAK,IAAA,EAAK,gBAAA,CAAA,CAAC,SAAa,CAAA,EAAK,SAAA,CAAU,CAAC;YAchF,CAAC,CAbC;QAMN,CAAA;QASE,OAAO,CAbC,YAAC,GAAc,kBAAA,GAAqB,kBAAA,CAAmB,CAAC,SAAC,EAAU,QAAA,EAAU,KAAA,CAAM,CAAC;QAc5F,MAAM,CAbC,MAAM,OAAA,CAAQ,YAAC,GAAc,qBAAA,GAAwB,qBAAA,CAAsB,CAcvE,SAAS,EAbC,gBAAA,CAAA,CAAC,QAAY,CAAA,EAAK,KAAA,CAAM,CAAC;IAchD,CAAC;;AAZI,0BAAA,GAA+C;IActD,EAbE,IAAA,EAAM,UAAA,EAjCN;CA+CD,CAbC;AAcF,kBAAkB;AAZX,8BAAA,GAA4F,MAAM;IAczG,EAAC,IAbC,EAAK,SAAA,EAAW,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,MAAA,EAnCvB,IAAA,EAAA,CAAA,QAAO,EAAA,EAAA,EAAA,EAAA;IAiDvB,EAAC,IAbC,EAAK,MAAA,GAAO;CAcb,CAbC;AAgBF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;IAC/B,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;AACjC,CAAC","file":"dom_events.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone, Éµglobal as global} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n/**\n * Detect if Zone is present. If it is then bypass 'addEventListener' since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nconst /** @type {?} */ Zone = global['Zone'];\nconst /** @type {?} */ __symbol__ = Zone && Zone['__symbol__'] || function<T>(v: T): T {\n  return v;\n};\nconst /** @type {?} */ ADD_EVENT_LISTENER: 'addEventListener' = __symbol__('addEventListener');\nconst /** @type {?} */ REMOVE_EVENT_LISTENER: 'removeEventListener' = __symbol__('removeEventListener');\nexport class DomEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n * @param {?} ngZone\n */\nconstructor( doc: any,\nprivate ngZone: NgZone) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return true; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n/**\n * This code is about to add a listener to the DOM. If Zone.js is present, than\n * `addEventListener` has been patched. The patched code adds overhead in both\n * memory and speed (3x slower) than native. For this reason if we detect that\n * Zone.js is present we bypass zone and use native addEventListener instead.\n * The result is faster registration but the zone will not be restored. We do\n * manual zone restoration in element.ts renderEventHandlerClosure method.\n * \n * NOTE: it is possible that the element is from different iframe, and so we\n * have to check before we execute the method.\n */\nconst /** @type {?} */ self = this;\n    let /** @type {?} */ byPassZoneJS = element[ADD_EVENT_LISTENER];\n    let /** @type {?} */ callback: EventListener = /** @type {?} */(( handler as EventListener));\n    if (byPassZoneJS) {\n      callback = function() {\n        return self.ngZone.runTask( /** @type {?} */((handler as any)), null, /** @type {?} */(( arguments as any)), eventName);\n      };\n    }\n    element[byPassZoneJS ? ADD_EVENT_LISTENER : 'addEventListener'](eventName, callback, false);\n    return () => element[byPassZoneJS ? REMOVE_EVENT_LISTENER : 'removeEventListener'](\n               eventName, /** @type {?} */(( callback as any)), false);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction DomEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nDomEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomEventsPlugin.ctorParameters;\n/** @type {?} */\nDomEventsPlugin.prototype.ngZone;\n}\n\n"]}