{"version":3,"sources":["../../../../../../packages/platform-browser/src/browser/tools/common_tools.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAA4B,MAAA,eAAA,CAAA;AAMrC,OALO,EAAA,MAAE,EAAM,MAAA,uBAAA,CAAA;AAMf,OALO,EAAA,MAAE,EAAM,MAAA,WAAA,CAAA;AAMf,MAJC;IAKD;;;OAGG;IACH,YARqB,SAAW,EAAe,QAAU;QAApC,cAAA,GAAA,SAAA,CAAW;QAAe,aAAA,GAAA,QAAA,CAAU;IAAQ,CAAA;CAChE;AAWD;IACA,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9C,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC7C,CAAC;AAED;;;GAGG;AACH,MAhBC;IAkBD;;OAEG;IACH,YAlBG,GAAiC,IAAI,IAAA,CAAK,MAAC,GAAQ,GAAA,CAAI,QAAC,CAAQ,GAAC,CAAG,cAAC,CAAc,CAAC,CAAC,CAAA;IAmBxF;;;;;;;;;;;;;;;;;OAiBG;IACH,mBAlBG,CAAmB,MAAQ;QAmB1B,MAAM,gBAAgB,CAlBhB,MAAA,GAAS,MAAA,IAAU,MAAA,CAAO,QAAC,CAAQ,CAAC;QAmB1C,MAAM,gBAAgB,CAlBhB,WAAA,GAAc,kBAAA,CAAmB;QAmBvC,sFAAsF;QACtF,MAAM,gBAAgB,CAlBhB,mBAAA,GAAsB,MAAA,CAAO,OAAC,CAAO,OAAC,IAAU,IAAA,CAAK;QAmB3D,EAAE,CAAC,CAAC,MAlBC,IAAS,mBAAA,CAAoB,CAAC,CAAA;YAmBjC,MAAM,CAlBC,OAAC,CAAO,OAAC,CAAO,WAAC,CAAW,CAAC;QAmBtC,CAAC;QACD,MAAM,gBAAgB,CAlBhB,KAAA,GAAQ,MAAA,EAAO,CAAE,cAAC,EAAc,CAAE;QAmBxC,IAAI,gBAAgB,CAlBhB,QAAA,GAAW,CAAA,CAAE;QAmBjB,OAAO,QAlBC,GAAU,CAAA,IAAK,CAAA,MAAE,EAAM,CAAE,cAAC,EAAc,GAAI,KAAA,CAAM,GAAG,GAAA,EAAK,CAAA;YAmBhE,IAAI,CAlBC,MAAC,CAAM,IAAC,EAAI,CAAE;YAmBnB,QAAQ,EAlBC,CAAE;QAmBb,CAAC;QACD,MAAM,gBAAgB,CAlBhB,GAAA,GAAM,MAAA,EAAO,CAAE,cAAC,EAAc,CAAE;QAmBtC,EAAE,CAAC,CAAC,MAlBC,IAAS,mBAAA,CAAoB,CAAC,CAAA;YAmBjC,wEAAwE;YACxE,0BAA0B;YAC1B,EAAE;YACF,sEAAsE;YACtE,CAAkB,CAlBZ,MAAC,CAAM,OAAC,CAAO,UAAC,CAAA,CAAU,CAAC,WAAC,CAAW,CAAC;QAmBhD,CAAC;QACD,MAAM,gBAAgB,CAlBhB,SAAA,GAAY,CAAA,GAAE,GAAK,KAAA,CAAM,GAAG,QAAA,CAAS;QAmB3C,MAAM,CAlBC,OAAC,CAAO,GAAC,CAAG,OAAC,QAAO,0BAAQ,CAA0B,CAAC;QAmB9D,MAAM,CAlBC,OAAC,CAAO,GAAC,CAAG,GAAC,SAAG,CAAS,OAAC,CAAO,CAAC,CAAC,eAAC,CAAe,CAAC;QAoB3D,MAAM,CAlBC,IAAI,yBAAA,CAA0B,SAAC,EAAU,QAAA,CAAS,CAAC;IAmB5D,CAAC;CAjBF;AAoBD;IACA,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;AACjC,CAAC","file":"common_tools.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\nimport {getDOM} from '../../dom/dom_adapter';\nimport {window} from './browser';\nexport class ChangeDetectionPerfRecord {\n/**\n * @param {?} msPerTick\n * @param {?} numTicks\n */\nconstructor(public msPerTick: number,\npublic numTicks: number) {}\n}\n\nfunction ChangeDetectionPerfRecord_tsickle_Closure_declarations() {\n/** @type {?} */\nChangeDetectionPerfRecord.prototype.msPerTick;\n/** @type {?} */\nChangeDetectionPerfRecord.prototype.numTicks;\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n/**\n * @param {?} ref\n */\nconstructor(ref: ComponentRef<any>) { this.appRef = ref.injector.get(ApplicationRef); }\n/**\n * Exercises change detection in a loop and then prints the average amount of\n * time in milliseconds how long a single round of change detection takes for\n * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n * of 500 milliseconds.\n * \n * Optionally, a user may pass a `config` parameter containing a map of\n * options. Supported options are:\n * \n * `record` (boolean) - causes the profiler to record a CPU profile while\n * it exercises the change detector. Example:\n * \n * ```\n * ng.profiler.timeChangeDetection({record: true})\n * ```\n * @param {?} config\n * @return {?}\n */\ntimeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const /** @type {?} */ record = config && config['record'];\n    const /** @type {?} */ profileName = 'Change Detection';\n    // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n    const /** @type {?} */ isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const /** @type {?} */ start = getDOM().performanceNow();\n    let /** @type {?} */ numTicks = 0;\n    while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const /** @type {?} */ end = getDOM().performanceNow();\n    if (record && isProfilerAvailable) {\n      // need to cast to <any> because type checker thinks there's no argument\n      // while in fact there is:\n      //\n      // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n      ( /** @type {?} */((<any>window.console.profileEnd)))(profileName);\n    }\n    const /** @type {?} */ msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction AngularProfiler_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularProfiler.prototype.appRef;\n}\n\n"]}