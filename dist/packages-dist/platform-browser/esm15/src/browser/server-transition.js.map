{"version":3,"sources":["../../../../../packages/platform-browser/src/browser/server-transition.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,eAAE,EAAgB,qBAAA,EAA+B,cAAA,EAAgB,QAAA,EAAyB,MAAA,eAAA,CAAA;AAOjG,OALO,EAAA,MAAE,EAAM,MAAA,oBAAA,CAAA;AAMf,OALO,EAAA,QAAE,EAAQ,MAAA,mBAAA,CAAA;AAMjB;;;GAGG;AACH,MAJC,CAAM,MAAA,gBAAA,CAAM,aAAA,GAAgB,IAAI,cAAA,CAAe,eAAC,CAAe,CAAC;AAKjE;;;;;GAKG;AACH,MATC,gCAAqC,YAAc,EAAQ,QAAU,EAAK,QAAU;IAUnF,MAAM,CATC;QAUL,0FAA0F;QAC1F,cAAc;QACd,QAAQ,CATC,GAAC,CAAG,qBAAC,CAAqB,CAAC,WAAC,CAAW,IAAC,CAAI;YAUnD,MAAM,gBAAgB,CAThB,GAAA,GAAM,MAAA,EAAO,CAAE;YAUrB,MAAM,gBAAgB,CAThB,MAAA,GAUF,KAAK,CATC,SAAC,CAAS,KAAC,CAAK,KAAC,CAAK,GAAC,CAAG,gBAAC,CAAgB,QAAC,EAAS,sBAAA,CAAuB,CAAC,CAAC;YAUxF,MAAM,CATC,MAAC,CAAM,EAAC,IAAK,GAAA,CAAI,YAAC,CAAY,EAAC,EAAG,eAAA,CAAgB,KAAK,YAAA,CAAa;iBAUtE,OATC,CAAO,EAAC,IAAK,GAAA,CAAI,MAAC,CAAM,EAAC,CAAE,CAAC,CAAC;QAUrC,CAAC,CATC,CAAC;IAUL,CAAC,CATC;AAUJ,CAAC;AAED,MAAM,CATC,MAAA,gBAAA,CAAM,2BAAA,GAAgD;IAU3D;QACE,OAAO,EATE,eAAA;QAUT,UAAU,EATE,qBAAA;QAUZ,IAAI,EATE,CAAA,aAAE,EAAc,QAAA,EAAU,QAAA,CAAS;QAUzC,KAAK,EATE,IAAA;KAUR;CACF,CATC","file":"server-transition.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const /** @type {?} */ TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @param {?} injector\n * @return {?}\n */\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const /** @type {?} */ dom = getDOM();\n      const /** @type {?} */ styles: any[] =\n          Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n      styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const /** @type {?} */ SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n"]}