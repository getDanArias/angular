{"version":3,"sources":["../../../../../../packages/platform-browser/src/dom/util.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,OAAE,IAAU,MAAA,EAAO,MAAA,eAAA,CAAA;AAO1B,IAAM,gBAAgB,CALhB,iBAAA,GAAoB,UAAA,CAAW;AAMrC,IAAM,gBAAgB,CALhB,gBAAA,GAAmB,WAAA,CAAY;AAMrC;;;GAGG;AACH,MAPC,8BAAmC,KAAO;IAQzC,MAAM,CAPC,KAAA,CAAM,OAAC,CAAO,iBAAC,EAAkB;QAAA,WAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,sBAAc;;QAAM,OAAA,GAAA,GAAM,CAAA,CAAE,CAAC,CAAC,CAAC,WAAC,EAAW;IAAvB,CAAuB,CAAE,CAAC;AAQxF,CAAC;AACD;;;GAGG;AACH,MAVC,8BAAmC,KAAO;IAWzC,MAAM,CAVC,KAAA,CAAM,OAAC,CAAO,gBAAC,EAAiB;QAAA,WAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,sBAAc;;QAAM,OAAA,CAAA,CAAE,CAAC,CAAC,CAAC,WAAC,EAAW;IAAjB,CAAiB,CAAE,CAAC;AAWjF,CAAC;AACD;;;;;;;GAOG;AACH,MAVC,sBAA2B,IAAM,EAAQ,KAAO;IAW/C,EAAE,CAAC,CAAC,CAVC,EAAC,CAAE,CAAC,CAAA;QAWP,MAAM,CAVC,IAAC,CAAI,GAAG,EAAA,GAAK,CAAA,CAAA,MAAE,CAAM,IAAC,CAA8B,CAAA,CAAU,IAAI,EAAA,CAAG;IAW9E,CAAC;IACD,EAAE,CAVC,IAAC,CAAI,GAAG,KAAA,CAAM;AAWnB,CAAC;AAED,IAAI,gBAAgB,CAVhB,EAA0B,CAAS","file":"util.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµglobal as global} from '@angular/core';\n\nconst /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst /** @type {?} */ DASH_CASE_REGEXP = /-([a-z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param {?} value The value to export.\n * @return {?}\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (!ng) {\n    global['ng'] = ng = ( /** @type {?} */((global['ng'] as{[key: string]: any} | undefined))) || {};\n  }\n  ng[name] = value;\n}\n\nlet /** @type {?} */ ng: {[key: string]: any}|undefined;\n"]}