{"version":3,"sources":["../../../../../../packages/platform-browser/src/security/style_sanitizer.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,SAAE,EAAS,MAAA,eAAA,CAAA;AAOlB,OALO,EAAA,MAAE,EAAM,MAAA,oBAAA,CAAA;AAOf,OALO,EAAA,WAAE,EAAW,MAAA,iBAAA,CAAA;AAMpB;;;;;;;;;;;;;GAaG;AACH,IAHC,gBAAA,CAAK,MAAA,GAAS,yBAAA,CAA0B;AAIzC,IAAM,gBAAgB,CAHhB,kBAAA,GAAqB,+DAAA,CAAgE;AAI3F,IAAM,gBAAgB,CAHhB,SAAA,GAAY,eAAA,CAAgB;AAIlC,IAAM,gBAAgB,CAHhB,SAAA,GAAY,2CAAA,CAA4C;AAI9D,IAAM,gBAAgB,CAHhB,QAAA,GAAW,eAAA,CAAgB;AAIjC,IAAM,gBAAgB,CAHhB,OAAA,GAAU,0BAAA,CAA2B;AAI3C,IAAM,gBAAgB,CAHhB,gBAAA,GAAmB,IAAI,MAAA,CAIzB,OAAK,MAHC,MAAM;KAIR,QAAM,kBAHC,SAAkB,SAAI,SAAS,SAAI,SAAS,QAAI,MAAQ,CAAA;KAI5D,OAHC,OAAO,CAAA,EAIf,GAAG,CAHC,CAAC;AAIT;;;;;;;;;;;;;;;;;GAiBG;AACH,IAFC,gBAAA,CAAK,MAAA,GAAS,kBAAA,CAAmB;AAGlC;;;;;;;;;GASG;AACH,2BAH2B,KAAO;IAIhC,IAAI,gBAAgB,CAHhB,aAAA,GAAgB,IAAA,CAAK;IAIzB,IAAI,gBAAgB,CAHhB,aAAA,GAAgB,IAAA,CAAK;IAIzB,GAAG,CAAC,CAAC,IAHC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;QAIrC,IAAM,gBAAgB,CAHhB,CAAA,GAAI,KAAA,CAAM,MAAC,CAAM,CAAC,CAAC,CAAC;QAI1B,EAAE,CAAC,CAAC,CAHC,KAAK,IAAA,IAAQ,aAAA,CAAc,CAAC,CAAA;YAI/B,aAAa,GAHG,CAAA,aAAE,CAAa;QAIjC,CAAC;QAHC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,KAAK,GAAA,IAAO,aAAA,CAAc,CAAC,CAAA;YAIrC,aAAa,GAHG,CAAA,aAAE,CAAa;QAIjC,CAAC;IACH,CAAC;IACD,MAAM,CAHC,aAAA,IAAiB,aAAA,CAAc;AAIxC,CAAC;AACD;;;;;GAKG;AACH,MAJC,wBAA6B,KAAO;IAKnC,KAAK,GAJG,MAAA,CAAO,KAAC,CAAK,CAAC,IAAC,EAAI,CAAE,CAAC,oCAAA;IAK9B,EAAE,CAAC,CAAC,CAJC,KAAC,CAAK;QAAC,MAAA,CAAO,EAAA,CAAG;IAMtB,+FAA+F;IAC/F,yBAAyB;IACzB,IAAM,gBAAgB,CAJhB,QAAA,GAAW,KAAA,CAAM,KAAC,CAAK,MAAC,CAAM,CAAC;IAKrC,EAAE,CAAC,CAAC,CAJC,QAAC,IAAW,WAAA,CAAY,QAAC,CAAQ,CAAC,CAAC,CAAC,KAAK,QAAA,CAAS,CAAC,CAAC,CAAC;QAKtD,KAAK,CAJC,KAAC,CAAK,gBAAC,CAAgB,IAAI,iBAAA,CAAkB,KAAC,CAAK,CAAC,CAAC,CAAA;QAK7D,MAAM,CAJC,KAAA,CAAM,CAAC,qBAAA;IAKhB,CAAC;IAED,EAAE,CAAC,CAAC,SAJC,EAAS,CAAE,CAAC,CAAA;QAKf,MAAM,EAJC,CAAE,GAAC,CAKN,4CAA0C,KAJC,wCAAK,CAAqC,CAAC;IAK5F,CAAC;IAED,MAAM,CAJC,QAAA,CAAS;AAKlB,CAAC","file":"style_sanitizer.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeUrl} from './url_sanitizer';\n/**\n * Regular expression for safe style values.\n * \n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n * \n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n * \n * The function expression checks only for XSS safety, not for CSS validity.\n * \n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst /** @type {?} */ VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';\nconst /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst /** @type {?} */ CSS3_FNS = '(?:calc|attr)';\nconst /** @type {?} */ FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n * \n * The URL value still needs to be sanitized separately.\n * \n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n * \n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n * \n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst /** @type {?} */ URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * \n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value: string) {\n  let /** @type {?} */ outsideSingle = true;\n  let /** @type {?} */ outsideDouble = true;\n  for (let /** @type {?} */ i = 0; i < value.length; i++) {\n    const /** @type {?} */ c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const /** @type {?} */ urlMatch = value.match(URL_RE);\n  if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    getDOM().log(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n"]}