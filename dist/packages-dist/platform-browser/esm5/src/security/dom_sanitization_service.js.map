{"version":3,"sources":["../../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts"],"names":[],"mappings":"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","file":"dom_sanitization_service.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n/**\n * Marker interface for a value that's safe to use in a particular context.\n * \n * \\@stable\n * @record\n */\nexport function SafeValue() {}\n\n\nfunction SafeValue_tsickle_Closure_declarations() {\n}\n\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n/**\n * Marker interface for a value that's safe to use as HTML.\n * \n * \\@stable\n * @record\n */\nexport function SafeHtml() {}\n\n\nfunction SafeHtml_tsickle_Closure_declarations() {\n}\n\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n * \n * \\@stable\n * @record\n */\nexport function SafeStyle() {}\n\n\nfunction SafeStyle_tsickle_Closure_declarations() {\n}\n\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n * \n * \\@stable\n * @record\n */\nexport function SafeScript() {}\n\n\nfunction SafeScript_tsickle_Closure_declarations() {\n}\n\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n * \n * \\@stable\n * @record\n */\nexport function SafeUrl() {}\n\n\nfunction SafeUrl_tsickle_Closure_declarations() {\n}\n\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n * \n * \\@stable\n * @record\n */\nexport function SafeResourceUrl() {}\n\n\nfunction SafeResourceUrl_tsickle_Closure_declarations() {\n}\n\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n * \n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n * \n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n * \n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n * \n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n * \n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n * \n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n * \n * \\@stable\n * @abstract\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nfunction DomSanitizer_tsickle_Closure_declarations() {\n\n/**\n * Sanitizes a value for use in the given SecurityContext.\n * \n * If value is trusted for the context, this method will unwrap the contained safe value and use\n * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n * is responsible to make sure that the value can definitely be safely used in the given context.\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nDomSanitizer.prototype.sanitize = function(context, value) {};\n\n/**\n * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n * leave safe HTML intact, so in most situations this method should not be used.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nDomSanitizer.prototype.bypassSecurityTrustHtml = function(value) {};\n\n/**\n * Bypass security and trust the given value to be safe style value (CSS).\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nDomSanitizer.prototype.bypassSecurityTrustStyle = function(value) {};\n\n/**\n * Bypass security and trust the given value to be safe JavaScript.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nDomSanitizer.prototype.bypassSecurityTrustScript = function(value) {};\n\n/**\n * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n * in hyperlinks or `<img src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nDomSanitizer.prototype.bypassSecurityTrustUrl = function(value) {};\n\n/**\n * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nDomSanitizer.prototype.bypassSecurityTrustResourceUrl = function(value) {};\n}\n\nexport class DomSanitizerImpl extends DomSanitizer {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { super(); }\n/**\n * @param {?} ctx\n * @param {?} value\n * @return {?}\n */\nsanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return /** @type {?} */(( value as string));\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle( /** @type {?} */((value as string)));\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @param {?} expectedType\n * @return {?}\n */\n\nprivate checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSanitizerImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSanitizerImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSanitizerImpl.ctorParameters;\n/** @type {?} */\nDomSanitizerImpl.prototype._doc;\n}\n\n/**\n * @abstract\n */\nabstract class SafeValueImpl implements SafeValue {\n/**\n * @param {?} changingThisBreaksApplicationSecurity\n */\nconstructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n/**\n * @return {?}\n */\ntoString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nfunction SafeValueImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n\n/**\n * @abstract\n * @return {?}\n */\nSafeValueImpl.prototype.getTypeName = function() {};\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n/**\n * @return {?}\n */\ngetTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'ResourceURL'; }\n}\n"]}