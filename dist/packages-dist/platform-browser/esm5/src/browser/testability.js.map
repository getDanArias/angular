{"version":3,"sources":["../../../../../../packages/platform-browser/src/browser/testability.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAmD,oBAAA,EAAsB,OAAA,IAAW,MAAA,EAAO,MAAA,eAAA,CAAA;AAOlG,OALO,EAAA,MAAE,EAAM,MAAA,oBAAA,CAAA;AAMf;IAAA;IAiEA,CAfC;IAjDD;;OAEG;IANM,0BAAA,GAOT,cAPkB,oBAAA,CAAqB,IAAI,qBAAA,EAAsB,CAAE,CAAC,CAAC,CAAA;IAQrE;;;OAGG;IACH,2CAVG,GAUH,UAVc,QAAU;QAWpB,MAAM,CAVC,uBAAC,CAAuB,GAAG,UAAA,IAAO,EAAK,eAA2B;YAA3B,gCAAA,EAAA,sBAA2B;YAWvE,IAAM,gBAAgB,CAVhB,WAAA,GAAc,QAAA,CAAS,qBAAC,CAAqB,IAAC,EAAK,eAAA,CAAgB,CAAC;YAW1E,EAAE,CAAC,CAAC,WAVC,IAAc,IAAA,CAAK,CAAC,CAAA;gBAWvB,MAVM,IAAI,KAAA,CAAM,yCAAC,CAAyC,CAAC;YAW7D,CAAC;YACD,MAAM,CAVC,WAAA,CAAY;QAWrB,CAAC,CAVC;QAYF,MAAM,CAVC,4BAAC,CAA4B,GAAG,cAAM,OAAA,QAAA,CAAS,mBAAC,EAAmB,EAA7B,CAA6B,CAAE;QAY5E,MAAM,CAVC,2BAAC,CAA2B,GAAG,cAAM,OAAA,QAAA,CAAS,kBAAC,EAAkB,EAA5B,CAA4B,CAAE;QAY1E,IAAM,gBAAgB,CAVhB,aAAA,GAAgB,UAAA,QAAW,CAAI,iBAAA;YAWnC,IAAM,gBAAgB,CAVhB,aAAA,GAAgB,MAAA,CAAO,4BAAC,CAA4B,EAAC,CAAE;YAW7D,IAAI,gBAAgB,CAVhB,KAAA,GAAQ,aAAA,CAAc,MAAC,CAAM;YAWjC,IAAI,gBAAgB,CAVhB,OAAA,GAAU,KAAA,CAAM;YAWpB,IAAM,gBAAgB,CAVhB,SAAA,GAAY,UAAA,QAAmB,CAAI,iBAAA;gBAWvC,OAAO,GAVG,OAAA,IAAW,QAAA,CAAS;gBAW9B,KAAK,EAVC,CAAE;gBAWR,EAAE,CAAC,CAAC,KAVC,IAAQ,CAAA,CAAE,CAAC,CAAA;oBAWd,QAAQ,CAVC,OAAC,CAAO,CAAC;gBAWpB,CAAC;YACH,CAAC,CAVC;YAWF,aAAa,CAVC,OAAC,CAAO,UAAC,WAAqB,CAAI,iBAAA;gBAW9C,WAAW,CAVC,UAAC,CAAU,SAAC,CAAS,CAAC;YAWpC,CAAC,CAVC,CAAC;QAWL,CAAC,CAVC;QAYF,EAAE,CAAC,CAAC,CAVC,MAAC,CAAM,sBAAC,CAAsB,CAAC,CAAC,CAAA;YAWnC,MAAM,CAVC,sBAAC,CAAsB,GAAG,EAAA,CAAG;QAWtC,CAAC;QACD,MAAM,CAVC,sBAAC,CAAsB,CAAC,IAAC,CAAI,aAAC,CAAa,CAAC;IAWrD,CAAC;IACH;;;;;OAKG;IACH,qDAfG,GAeH,UAfwB,QAAU,EAAqB,IAAM,EAAK,eAAiB;QAiB/E,EAAE,CAAC,CAAC,IAfC,IAAO,IAAA,CAAK,CAAC,CAAA;YAgBhB,MAAM,CAfC,IAAA,CAAK;QAgBd,CAAC;QACD,IAAM,gBAAgB,CAfhB,CAAA,GAAI,QAAA,CAAS,cAAC,CAAc,IAAC,CAAI,CAAC;QAgBxC,EAAE,CAAC,CAAC,CAfC,IAAI,IAAA,CAAK,CAAC,CAAA;YAgBb,MAAM,CAfC,CAAA,CAAE;QAgBX,CAAC;QAfC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,eAAC,CAAe,CAAC,CAAA;YAgB3B,MAAM,CAfC,IAAA,CAAK;QAgBd,CAAC;QACD,EAAE,CAAC,CAAC,MAfC,EAAM,CAAE,YAAC,CAAY,IAAC,CAAI,CAAC,CAAC,CAAA;YAgB/B,MAAM,CAfC,IAAA,CAAK,qBAAC,CAAqB,QAAC,EAAS,MAAA,EAAO,CAAE,OAAC,CAAO,IAAC,CAAI,EAAE,IAAA,CAAK,CAAC;QAgB5E,CAAC;QACD,MAAM,CAfC,IAAA,CAAK,qBAAC,CAAqB,QAAC,EAAS,MAAA,EAAO,CAAE,aAAC,CAAa,IAAC,CAAI,EAAE,IAAA,CAAK,CAAC;IAgBlF,CAAC;IACH,4BAfC;AAeD,CAjEA,AAkDC,IAAA","file":"testability.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, Éµglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nexport class BrowserGetTestability implements GetTestability {\n/**\n * @return {?}\n */\nstatic init() { setTestabilityGetter(new BrowserGetTestability()); }\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const /** @type {?} */ whenAllStable = (callback: any /** TODO #9100 */) => {\n      const /** @type {?} */ testabilities = global['getAllAngularTestabilities']();\n      let /** @type {?} */ count = testabilities.length;\n      let /** @type {?} */ didWork = false;\n      const /** @type {?} */ decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const /** @type {?} */ t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n"]}