{"version":3,"sources":["../../../../../../packages/platform-browser/src/browser/meta.ts"],"names":[],"mappings":"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","file":"meta.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n/**\n * A service that can be used to get and add meta tags.\n * \n * \\@experimental\n */\nexport class Meta {\nprivate _dom: DomAdapter;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { this._dom = getDOM(); }\n/**\n * @param {?} tag\n * @param {?=} forceCreation\n * @return {?}\n */\naddTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n/**\n * @param {?} tags\n * @param {?=} forceCreation\n * @return {?}\n */\naddTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n/**\n * @param {?} tag\n * @param {?=} selector\n * @return {?}\n */\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const /** @type {?} */ meta: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\nremoveTag(attrSelector: string): void { this.removeTagElement( /** @type {?} */((this.getTag(attrSelector)))); }\n/**\n * @param {?} meta\n * @return {?}\n */\nremoveTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n/**\n * @param {?} meta\n * @param {?=} forceCreation\n * @return {?}\n */\n\nprivate _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const /** @type {?} */ selector: string = this._parseSelector(meta);\n      const /** @type {?} */ elem: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const /** @type {?} */ element: HTMLMetaElement = /** @type {?} */(( this._dom.createElement('meta') as HTMLMetaElement));\n    this._setMetaElementAttributes(meta, element);\n    const /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n/**\n * @param {?} tag\n * @param {?} el\n * @return {?}\n */\n\nprivate _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\n\nprivate _parseSelector(tag: MetaDefinition): string {\n    const /** @type {?} */ attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n/**\n * @param {?} tag\n * @param {?} elem\n * @return {?}\n */\n\nprivate _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Meta_tsickle_Closure_declarations() {\n/** @type {?} */\nMeta.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMeta.ctorParameters;\n/** @type {?} */\nMeta.prototype._dom;\n/** @type {?} */\nMeta.prototype._doc;\n}\n\n"]}