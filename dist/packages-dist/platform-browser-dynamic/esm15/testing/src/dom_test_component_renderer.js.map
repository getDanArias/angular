{"version":3,"sources":["../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,MAAE,EAAO,UAAA,EAAW,MAAA,eAAA,CAAA;AAM3B,OALO,EAAA,qBAAE,EAAqB,MAAA,uBAAA,CAAA;AAM9B,OALO,EAAA,QAAE,EAAS,OAAA,IAAW,MAAA,EAAO,MAAA,2BAAA,CAAA;AAMpC;;GAEG;AACH,MAHC,+BAAqC,SAAQ,qBAAA;IAI9C;;OAEG;IACH,YANwC,IAAM,CAAI,iBAAA;QAAqB,KAAA,EAAM,CAAE;QAAvC,SAAA,GAAA,IAAA,CAAM,CAAI,iBAAA;IAA8B,CAAA;IAQhF;;;OAGG;IACH,iBAVG,CAAiB,QAAU;QAW1B,MAAM,gBAAgB,CAVhB,MAAA,GAAO,CAAe,MAAC,EAAM,CAAE,UAAC,CAWlC,MAhBN,EAMa,CAAE,OAAC,CAAO,MAAC,EAAM,CAAE,cAAC,CAAc,YAAC,QAAY,UAAQ,CAAU,CAAC,CAAC,CAAA,CAAC;QAY/E,8CAA8C;QAC9C,MAAM,gBAAgB,CAVhB,QAAA,GAAW,MAAA,EAAO,CAAE,gBAAC,CAAgB,IAAC,CAAI,IAAC,EAAK,YAAA,CAAa,CAAC;QAWpE,GAAG,CAAC,CAAC,IAVC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;YAWxC,MAAM,EAVC,CAAE,MAAC,CAAM,QAAC,CAAQ,CAAC,CAAC,CAAC,CAAC;QAIjC,CAAA;QAQE,MAAM,EAVC,CAAE,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,IAAC,EAAK,MAAA,CAAO,CAAC;IAW/C,CAAC;;AATI,mCAAA,GAA+C;IAWtD,EAVE,IAAA,EAAM,UAAA,EAhBN;CA2BD,CAVC;AAWF,kBAAkB;AATX,uCAAA,GAA4F,MAAM;IAWzG,EAAC,IAVC,EAAK,SAAA,EAAW,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,MAAA,EAlBvB,IAAA,EAAA,CAAA,QAAO,EAAA,EAAA,EAAA,EAAA;CA6BtB,CAVC;AAaF;IACA,gBAAgB;IAChB,wBAAwB,CAAC,UAAU,CAAC;IACpC;;;OAGG;IACH,wBAAwB,CAAC,cAAc,CAAC;IACxC,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,IAAI,CAAC;AACxC,CAAC","file":"dom_test_component_renderer.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {DOCUMENT, ÉµgetDOM as getDOM} from '@angular/platform-browser';\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any /** TODO #9100 */) { super(); }\n/**\n * @param {?} rootElId\n * @return {?}\n */\ninsertRootElement(rootElId: string) {\n    const /** @type {?} */ rootEl = /** @type {?} */(( <HTMLElement>getDOM().firstChild(\n        getDOM().content(getDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)))));\n\n    // TODO(juliemr): can/should this be optional?\n    const /** @type {?} */ oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');\n    for (let /** @type {?} */ i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    getDOM().appendChild(this._doc.body, rootEl);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DOMTestComponentRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nDOMTestComponentRenderer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDOMTestComponentRenderer.ctorParameters;\n/** @type {?} */\nDOMTestComponentRenderer.prototype._doc;\n}\n\n"]}