{"version":3,"sources":["../../../../../../packages/core/src/metadata/di.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAAc,MAAA,uBAAA,CAAA;AAOvB,OALO,EAAA,kBAAE,EAAmB,iBAAA,EAAkB,MAAA,oBAAA,CAAA;AAM9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAJC,CAAM,IAAA,gBAAA,CAAM,4BAAA,GAA+B,IAAI,cAAA,CAAmB,2BAAE,CAA2B,CAAC;AAKjG;;;;;GAKG;AACH,MAAM,iCAAgC,CAAC;AAGvC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAwDD;;;;;GAKG;AACH,MArBC,CAAM,IAAA,gBAAA,CAAM,SAAA,GAsBT,kBAAkB,CArBC,WAAC,EAAY,UAAA,aAAiB,IAAW,OAAA,CAAA,EAAE,aAAC,eAAA,EAAa,CAAC,EAAjB,CAAiB,CAAC,CAAC;AAmCnF;;;;;;;;GAQG;AACH;IAAA;IArB4B,CAAE;IAAF,YAAE;AAAF,CAqB5B,AArB8B,IAAA;;AAsB9B;;;;;;;GAOG;AACH,MAAM,uCAAsC,CAAC;AAG7C;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAqDD;;;;;GAKG;AACH,MAxCC,CAAM,IAAA,gBAAA,CAAM,eAAA,GAA4C,iBAAA,CAyCrD,iBAAiB,EACjB,UAAC,QAxCW,EAAK,IAAY;IAAZ,qBAAA,EAAA,SAAY;IAyCzB,OAAA,oBAxCE,QAAC,UAAA,EAAS,KAAA,EAAO,KAAA,EAAO,WAAA,EAAa,KAAA,EAAO,WAAA,EAAa,KAAA,IAAO,IAAI,EAAK;AAwC3E,CAxC2E,EAyC/E,KAAK,CAxCC,CAAC;AAyCX;;;;;;GAMG;AACH,MAAM,oCAAmC,CAAC;AAG1C;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAmDD;;;;;GAKG;AACH,MA1DC,CAAM,IAAA,gBAAA,CAAM,YAAA,GAAsC,iBAAA,CA2D/C,cAAc,EA1DE,UAAA,QAAY,EAAK,IAAY;IAAZ,qBAAA,EAAA,SAAY;IA2DzB,OAAA,oBA1DE,QAAC,UAAA,EAAS,KAAA,EAAO,IAAA,EAAM,WAAA,EAAa,KAAA,EAAO,WAAA,EAAa,IAAA,IAAM,IAAI,EAAK;AA0DzE,CA1DyE,EA2D7F,KAAK,CA1DC,CAAC;AA2DX;;;;;;;GAOG;AACH,MAAM,oCAAmC,CAAC;AAG1C;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAkDD;;;;;GAKG;AACH,MA7EC,CAAM,IAAA,gBAAA,CAAM,YAAA,GAAsC,iBAAA,CA8E/C,cAAc,EA7EE,UAAA,QAAY,EAAK,IAAY;IAAZ,qBAAA,EAAA,SAAY;IA8EzB,OAAA,oBA7EE,QAAC,UAAA,EAAS,KAAA,EAAO,KAAA,EAAO,WAAA,EAAa,IAAA,EAAM,WAAA,EAAa,IAAA,IAAM,IAAI,EAAK;AA6EzE,CA7EyE,EA8E7F,KAAK,CA7EC,CAAC;AA8EX;;;;;;;GAOG;AACH,MAAM,iCAAgC,CAAC;AAGvC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAgDD;;;;;GAKG;AACH,MAhGC,CAAM,IAAA,gBAAA,CAAM,SAAA,GAAgC,iBAAA,CAiGzC,WAAW,EAhGE,UAAA,QAAW,EAAK,IAAM;IAiGlB,OAAA,oBAhGE,QAAC,UAAA,EAAS,KAAA,EAAO,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,WAAA,EAAa,IAAA,IAAM,IAAI,EAAK;AAgGxE,CAhGwE,EAiGzF,KAAK,CAhGC,CAAC","file":"di.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Type} from '../type';\nimport {makeParamDecorator, makePropDecorator} from '../util/decorators';\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n * \n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n * \n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n * \n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n * \n * \\@NgModule({ \n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n * \n * \\@experimental\n */\nexport const /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n/**\n * Type of the Attribute decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function AttributeDecorator() {}\n\n\nfunction AttributeDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(name: string): any;\n*/\n/* TODO: handle strange member:\nnew (name: string): Attribute;\n*/\n}\n\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @stable\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * ### Example\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` like so:\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * ### Example as TypeScript Decorator\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n   *\n   * ### Example as ES5 annotation\n   *\n   * ```\n   * var MyComponent = function(title) {\n   *   ...\n   * };\n   *\n   * MyComponent.annotations = [\n   *   new ng.Component({...})\n   * ]\n   * MyComponent.parameters = [\n   *   [new ng.Attribute('title')]\n   * ]\n   * ```\n   *\n   * @stable\n   */\n  (name: string): any;\n  new (name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n */\nexport interface Attribute { attributeName?: string; }\n/**\n * Attribute decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ Attribute: AttributeDecorator =\n    makeParamDecorator('Attribute', (attributeName?: string) => ({attributeName}));\n\n/**\n * Type of the Query metadata.\n *\n * @stable\n */\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n/**\n * Base class for query metadata.\n * \n * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n * more information.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class Query {}\n/**\n * Type of the ContentChildren decorator / constructor function.\n * \n * See {\\@link ContentChildren}.\n * \n * \\@stable\n * @record\n */\nexport function ContentChildrenDecorator() {}\n\n\nfunction ContentChildrenDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): any;\n*/\n/* TODO: handle strange member:\nnew (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): Query;\n*/\n}\n\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * See {@link ContentChildren}.\n *\n * @stable\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * @whatItDoes Configures a content query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ContentChildren to get the {@link QueryList} of elements or directives from the\n   * content DOM. Any time a child element is added, removed, or moved, the query list will be\n   * updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **descendants** - include only direct children or all descendants.\n   * * **read** - read a different token from the queried elements.\n   *\n   * Let's look at an example:\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n * @stable\n * @Annotation\n */\nexport type ContentChildren = Query;\n/**\n * ContentChildren decorator and metadata.\n * \n *  \\@stable\n *  \\@Annotation\n */\nexport const /** @type {?} */ ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: false, isViewQuery: false, descendants: false, ...data}),\n    Query);\n/**\n * Type of the ContentChild decorator / constructor function.\n * \n * \n * \\@stable\n * @record\n */\nexport function ContentChildDecorator() {}\n\n\nfunction ContentChildDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(selector: Type<any>|Function|string, opts?: {read?: any}): any;\n*/\n/* TODO: handle strange member:\nnew (selector: Type<any>|Function|string, opts?: {read?: any}): ContentChild;\n*/\n}\n\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n *\n * @stable\n */\nexport interface ContentChildDecorator {\n  /**\n   * @whatItDoes Configures a content query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ContentChild to get the first element or the directive matching the selector from\n   * the content DOM. If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried element.\n   *\n   * Let's look at an example:\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * See {@link ContentChild}.\n *\n * @stable\n */\nexport type ContentChild = Query;\n/**\n * ContentChild decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild', (selector?: any, data: any = {}) =>\n                        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n/**\n * Type of the ViewChildren decorator / constructor function.\n * \n * See {\\@link ViewChildren}.\n * \n * \\@stable\n * @record\n */\nexport function ViewChildrenDecorator() {}\n\n\nfunction ViewChildrenDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(selector: Type<any>|Function|string, opts?: {read?: any}): any;\n*/\n/* TODO: handle strange member:\nnew (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChildren;\n*/\n}\n\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * See {@link ViewChildren}.\n *\n * @stable\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * @whatItDoes Configures a view query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ViewChildren to get the {@link QueryList} of elements or directives from the\n   * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * Let's look at an example:\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @stable\n */\nexport type ViewChildren = Query;\n/**\n * ViewChildren decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) =>\n                        ({selector, first: false, isViewQuery: true, descendants: true, ...data}),\n    Query);\n/**\n * Type of the ViewChild decorator / constructor function.\n * \n * See {\\@link ViewChild}\n * \n * \\@stable\n * @record\n */\nexport function ViewChildDecorator() {}\n\n\nfunction ViewChildDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(selector: Type<any>|Function|string, opts?: {read?: any}): any;\n*/\n/* TODO: handle strange member:\nnew (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChild;\n*/\n}\n\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * See {@link ViewChild}\n *\n * @stable\n */\nexport interface ViewChildDecorator {\n  /**\n   * @whatItDoes Configures a view query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ViewChild to get the first element or the directive matching the selector from the\n   * view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @stable\n */\nexport type ViewChild = Query;\n/**\n * ViewChild decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild', (selector: any, data: any) =>\n                     ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n"]}