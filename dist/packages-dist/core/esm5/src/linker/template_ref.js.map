{"version":3,"sources":["../../../../../../packages/core/src/linker/template_ref.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAYH;;;;;;;;;;;;;GAaG;AACH;IAAA;IAgBA,CAJC;IAID,kBAJC;AAID,CAhBA,AAYC,IAAA;;AAMD;IAEA;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,UAAU,GAAG,cAAY,CAAC,CAAC;IAEjD;;;;OAIG;IACH,WAAW,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAS,OAAO,IAAG,CAAC,CAAC;AAChE,CAAC","file":"template_ref.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n/**\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\n * \n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\n * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\n * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\n * the `TemplateRef` from a Component or a Directive via {\\@link Query}.\n * \n * To instantiate Embedded Views based on a Template, use\n * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n * View Container.\n * \\@stable\n * @abstract\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The location in the View where the Embedded View logically belongs to.\n   *\n   * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`\n   * inherit from the contexts of this location.\n   *\n   * Typically new Embedded Views are attached to the View Container of this location, but in\n   * advanced use-cases, the View can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  abstract get elementRef(): ElementRef;\n\n  abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n}\n\nfunction TemplateRef_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @return {?}\n */\nTemplateRef.prototype.elementRef = function() {};\n\n/**\n * @abstract\n * @param {?} context\n * @return {?}\n */\nTemplateRef.prototype.createEmbeddedView = function(context) {};\n}\n\n"]}