{"version":3,"sources":["../../../../../../packages/core/src/linker/view_ref.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAWH,OALO,EAAA,iBAAE,EAAiB,MAAA,yCAAA,CAAA;AAM1B;;;GAGG;AACH;IAJsC,mCAAA;IAItC;;IASA,CAJC;IAID,cAJC;AAID,CATA,AAKC,CATqC,iBAAA,GASrC;;AAMD;IAEA;;;;OAIG;IACH,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAE1C;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,SAAS,GAAG,cAAY,CAAC,CAAC;IAE5C;;;;OAIG;IACH,OAAO,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;AACpD,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACH;IA5BiD,2CAAA;IA4BjD;;IAIA,CA5BC;IA4BD,sBA5BC;AA4BD,CAJA,AAxBC,CAJgD,OAAA,GAIhD;;AA8BD;IAEA;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAElD;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,SAAS,GAAG,cAAY,CAAC,CAAC;AACpD,CAAC;AAED;;GAEG;AACH,MAAM,8BAA6B,CAAC;AAGpC;IACA,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAC3C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,cAAc,CAAC;AACzC,CAAC","file":"view_ref.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef} from '../application_ref';\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ViewRef extends ChangeDetectorRef {\n  /**\n   * Destroys the view and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  abstract get destroyed(): boolean;\n\n  abstract onDestroy(callback: Function): any /** TODO #9100 */;\n}\n\nfunction ViewRef_tsickle_Closure_declarations() {\n\n/**\n * Destroys the view and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\nViewRef.prototype.destroy = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nViewRef.prototype.destroyed = function() {};\n\n/**\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nViewRef.prototype.onDestroy = function(callback) {};\n}\n\n/**\n * Represents an Angular View.\n * \n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n * \n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n * \n * ### Example\n * \n * Given this template...\n * \n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n * \n * We have two {\\@link TemplateRef}s:\n * \n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n * \n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n * \n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n * \n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n * \n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n  abstract get context(): C;\n\n  abstract get rootNodes(): any[];\n}\n\nfunction EmbeddedViewRef_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @return {?}\n */\nEmbeddedViewRef.prototype.context = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nEmbeddedViewRef.prototype.rootNodes = function() {};\n}\n\n/**\n * @record\n */\nexport function InternalViewRef() {}\n\n\nfunction InternalViewRef_tsickle_Closure_declarations() {\n/** @type {?} */\nInternalViewRef.prototype.detachFromAppRef;\n/** @type {?} */\nInternalViewRef.prototype.attachToAppRef;\n}\n\n\nexport interface InternalViewRef extends ViewRef {\n  detachFromAppRef(): void;\n  attachToAppRef(appRef: ApplicationRef): void;\n}\n"]}