{"version":3,"sources":["../../../../../../packages/core/src/linker/view_container_ref.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAgBH;;;;;;;;;;;;;;;;;;GAkBG;AACH;IAAA;IAyFA,CAJC;IAID,uBAJC;AAID,CAzFA,AAqFC,IAAA;;AAMD;IAEA;;;;;OAKG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAEnD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEpD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,cAAc,GAAG,cAAY,CAAC,CAAC;IAE1D;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,KAAK,GAAG,cAAY,CAAC,CAAC;IAEjD;;;;;OAKG;IACH,gBAAgB,CAAC,SAAS,CAAC,GAAG,GAAG,UAAS,KAAK,IAAG,CAAC,CAAC;IAEpD;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,cAAY,CAAC,CAAC;IAElD;;;;;;;;;;;;;OAaG;IACH,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAS,WAAW,EAAE,OAAO,EAAE,KAAK,IAAG,CAAC,CAAC;IAEzF;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,gBAAgB,CAAC,SAAS,CAAC,eAAe,GAAG,UAAS,gBAAgB,EAAE,KAAK,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,IAAG,CAAC,CAAC;IAExH;;;;;;;;;;OAUG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,OAAO,EAAE,KAAK,IAAG,CAAC,CAAC;IAEhE;;;;;;;;OAQG;IACH,gBAAgB,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,OAAO,EAAE,YAAY,IAAG,CAAC,CAAC;IAErE;;;;;;OAMG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,OAAO,IAAG,CAAC,CAAC;IAE1D;;;;;;;OAOG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,KAAK,IAAG,CAAC,CAAC;IAEvD;;;;;;;OAOG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,KAAK,IAAG,CAAC,CAAC;AACvD,CAAC","file":"view_container_ref.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\n/**\n * Represents a container where one or more Views can be attached.\n * \n * The container can contain two kinds of Views. Host Views, created by instantiating a\n * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n * \n * The location of the View Container within the containing View is specified by the Anchor\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n * have a single View Container.\n * \n * Root elements of Views attached to this container become siblings of the Anchor Element in\n * the Rendered View.\n * \n * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n * \\@stable\n * @abstract\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing View.\n   * <!-- TODO: rename to anchorElement -->\n   */\n  abstract get element(): ElementRef;\n\n  abstract get injector(): Injector;\n\n  abstract get parentInjector(): Injector;\n\n  /**\n   * Destroys all Views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Returns the {@link ViewRef} for the View located in this container at the specified index.\n   */\n  abstract get(index: number): ViewRef|null;\n\n  /**\n   * Returns the number of Views currently attached to this container.\n   */\n  abstract get length(): number;\n\n  /**\n   * Instantiates an Embedded View based on the {@link TemplateRef `templateRef`} and inserts it\n   * into this container at the specified `index`.\n   *\n   * If `index` is not specified, the new View will be inserted as the last View in the container.\n   *\n   * Returns the {@link ViewRef} for the newly created View.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single {@link Component} and inserts its Host View into this container at the\n   * specified `index`.\n   *\n   * The component is instantiated using its {@link ComponentFactory} which can be\n   * obtained via {@link ComponentFactoryResolver#resolveComponentFactory}.\n   *\n   * If `index` is not specified, the new View will be inserted as the last View in the container.\n   *\n   * You can optionally specify the {@link Injector} that will be used as parent for the Component.\n   *\n   * Returns the {@link ComponentRef} of the Host View created for the newly instantiated Component.\n   */\n  abstract createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\n\n  /**\n   * Inserts a View identified by a {@link ViewRef} into the container at the specified `index`.\n   *\n   * If `index` is not specified, the new View will be inserted as the last View in the container.\n   *\n   * Returns the inserted {@link ViewRef}.\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Moves a View identified by a {@link ViewRef} into the container at the specified `index`.\n   *\n   * Returns the inserted {@link ViewRef}.\n   */\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\n  /**\n   * Returns the index of the View, specified via {@link ViewRef}, within the current container or\n   * `-1` if this container doesn't contain the View.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a View attached to this container at the specified `index`.\n   *\n   * If `index` is not specified, the last View in the container will be removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Use along with {@link #insert} to move a View within the current container.\n   *\n   * If the `index` param is omitted, the last {@link ViewRef} is detached.\n   */\n  abstract detach(index?: number): ViewRef|null;\n}\n\nfunction ViewContainerRef_tsickle_Closure_declarations() {\n\n/**\n * Anchor element that specifies the location of this container in the containing View.\n * <!-- TODO: rename to anchorElement -->\n * @abstract\n * @return {?}\n */\nViewContainerRef.prototype.element = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nViewContainerRef.prototype.injector = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nViewContainerRef.prototype.parentInjector = function() {};\n\n/**\n * Destroys all Views in this container.\n * @abstract\n * @return {?}\n */\nViewContainerRef.prototype.clear = function() {};\n\n/**\n * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n * @abstract\n * @param {?} index\n * @return {?}\n */\nViewContainerRef.prototype.get = function(index) {};\n\n/**\n * Returns the number of Views currently attached to this container.\n * @abstract\n * @return {?}\n */\nViewContainerRef.prototype.length = function() {};\n\n/**\n * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n * into this container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the {\\@link ViewRef} for the newly created View.\n * @abstract\n * @template C\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\nViewContainerRef.prototype.createEmbeddedView = function(templateRef, context, index) {};\n\n/**\n * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n * specified `index`.\n * \n * The component is instantiated using its {\\@link ComponentFactory} which can be\n * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n * \n * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n * @abstract\n * @template C\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @param {?=} ngModule\n * @return {?}\n */\nViewContainerRef.prototype.createComponent = function(componentFactory, index, injector, projectableNodes, ngModule) {};\n\n/**\n * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\nViewContainerRef.prototype.insert = function(viewRef, index) {};\n\n/**\n * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nViewContainerRef.prototype.move = function(viewRef, currentIndex) {};\n\n/**\n * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n * `-1` if this container doesn't contain the View.\n * @abstract\n * @param {?} viewRef\n * @return {?}\n */\nViewContainerRef.prototype.indexOf = function(viewRef) {};\n\n/**\n * Destroys a View attached to this container at the specified `index`.\n * \n * If `index` is not specified, the last View in the container will be removed.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\nViewContainerRef.prototype.remove = function(index) {};\n\n/**\n * Use along with {\\@link #insert} to move a View within the current container.\n * \n * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\nViewContainerRef.prototype.detach = function(index) {};\n}\n\n"]}