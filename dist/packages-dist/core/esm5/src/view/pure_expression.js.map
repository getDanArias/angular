{"version":3,"sources":["../../../../../../packages/core/src/view/pure_expression.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAA6E,oBAAA,EAAqB,MAAA,SAAA,CAAA;AAMzG,OALO,EAAA,gBAAE,EAAiB,qBAAA,EAAsB,MAAA,QAAA,CAAA;AAMhD;;;GAGG;AACH,MARC,sBAA2B,QAAU;IASpC,gDAAgD;IAChD,MAAM,CARC,kBAAA,yBAA2C,IAAI,KAAA,CAAM,QAAC,GAAU,CAAA,CAAE,CAAC,CAAC;AAS7E,CAAC;AACD;;;GAGG;AACH,MAXC,uBAA4B,QAAU;IAYrC,MAAM,CAXC,kBAAA,yBAA4C,IAAI,KAAA,CAAM,QAAC,CAAQ,CAAC,CAAC;AAY1E,CAAC;AACD;;;GAGG;AACH,MAdC,wBAA6B,WAAkC;IAe9D,IAAM,gBAAgB,CAdhB,IAAA,GAAO,MAAA,CAAO,IAAC,CAAI,WAAC,CAAW,CAAC;IAetC,IAAM,gBAAgB,CAdhB,MAAA,GAAS,IAAA,CAAK,MAAC,CAAM;IAe3B,IAAM,gBAAgB,CAdhB,aAAA,GAAgB,IAAI,KAAA,CAAM,MAAC,CAAM,CAAC;IAexC,GAAG,CAAC,CAAC,IAdC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,EAAQ,CAAA,EAAE,EAAG,CAAA;QAe/B,IAAM,gBAAgB,CAdhB,GAAA,GAAM,IAAA,CAAK,CAAC,CAAC,CAAC;QAepB,IAAM,gBAAgB,CAdhB,KAAA,GAAQ,WAAA,CAAY,GAAC,CAAG,CAAC;QAe/B,aAAa,CAdC,KAAC,CAAK,GAAG,GAAA,CAAI;IAe7B,CAAC;IAED,MAAM,CAdC,kBAAA,0BAA6C,aAAA,CAAc,CAAC;AAerE,CAAC;AACD;;;;GAIG;AACH,4BAlB4B,KAAO,EAAW,aAAsB;IAmBlE,IAAM,gBAAgB,CAlBhB,QAAA,GAAyB,IAAI,KAAA,CAAM,aAAC,CAAa,MAAC,CAAM,CAAC;IAmB/D,GAAG,CAAC,CAAC,IAlBC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,aAAA,CAAc,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;QAmB7C,IAAM,gBAAgB,CAlBhB,IAAA,GAAO,aAAA,CAAc,CAAC,CAAC,CAAC;QAmB9B,QAAQ,CAlBC,CAAC,CAAC,GAAG;YAmBZ,KAAK,sBAlBgB;YAmBrB,IAAI,EAlBE,IAAA;YAmBN,EAAE,EAlBE,IAAA;YAmBJ,eAAe,EAlBE,IAAA;YAmBjB,eAAe,EAlBE,IAAA;YAmBjB,MAAM,EAlBE,IAAA;SAmBT,CAlBC;IAmBJ,CAAC;IACD,MAAM,CAlBC;QAmBL,sCAAsC;QACtC,KAAK,EAlBE,CAAA,CAAE;QAmBT,MAAM,EAlBE,IAAA;QAmBR,YAAY,EAlBE,IAAA;QAmBd,YAAY,EAlBE,CAAA,CAAE;QAmBhB,WAAW,EAlBE,CAAA,CAAE;QAmBf,iBAAiB;QACjB,KAAK,OAAA;QACL,UAAU,EAlBE,CAAA;QAmBZ,gBAAgB,EAlBE,CAAA;QAmBlB,mBAAmB,EAlBE,CAAA;QAmBrB,cAAc,EAlBE,EAAA;QAmBhB,eAAe,EAlBE,CAAA;QAmBjB,UAAU,EAlBE,EAAA;QAmBZ,cAAc,EAlBE,CAAA,CAAE;QAmBlB,UAAU,EAlBE,CAAA,EAAG,QAAA,UAAA;QAmBf,YAAY,EAlBE,gBAAA,CAAiB,QAAC,CAAQ;QAmBxC,OAAO,EAlBE,EAAA;QAmBT,OAAO,EAlBE,IAAA;QAmBT,QAAQ,EAlBE,IAAA;QAmBV,IAAI,EAlBE,IAAA;QAmBN,KAAK,EAlBE,IAAA;QAmBP,SAAS,EAlBE,IAAA;KAmBZ,CAlBC;AAmBJ,CAAC;AACD;;;;GAIG;AACH,MAtBC,+BAAoC,IAAM,EAAU,GAAK;IAuBxD,MAAM,CAtBC,EAAA,KAAE,EAAM,SAAA,EAAU,CAAC;AAuB5B,CAAC;AACD;;;;;;;;;;;;;;GAcG;AACH,MApCC,6CAqCG,IApCM,EAAU,GAAK,EAAS,EAAI,EAAK,EAAI,EAAK,EAAI,EAAK,EAAI,EAAK,EAAI,EAAK,EAAI,EAAK,EAAI,EAqCxF,EApCI,EAAK,EAAI,EAAK,EAAI;IAqCxB,IAAM,gBAAgB,CApChB,QAAA,GAAW,GAAA,CAAI,QAAC,CAAQ;IAqC9B,IAAI,gBAAgB,CApChB,OAAA,GAAU,KAAA,CAAM;IAqCpB,IAAM,gBAAgB,CApChB,OAAA,GAAU,QAAA,CAAS,MAAC,CAAM;IAqChC,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAqC3E,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,IAAK,qBAAA,CAAsB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,EAAA,CAAG,CAAC;QAAC,OAAA,GAAU,IAAA,CAAK;IAsC3E,EAAE,CAAC,CAAC,OApCC,CAAO,CAAC,CAAA;QAqCX,IAAM,gBAAgB,CApChB,IAAA,GAAO,oBAAA,CAAqB,IAAC,EAAK,GAAA,CAAI,KAAC,CAAK,CAAC;QAqCnD,IAAI,gBAAgB,CApChB,KAAA,SAAO,CAAI;QAqCf,MAAM,CAAC,CAAC,GApCC,CAAG,KAAC,wBAAkB,CAAK,CAAC,CAAA;YAqCnC;gBACE,KAAK,GApCG,IAAI,KAAA,CAAM,QAAC,CAAQ,MAAC,CAAM,CAAC;gBAqCnC,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAC,CAAC,GAAG,EAAA,CAAG;gBAqC/B,KAAK,CAAC;YACR;gBACE,KAAK,GApCG,EAAA,CAAG;gBAqCX,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,EAAE,CAAC,CAAC,OApCC,GAAS,CAAA,CAAE;oBAAC,KAAA,CAAM,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,EAAA,CAAG;gBAqChD,KAAK,CAAC;YACR;gBACE,IAAM,gBAAgB,CApChB,IAAA,GAAO,EAAA,CAAG;gBAqChB,MAAM,CAAC,CAAC,OApCC,CAAO,CAAC,CAAA;oBAqCf,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,CAAE,CAAC;wBAqC3B,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,CAAE,CAAC;wBAqC3B,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,CAAG,CAAC;wBAqC/B,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqCnC,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqCvC,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqC3C,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqC/C,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqCnD,KAAK,CAAC;oBACR,KApCK,CAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqCvD,KAAK,CAAC;oBACR,KApCK,EAAA;wBAqCH,KAAK,GApCG,IAAA,CAAK,SAAC,CAAS,EAAC,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;wBAqC3D,KAAK,CAAC;gBACV,CAAC;gBACD,KAAK,CAAC;QACV,CAAC;QACD,IAAI,CApCC,KAAC,GAAO,KAAA,CAAM;IAqCrB,CAAC;IACD,MAAM,CApCC,OAAA,CAAQ;AAqCjB,CAAC;AACD;;;;;GAKG;AACH,MAzCC,8CA0CG,IAzCM,EAAU,GAAK,EAAS,MAAY;IA0C5C,IAAM,gBAAgB,CAzChB,QAAA,GAAW,GAAA,CAAI,QAAC,CAAQ;IA0C9B,IAAI,gBAAgB,CAzChB,OAAA,GAAU,KAAA,CAAM;IA0CpB,GAAG,CAAC,CAAC,IAzCC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,CAAO,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;QA0CtC,iDAAiD;QACjD,sCAAsC;QACtC,EAAE,CAAC,CAAC,qBAzCC,CAAqB,IAAC,EAAK,GAAA,EAAK,CAAA,EAAG,MAAA,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YA0ClD,OAAO,GAzCG,IAAA,CAAK;QA0CjB,CAAC;IACH,CAAC;IACD,EAAE,CAAC,CAAC,OAzCC,CAAO,CAAC,CAAA;QA0CX,IAAM,gBAAgB,CAzChB,IAAA,GAAO,oBAAA,CAAqB,IAAC,EAAK,GAAA,CAAI,KAAC,CAAK,CAAC;QA0CnD,IAAI,gBAAgB,CAzChB,KAAA,SAAO,CAAI;QA0Cf,MAAM,CAAC,CAAC,GAzCC,CAAG,KAAC,wBAAkB,CAAK,CAAC,CAAA;YA0CnC;gBACE,KAAK,GAzCG,MAAA,CAAO;gBA0Cf,KAAK,CAAC;YACR;gBACE,KAAK,GAzCG,EAAA,CAAG;gBA0CX,GAAG,CAAC,CAAC,IAzCC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,CAAO,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;oBA0CtC,KAAK,CAzCC,CAAA,CAAA,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAA,CAAA,CAAM,GAAG,MAAA,CAAO,CAAC,CAAC,CAAC;gBA0CxC,CAAC;gBACD,KAAK,CAAC;YACR;gBACE,IAAM,gBAAgB,CAzChB,IAAA,GAAO,MAAA,CAAO,CAAC,CAAC,CAAC;gBA0CvB,IAAM,gBAAgB,CAzChB,MAAA,GAAS,MAAA,CAAO,KAAC,CAAK,CAAC,CAAC,CAAC;gBA0C/B,KAAK,GAzCS,IAAC,CAAI,SAAC,OAAN,IAAC,EAAgB,MAAG,CAAM,CAAC;gBA0CzC,KAAK,CAAC;QACV,CAAC;QACD,IAAI,CAzCC,KAAC,GAAO,KAAA,CAAM;IA0CrB,CAAC;IACD,MAAM,CAzCC,OAAA,CAAQ;AA0CjB,CAAC","file":"pure_expression.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BindingDef, BindingFlags, NodeDef, NodeFlags, PureExpressionData, ViewData, asPureExpressionData} from './types';\nimport {calcBindingFlags, checkAndUpdateBinding} from './util';\n/**\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(argCount: number): NodeDef {\n  // argCount + 1 to include the pipe as first arg\n  return _pureExpressionDef(NodeFlags.TypePurePipe, new Array(argCount + 1));\n}\n/**\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(argCount: number): NodeDef {\n  return _pureExpressionDef(NodeFlags.TypePureArray, new Array(argCount));\n}\n/**\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(propToIndex: {[p: string]: number}): NodeDef {\n  const /** @type {?} */ keys = Object.keys(propToIndex);\n  const /** @type {?} */ nbKeys = keys.length;\n  const /** @type {?} */ propertyNames = new Array(nbKeys);\n  for (let /** @type {?} */ i = 0; i < nbKeys; i++) {\n    const /** @type {?} */ key = keys[i];\n    const /** @type {?} */ index = propToIndex[key];\n    propertyNames[index] = key;\n  }\n\n  return _pureExpressionDef(NodeFlags.TypePureObject, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags: NodeFlags, propertyNames: string[]): NodeDef {\n  const /** @type {?} */ bindings: BindingDef[] = new Array(propertyNames.length);\n  for (let /** @type {?} */ i = 0; i < propertyNames.length; i++) {\n    const /** @type {?} */ prop = propertyNames[i];\n    bindings[i] = {\n      flags: BindingFlags.TypeProperty,\n      name: prop,\n      ns: null,\n      nonMinifiedName: prop,\n      securityContext: null,\n      suffix: null\n    };\n  }\n  return {\n    // will bet set by the view definition\n    index: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    ngContentIndex: -1,\n    childCount: 0, bindings,\n    bindingFlags: calcBindingFlags(bindings),\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view: ViewData, def: NodeDef): PureExpressionData {\n  return {value: undefined};\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(\n    view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): boolean {\n  const /** @type {?} */ bindings = def.bindings;\n  let /** @type {?} */ changed = false;\n  const /** @type {?} */ bindLen = bindings.length;\n  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n\n  if (changed) {\n    const /** @type {?} */ data = asPureExpressionData(view, def.index);\n    let /** @type {?} */ value: any;\n    switch (def.flags & NodeFlags.Types) {\n      case NodeFlags.TypePureArray:\n        value = new Array(bindings.length);\n        if (bindLen > 0) value[0] = v0;\n        if (bindLen > 1) value[1] = v1;\n        if (bindLen > 2) value[2] = v2;\n        if (bindLen > 3) value[3] = v3;\n        if (bindLen > 4) value[4] = v4;\n        if (bindLen > 5) value[5] = v5;\n        if (bindLen > 6) value[6] = v6;\n        if (bindLen > 7) value[7] = v7;\n        if (bindLen > 8) value[8] = v8;\n        if (bindLen > 9) value[9] = v9;\n        break;\n      case NodeFlags.TypePureObject:\n        value = {};\n        if (bindLen > 0) value[ /** @type {?} */((bindings[0].name))] = v0;\n        if (bindLen > 1) value[ /** @type {?} */((bindings[1].name))] = v1;\n        if (bindLen > 2) value[ /** @type {?} */((bindings[2].name))] = v2;\n        if (bindLen > 3) value[ /** @type {?} */((bindings[3].name))] = v3;\n        if (bindLen > 4) value[ /** @type {?} */((bindings[4].name))] = v4;\n        if (bindLen > 5) value[ /** @type {?} */((bindings[5].name))] = v5;\n        if (bindLen > 6) value[ /** @type {?} */((bindings[6].name))] = v6;\n        if (bindLen > 7) value[ /** @type {?} */((bindings[7].name))] = v7;\n        if (bindLen > 8) value[ /** @type {?} */((bindings[8].name))] = v8;\n        if (bindLen > 9) value[ /** @type {?} */((bindings[9].name))] = v9;\n        break;\n      case NodeFlags.TypePurePipe:\n        const /** @type {?} */ pipe = v0;\n        switch (bindLen) {\n          case 1:\n            value = pipe.transform(v0);\n            break;\n          case 2:\n            value = pipe.transform(v1);\n            break;\n          case 3:\n            value = pipe.transform(v1, v2);\n            break;\n          case 4:\n            value = pipe.transform(v1, v2, v3);\n            break;\n          case 5:\n            value = pipe.transform(v1, v2, v3, v4);\n            break;\n          case 6:\n            value = pipe.transform(v1, v2, v3, v4, v5);\n            break;\n          case 7:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n            break;\n          case 8:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n            break;\n          case 9:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n            break;\n          case 10:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            break;\n        }\n        break;\n    }\n    data.value = value;\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(\n    view: ViewData, def: NodeDef, values: any[]): boolean {\n  const /** @type {?} */ bindings = def.bindings;\n  let /** @type {?} */ changed = false;\n  for (let /** @type {?} */ i = 0; i < values.length; i++) {\n    // Note: We need to loop over all values, so that\n    // the old values are updates as well!\n    if (checkAndUpdateBinding(view, def, i, values[i])) {\n      changed = true;\n    }\n  }\n  if (changed) {\n    const /** @type {?} */ data = asPureExpressionData(view, def.index);\n    let /** @type {?} */ value: any;\n    switch (def.flags & NodeFlags.Types) {\n      case NodeFlags.TypePureArray:\n        value = values;\n        break;\n      case NodeFlags.TypePureObject:\n        value = {};\n        for (let /** @type {?} */ i = 0; i < values.length; i++) {\n          value[ /** @type {?} */((bindings[i].name))] = values[i];\n        }\n        break;\n      case NodeFlags.TypePurePipe:\n        const /** @type {?} */ pipe = values[0];\n        const /** @type {?} */ params = values.slice(1);\n        value = ( /** @type {?} */((<any>pipe.transform)))(...params);\n        break;\n    }\n    data.value = value;\n  }\n  return changed;\n}\n"]}