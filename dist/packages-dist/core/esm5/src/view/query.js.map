{"version":3,"sources":["../../../../../../packages/core/src/view/query.ts"],"names":[],"mappings":"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","file":"query.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '../linker/element_ref';\nimport {QueryList} from '../linker/query_list';\n\nimport {NodeDef, NodeFlags, QueryBindingDef, QueryBindingType, QueryDef, QueryValueType, ViewData, asElementData, asProviderData, asQueryList} from './types';\nimport {declaredViewContainer, filterQueryId, isEmbeddedView} from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(\n    flags: NodeFlags, id: number, bindings: {[propName: string]: QueryBindingType}): NodeDef {\n  let /** @type {?} */ bindingDefs: QueryBindingDef[] = [];\n  for (let /** @type {?} */ propName in bindings) {\n    const /** @type {?} */ bindingType = bindings[propName];\n    bindingDefs.push({propName, bindingType});\n  }\n\n  return {\n    // will bet set by the view definition\n    index: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    ngContentIndex: -1,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    childCount: 0,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: {id, filterId: filterQueryId(id), bindings: bindingDefs},\n    ngContent: null\n  };\n}\n/**\n * @return {?}\n */\nexport function createQuery(): QueryList<any> {\n  return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view: ViewData) {\n  const /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\n  while (view.parent && isEmbeddedView(view)) {\n    let /** @type {?} */ tplDef = /** @type {?} */(( view.parentNodeDef));\n    view = view.parent;\n    // content queries\n    const /** @type {?} */ end = tplDef.index + tplDef.childCount;\n    for (let /** @type {?} */ i = 0; i <= end; i++) {\n      const /** @type {?} */ nodeDef = view.def.nodes[i];\n      if ((nodeDef.flags & NodeFlags.TypeContentQuery) &&\n          (nodeDef.flags & NodeFlags.DynamicQuery) &&\n          ( /** @type {?} */((nodeDef.query)).filterId & queryIds) === /** @type {?} */(( nodeDef.query)).filterId) {\n        asQueryList(view, i).setDirty();\n      }\n      if ((nodeDef.flags & NodeFlags.TypeElement && i + nodeDef.childCount < tplDef.index) ||\n          !(nodeDef.childFlags & NodeFlags.TypeContentQuery) ||\n          !(nodeDef.childFlags & NodeFlags.DynamicQuery)) {\n        // skip elements that don't contain the template element or no query.\n        i += nodeDef.childCount;\n      }\n    }\n  }\n\n  // view queries\n  if (view.def.nodeFlags & NodeFlags.TypeViewQuery) {\n    for (let /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\n      const /** @type {?} */ nodeDef = view.def.nodes[i];\n      if ((nodeDef.flags & NodeFlags.TypeViewQuery) && (nodeDef.flags & NodeFlags.DynamicQuery)) {\n        asQueryList(view, i).setDirty();\n      }\n      // only visit the root nodes\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view: ViewData, nodeDef: NodeDef) {\n  const /** @type {?} */ queryList = asQueryList(view, nodeDef.index);\n  if (!queryList.dirty) {\n    return;\n  }\n  let /** @type {?} */ directiveInstance: any;\n  let /** @type {?} */ newValues: any[] = /** @type {?} */(( undefined));\n  if (nodeDef.flags & NodeFlags.TypeContentQuery) {\n    const /** @type {?} */ elementDef = /** @type {?} */(( /** @type {?} */(( nodeDef.parent)).parent));\n    newValues = calcQueryValues(\n        view, elementDef.index, elementDef.index + elementDef.childCount, /** @type {?} */(( nodeDef.query)), []);\n    directiveInstance = asProviderData(view, /** @type {?} */(( nodeDef.parent)).index).instance;\n  } else if (nodeDef.flags & NodeFlags.TypeViewQuery) {\n    newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */(( nodeDef.query)), []);\n    directiveInstance = view.component;\n  }\n  queryList.reset(newValues);\n  const /** @type {?} */ bindings = /** @type {?} */(( nodeDef.query)).bindings;\n  let /** @type {?} */ notify = false;\n  for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n    const /** @type {?} */ binding = bindings[i];\n    let /** @type {?} */ boundValue: any;\n    switch (binding.bindingType) {\n      case QueryBindingType.First:\n        boundValue = queryList.first;\n        break;\n      case QueryBindingType.All:\n        boundValue = queryList;\n        notify = true;\n        break;\n    }\n    directiveInstance[binding.propName] = boundValue;\n  }\n  if (notify) {\n    queryList.notifyOnChanges();\n  }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(\n    view: ViewData, startIndex: number, endIndex: number, queryDef: QueryDef,\n    values: any[]): any[] {\n  for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    const /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\n    if (valueType != null) {\n      values.push(getQueryValue(view, nodeDef, valueType));\n    }\n    if (nodeDef.flags & NodeFlags.TypeElement && /** @type {?} */(( nodeDef.element)).template &&\n        ( /** @type {?} */(( /** @type {?} */((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n            queryDef.filterId) {\n      // check embedded views that were attached at the place of their template.\n      const /** @type {?} */ elementData = asElementData(view, i);\n      if (nodeDef.flags & NodeFlags.EmbeddedViews) {\n        const /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n        for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n          const /** @type {?} */ embeddedView = embeddedViews[k];\n          const /** @type {?} */ dvc = declaredViewContainer(embeddedView);\n          if (dvc && dvc === elementData) {\n            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n          }\n        }\n      }\n      const /** @type {?} */ projectedViews = elementData.template._projectedViews;\n      if (projectedViews) {\n        for (let /** @type {?} */ k = 0; k < projectedViews.length; k++) {\n          const /** @type {?} */ projectedView = projectedViews[k];\n          calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n        }\n      }\n    }\n    if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n      // if no child matches the query, skip the children.\n      i += nodeDef.childCount;\n    }\n  }\n  return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(\n    view: ViewData, nodeDef: NodeDef, queryValueType: QueryValueType): any {\n  if (queryValueType != null) {\n    // a match\n    let /** @type {?} */ value: any;\n    switch (queryValueType) {\n      case QueryValueType.RenderElement:\n        value = asElementData(view, nodeDef.index).renderElement;\n        break;\n      case QueryValueType.ElementRef:\n        value = new ElementRef(asElementData(view, nodeDef.index).renderElement);\n        break;\n      case QueryValueType.TemplateRef:\n        value = asElementData(view, nodeDef.index).template;\n        break;\n      case QueryValueType.ViewContainerRef:\n        value = asElementData(view, nodeDef.index).viewContainer;\n        break;\n      case QueryValueType.Provider:\n        value = asProviderData(view, nodeDef.index).instance;\n        break;\n    }\n    return value;\n  }\n}\n"]}