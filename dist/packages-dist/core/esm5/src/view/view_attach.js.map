{"version":3,"sources":["../../../../../../packages/core/src/view/view_attach.ts"],"names":[],"mappings":"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","file":"view_attach.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementData, NodeDef, NodeFlags, Services, ViewData, ViewDefinition, ViewState} from './types';\nimport {RenderNodeAction, declaredViewContainer, isComponentView, renderNode, visitRootRenderNodes} from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(\n    parentView: ViewData, elementData: ElementData, viewIndex: number | undefined | null,\n    view: ViewData) {\n  let /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n  if (viewIndex === null || viewIndex === undefined) {\n    viewIndex = embeddedViews.length;\n  }\n  view.viewContainerParent = parentView;\n  addToArray(embeddedViews, /** @type {?} */(( viewIndex)), view);\n  attachProjectedView(elementData, view);\n\n  Services.dirtyParentQueries(view);\n\n  const /** @type {?} */ prevView = /** @type {?} */(( viewIndex)) > 0 ? embeddedViews[ /** @type {?} */((viewIndex)) - 1] : null;\n  renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData: ElementData, view: ViewData) {\n  const /** @type {?} */ dvcElementData = declaredViewContainer(view);\n  if (!dvcElementData || dvcElementData === vcElementData ||\n      view.state & ViewState.IsProjectedView) {\n    return;\n  }\n  // Note: For performance reasons, we\n  // - add a view to template._projectedViews only 1x throughout its lifetime,\n  //   and remove it not until the view is destroyed.\n  //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n  //    nested projected views as well, even accross component boundaries).\n  // - don't track the insertion order of views in the projected views array\n  //   (hard, as when the views of the same template are inserted different view containers)\n  view.state |= ViewState.IsProjectedView;\n  let /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n  if (!projectedViews) {\n    projectedViews = dvcElementData.template._projectedViews = [];\n  }\n  projectedViews.push(view);\n  // Note: we are changing the NodeDef here as we cannot calculate\n  // the fact whether a template is used for projection during compilation.\n  markNodeAsProjectedTemplate( /** @type {?} */((view.parent)).def, /** @type {?} */(( view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef: ViewDefinition, nodeDef: NodeDef) {\n  if (nodeDef.flags & NodeFlags.ProjectedTemplate) {\n    return;\n  }\n  viewDef.nodeFlags |= NodeFlags.ProjectedTemplate;\n  nodeDef.flags |= NodeFlags.ProjectedTemplate;\n  let /** @type {?} */ parentNodeDef = nodeDef.parent;\n  while (parentNodeDef) {\n    parentNodeDef.childFlags |= NodeFlags.ProjectedTemplate;\n    parentNodeDef = parentNodeDef.parent;\n  }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData: ElementData, viewIndex?: number): ViewData|null {\n  const /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n  if (viewIndex == null || viewIndex >= embeddedViews.length) {\n    viewIndex = embeddedViews.length - 1;\n  }\n  if (viewIndex < 0) {\n    return null;\n  }\n  const /** @type {?} */ view = embeddedViews[viewIndex];\n  view.viewContainerParent = null;\n  removeFromArray(embeddedViews, viewIndex);\n\n  // See attachProjectedView for why we don't update projectedViews here.\n  Services.dirtyParentQueries(view);\n\n  renderDetachView(view);\n\n  return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view: ViewData) {\n  if (!(view.state & ViewState.IsProjectedView)) {\n    return;\n  }\n  const /** @type {?} */ dvcElementData = declaredViewContainer(view);\n  if (dvcElementData) {\n    const /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n    if (projectedViews) {\n      removeFromArray(projectedViews, projectedViews.indexOf(view));\n      Services.dirtyParentQueries(view);\n    }\n  }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(\n    elementData: ElementData, oldViewIndex: number, newViewIndex: number): ViewData {\n  const /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n  const /** @type {?} */ view = embeddedViews[oldViewIndex];\n  removeFromArray(embeddedViews, oldViewIndex);\n  if (newViewIndex == null) {\n    newViewIndex = embeddedViews.length;\n  }\n  addToArray(embeddedViews, newViewIndex, view);\n\n  // Note: Don't need to change projectedViews as the order in there\n  // as always invalid...\n\n  Services.dirtyParentQueries(view);\n\n  renderDetachView(view);\n  const /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n  renderAttachEmbeddedView(elementData, prevView, view);\n\n  return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(\n    elementData: ElementData, prevView: ViewData | null, view: ViewData) {\n  const /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */(( prevView.def.lastRenderRootNode))) :\n                                    elementData.renderElement;\n  const /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\n  const /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\n  // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n  // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n  visitRootRenderNodes(view, RenderNodeAction.InsertBefore, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view: ViewData) {\n  visitRootRenderNodes(view, RenderNodeAction.RemoveChild, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr: any[], index: number, value: any) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr: any[], index: number) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    arr.pop();\n  } else {\n    arr.splice(index, 1);\n  }\n}\n"]}