{"version":3,"sources":["../../../../../packages/core/src/application_ref.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,UAAE,EAAU,MAAA,iBAAA,CAAA;AAQnB,OALO,EAAA,KAAE,EAAK,MAAA,uBAAA,CAAA;AAMd,OALO,EAAA,KAAE,EAAK,MAAA,qBAAA,CAAA;AAOd,OALO,EAAA,YAAE,EAAY,MAAA,sBAAA,CAAA;AAMrB,OALO,EAAA,iBAAE,EAAkB,SAAA,EAAU,MAAA,aAAA,CAAA;AAMrC,OALO,EAAA,SAAE,EAAS,MAAA,kBAAA,CAAA;AAOlB,OALO,EAAA,qBAAE,EAAqB,MAAA,oBAAA,CAAA;AAM9B,OALO,EAAA,sBAAE,EAAuB,oBAAA,EAAqB,MAAA,sBAAA,CAAA;AAMrD,OALO,EAAA,OAAE,EAAO,MAAA,WAAA,CAAA;AAMhB,OALO,EAAA,UAAE,EAAW,cAAA,EAAgB,QAAA,EAAyB,MAAA,MAAA,CAAA;AAM7D,OALO,EAAA,eAAE,EAAgC,MAAA,mBAAA,CAAA;AAMzC,OALO,EAAA,gBAAE,EAA8B,MAAA,4BAAA,CAAA;AAMvC,OALO,EAAA,6BAAE,EAA8B,wBAAA,EAAyB,MAAA,qCAAA,CAAA;AAMhE,OALO,EAAuC,WAAA,EAAY,MAAA,4BAAA,CAAA;AAO1D,OALO,EAAa,cAAA,EAAgB,QAAA,EAAS,MAAA,mBAAA,CAAA;AAM7C,OALO,EAAA,WAAE,EAAY,mBAAA,EAAoB,MAAA,2BAAA,CAAA;AAOzC,OALO,EAAA,MAAE,EAAM,MAAA,gBAAA,CAAA;AAOf,IAAI,gBAAgB,CALhB,QAAA,GAAoB,IAAA,CAAK;AAM7B,IAAI,gBAAgB,CALhB,cAAA,GAA0B,KAAA,CAAM;AAMpC,IAAI,gBAAgB,CALhB,SAAW,CAAY;AAO3B,MAAM,CALC,IAAA,gBAAA,CAAM,wBAAA,GAA2B,IAAI,cAAA,CAAuB,oBAAE,CAAoB,CAAC;AAM1F;;;;;;;;;;GAUG;AACH,MALC;IAMC,EAAE,CAAC,CAAC,cALC,CAAc,CAAC,CAAA;QAMlB,MALM,IAAI,KAAA,CAAM,+CAAC,CAA+C,CAAC;IAMnE,CAAC;IACD,QAAQ,GALG,KAAA,CAAM;AAMnB,CAAC;AACD;;;;;;;;GAQG;AACH,MALC;IAMC,cAAc,GALG,IAAA,CAAK;IAMtB,MAAM,CALC,QAAA,CAAS;AAMlB,CAAC;AACD;;;;GAIG;AACH;IACA;;;OAGG;IACH,sBARqB,IAAM,EAAe,KAAO;QAA5B,SAAA,GAAA,IAAA,CAAM;QAAe,UAAA,GAAA,KAAA,CAAO;IAAK,CAAA;IAUtD,mBATC;AASD,CAPA,AAFC,IAAA;;AAWD;IACA,gBAAgB;IAChB,YAAI,CAAA,SAAA,CAAA,IAAA,CAAA;IACJ,gBAAc;IACd,YAAQ,CAAA,SAAQ,CAAA,KAAU,CAAG;AAC7B,CAAC;AAED;;;;;;;GAOG;AACH,MAlBC,yBAA8B,QAAU;IAmBvC,EAAE,CAAC,CAAC,SAlBC,IAAY,CAAA,SAAE,CAAS,SAAC;QAmBzB,CAAC,SAlBC,CAAS,QAAC,CAAQ,GAAC,CAAG,wBAAC,EAAyB,KAAA,CAAM,CAAC,CAAC,CAAA;QAmB5D,MAlBM,IAAI,KAAA,CAmBN,+EAA8C,CAlBkC,CAAC;IAmBvF,CAAC;IACD,SAAQ,GAlBI,QAAA,CAAS,GAAC,CAAG,WAAC,CAAW,CAAC;IAmBtC,IAAM,gBAAG,CAlBH,KAAA,GAAQ,QAAA,CAAS,GAAC,CAAG,oBAAC,EAAqB,IAAA,CAAK,CAAC;IAmBvD,EAAE,CAAC,CAAC,KAlBC,CAAK;QAAC,KAAA,CAAM,OAAC,CAAO,UAAC,IAAM,IAAQ,OAAA,IAAA,EAAK,EAAL,CAAK,CAAE,CAAC;IAmBhD,MAAM,CAlBC,SAAA,CAAU;AAmBnB,CAAC;AACD;;;;;;;;GAQG;AACH,MArBC,gCAsBG,qBArB8E,EAsB9E,IArBM,EAAQ,SAA8B;IAA9B,0BAAA,EAAA,cAA8B;IAuB9C,IAAK,gBAAS,CArBR,MAAA,GAAS,IAAI,cAAA,CAAe,eAAC,IAAiB,CAAE,CAAC;IAsBvD,MAAM,CArBC,UAAA,cAAoC;QAApC,+BAAA,EAAA,mBAAoC;QAsBzC,IAAI,gBAAgB,CArBhB,QAAA,GAAW,WAAA,EAAY,CAAE;QAsB7B,EAAE,CAAC,CAAC,CArBC,QAAC,IAAW,QAAA,CAAS,QAAC,CAAQ,GAAC,CAAG,wBAAC,EAAyB,KAAA,CAAM,CAAC,CAAC,CAAA;YAsBvE,EAAE,CAAC,CAAC,qBArBC,CAAqB,CAAC,CAAA;gBAsB7B,qBAAA,CACQ,SAAS,CArBC,MAAC,CAAM,cAAC,CAAc,CAAC,MAAC,CAAM,EAAC,OAAC,EAAQ,MAAA,EAAQ,QAAA,EAAU,IAAA,EAAK,CAAC,CAAC,CAAC;YAsBlF,CAAC;YArBC,IAAA,CAAK,CAAA;gBAsBL,cAAa,CArBE,QAAC,CAAQ,MAAC,CAsBrB,SAAS,CArBC,MAAC,CAAM,cAAC,CAAc,CAAC,MAAC,CAAM,EAAC,OAAC,EAAQ,MAAA,EAAQ,QAAA,EAAU,IAAA,EAAK,CAAC,CAAC,CAAC,CAAC;YAsBrF,CAAA;QACA,CAAC;QACD,MAAK,CArBE,cAAA,CAAe,MAAC,CAAM,CAAC;IAsBhC,CAAA,CArBE;AAsBJ,CAAC;AACD;;;;;;GAMG;AACH,MAtBC,yBAA8B,aAAe;IAuB5C,IAAE,gBAAA,CAtBI,QAAA,GAAW,WAAA,EAAY,CAAE;IAwB/B,EAAE,CAAC,CAAC,CAtBC,QAAC,CAAQ,CAAC,CAAA;QAuBb,MAtBM,IAAI,KAAA,CAAM,qBAAC,CAAqB,CAAC;IAuBzC,CAAC;IAED,EAAE,CAAC,CAAC,CAtBC,QAAC,CAAQ,QAAC,CAAQ,GAAC,CAAG,aAAC,EAAc,IAAA,CAAK,CAAC,CAAC,CAAA;QAuB/C,MAtBM,IAAI,KAAA,CAuBP,sFAA2C,CAtB6C,CAAC;IAuB9F,CAAC;IAED,MAAM,CAtBC,QAAA,CAAS;AAuBlB,CAAC;AACD;;;;;GAKG;AACH,MAtBC;IAuBC,EAAE,CAAC,CAAC,SAtBC,IAAY,CAAA,SAAE,CAAS,SAAC,CAAS,CAAC,CAAA;QAuBrC,SAAS,CAtBC,OAAC,EAAO,CAAE;IAuBvB,CAAA;AACD,CAAC;AACD;;;;;GAKG;AACH,MAtBC;IAuBC,MAAM,CAtBC,SAAA,IAAa,CAAA,SAAE,CAAS,SAAC,GAAW,SAAA,GAAY,IAAA,CAAK;AAuB9D,CAAC;AACD;;;;;;;;;;GAUG;AACH;IAAA;IA8DA,CAtBC;IAsBD,kBAtBC;AAsBD,CA9DA,AAwCC,IAAA;;AAwBD;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACH,WAAU,CAAA,SAAA,CAAA,sBAAkC,GAAE,UAAA,aAAc,IAAA,CAAA,CAAA;IAE5D;;;;;;;;;;;;;;;;;;;OAmBG;IACH,WAAW,CAAC,SAAQ,CAAA,eAAiB,GAAC,UAAA,UAAA,EAAA,eAAA,IAAA,CAAA,CAAA;IAEtC;;;;;OAKG;IACH,WAAW,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;IAExD;;;;;OAKG;IACH,WAAW,CAAC,SAAG,CAAO,QAAE,GAAS,cAAY,CAAC,CAAC;IAE/C;;;;OAIG;IACH,WAAI,CAAA,SAAA,CAAA,OAAA,GAAA,cAAA,CAAA,CAAA;IAEJ;;;OAGG;IACH,WAAW,CAAA,SAAK,CAAA,SAAU,GAAQ,cAAC,CAAA,CAAa;AAChD,CAAC;AAED;;;;;GAKG;AACH,sCACI,YA/Gc,EAAc,MAAQ,EAAQ,QAAgB;IAgH9D,IA/GI,CAAA;QAgHF,IAAM,gBAAgB,CA/GhB,MAAA,GAAS,QAAA,EAAS,CAAE;QAgH1B,EAAE,CAAC,CAAC,SA/GC,CAAS,MAAC,CAAM,CAAC,CAAC,CAAA;YAgHrB,MAAM,CA/GC,MAAA,CAAO,KAAC,CAAK,UAAC,CAAG;gBAgHtB,MAAM,CA/GC,iBAAC,CAAiB,cAAM,OAAA,YAAA,CAAa,WAAC,CAAW,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;gBAyGlE,mDAAA;gBAQM,MA/GM,CAAA,CAAE;YAgHV,CAAC,CA/GC,CAAC;QAgHL,CAAC;QAED,MAAM,CA/GC,MAAA,CAAO;IAgHhB,CAAC;IA/GC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;QAyGb,MAAM,CAxGI,iBAAC,CAAiB,cAAM,OAAA,YAAA,CAAa,WAAC,CAAW,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;QAgH5D,mDAAmD;QACnD,MA/GM,CAAA,CAAE;IAgHV,CAAC;AACH,CAAC;AACD;;;GAGG;AACH;IA7GkC,wCAAA;IAiHlC;;OAEG;IACH,sBA/GsB,SAAW;QA+GjC,YA/G6C,iBAAM,SAAG;QAAhC,eAAA,GAAA,SAAA,CAAW;QAJvB,cAAA,GAA+B,EAAA,CAAG;QAClC,uBAAA,GAAgC,EAAA,CAAG;QACnC,gBAAA,GAAsB,KAAA,CAAM;;IAEgB,CAAA;IAgHtD;;;OAGG;IACH,gCAlHG,GAkHH,UAlHY,QAAgB,IAAc,IAAA,CAAK,iBAAC,CAAiB,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAC,CAAA;IAsHjF,sBApHM,kCAAA;QAiHN;;WAEG;aACH,cApH6B,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;;;OAAA;IAwHpD,sBAtHM,mCAAA;QAmHN;;WAEG;aACH,cAtHoB,MAAA,CAAO,IAAA,CAAK,UAAC,CAAU,CAAC,CAAA;;;OAAA;IAuH5C;;OAEG;IACH,8BAxHG,GAwHH;QACI,EAAE,CAAC,CAAC,IAxHC,CAAI,UAAC,CAAU,CAAC,CAAA;YAyHnB,MAxHM,IAAI,KAAA,CAAM,0CAAC,CAA0C,CAAC;QAyH9D,CAAC;QACD,IAAI,CAxHC,QAAC,CAAQ,KAAC,EAAK,CAAE,OAAC,CAAO,UAAA,MAAC,IAAS,OAAA,MAAA,CAAO,OAAC,EAAO,EAAf,CAAe,CAAE,CAAC;QAyH1D,IAAI,CAxHC,iBAAC,CAAiB,OAAC,CAAO,UAAA,QAAC,IAAW,OAAA,QAAA,EAAS,EAAT,CAAS,CAAE,CAAC;QAyHvD,IAAI,CAxHC,UAAC,GAAY,IAAA,CAAK;IAyHzB,CAAC;IACH;;;;OAIG;IACH,6CA5HG,GA4HH,UA5H2B,aAAkC;QA6HzD,MAAM,CA5HC,IAAA,CAAK,+BAAC,CAA+B,aAAC,CAAa,CAAC;IA6H7D,CAAC;IACH;;;;;OAKG;IAhIO,sDAAA,GAkIV,UAlI4C,aAAkC,EAAE,MAAS;QAkIzF,iBA6BG;QA3BC,yEAPgC;QAQhC,8DAA8D;QAC9D,4EAA4E;QAC5E,8CAA8C;QAC9C,EAAE,CAAC,CAAC,CAlIC,MAAC,CAAM;YAAC,MAAA,GAAS,IAAI,MAAA,CAAO,EAAC,oBAAC,EAAqB,SAAA,EAAU,EAAE,CAAC,CAAC;QAmItE,gDAP4C;QAC9C,qFAAA;QAQE,MAAM,CAlIC,MAAA,CAAO,GAAC,CAAG;YAmIhB,IAAM,gBAAgB,CAlIhB,cAAA,GAAiB,QAAA,CAAS,MAAC,CAAM,CAAC,EAAC,OAAC,EAAQ,MAAA,EAAQ,QAAA,EAAU,MAAA,EAAO,CAAC,EAAE,KAAA,CAAK,QAAC,CAAQ,CAAC;YAmI7F,IAAM,gBAAgB,CAlIhB,SAAA,GAAU,CAA0B,aAAC,CAAa,MAAC,CAAM,cAAC,CAAc,CAAA,CAAC;YAmI/E,IAAM,gBAAgB,CAlIhB,gBAAA,GAAiC,SAAA,CAAU,QAAC,CAAQ,GAAC,CAAG,YAAC,EAAa,IAAA,CAAK,CAAC;YAmIlF,EAAE,CAAC,CAAC,CAlIC,gBAAC,CAAgB,CAAC,CAAA;gBA4Hf,MA3HA,IAAI,KAAA,CAAM,+DAAC,CAA+D,CAAC;YAmInF,CAPC;YAQD,SAAS,CAlIC,SAAC,CAAS,cAAM,OAAA,MAAA,CAAO,KAAC,CAAI,QAAC,EAAS,SAAA,CAAU,EAAhC,CAAgC,CAAC,CAAC,CAAA,gBAAA;YAAA,CAAA,CAmI5D,MAPG,CAAA,CAAA,CA3HM,iBAAC,CAmIN,cAlIG,gBAAA,CAAA,OAAA,CAAA,CAAG,MAAA,CAAA,CAAA,CAAS,OAAC,CAAO,SAAC,CA4HxB,EAAA,IA3HM,EAAK,UAAA,KAAQ,IAAU,gBAAA,CAAiB,WAAC,CAAW,KAAC,CAAK,CAAC,CAAC,CAAA,EAAE,CAAC,EADlE,CACkE,CAAC,CAAC;YAmI3E,MAPI,CA3HG,4BAAA,CAA6B,gBAAC,EAAgB,gBAAA,CAAA,CAAA,CAAC,MAAA,CAAA,CAAA,EAAU;gBAmI9D,IAPE,gBAAoB,CA3HhB,UAAA,GAAoC,SAAA,CAAU,QAAC,CAAQ,GAAC,CAAG,qBAAC,CAAqB,CAAC;gBAmIxF,UAPU,CA3HC,eAAC,EAAe,CAAE;gBAmI7B,MAPE,CA3HK,UAAA,CAAW,WAAC,CAAW,IAAC,CAAI;oBA4HjC,KAAA,CA3HK,kBAAC,CAAkB,SAAC,CAAS,CAAC;oBA4HnC,MAAA,CA3HO,SAAA,CAAU;gBAmInB,CAAC,CAlIC,CAAC;YAmIL,CAAC,CAlIC,CAAC;QAmIL,CAAC,CAlIC,CAAC;IAmIL,CAAC;IACH;;;;;OAKG;IACH,sCAvIG,GAuIH,UAvIoB,UAAoB,EAAE,eAAqD;QAArD,gCAAA,EAAA,oBAAqD;QAyI3F,MAAM,CAvIC,IAAA,CAAK,wBAAC,CAAwB,UAAC,EAAW,eAAA,CAAgB,CAAC;IAwIpE,CAAC;IACH;;;;;;OAMG;IA5IO,+CAAA,GA8IV,UACM,UA9ImB,EAAE,eAAqD,EA+I1E,MA9IS;QA4If,iBASG;QAtJwB,gCAAA,EAAA,oBAAqD;QAgJ5E,IAAM,gBAAgB,CA9IhB,eAAA,GAAmC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,eAAC,CAAe,CAAC;QA+I5E,IAAM,gBAAgB,CA9IhB,QAAA,GAAW,eAAA,CAAgB,cAAC,CA+I9B,KAAK,CA9IC,OAAC,CAAO,eAAC,CAAe,GAAG,eAAA,GAAkB,CAAA,eAAE,CAAe,CAAC,CAAC;QAgJ1E,MAAM,CA9IC,QAAA,CAAS,kBAAC,CAAkB,UAAC,CAAU;aA+IzC,IA9IC,CAAI,UAAC,aAAC,IAAiB,OAAA,KAAA,CAAK,+BAAC,CAA+B,aAAC,EAAc,MAAA,CAAO,EAA3D,CAA2D,CAAC,CAAC;IA+I5F,CAAC;IACH;;;OAGG;IAhJO,yCAAA,GAkJV,UAlJ6B,SAAmC;QAmJ5D,IAAM,gBAPM,CA3IN,MAAA,GAAO,CAAE,SAAA,CAAU,QAAC,CAAQ,GAAC,CAAG,cAAC,CAAkB,CAAA,CAAe;QAmJxE,EAAE,CAAC,CAAC,SAlJC,CAAS,oBAAC,CAAoB,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAmJ7C,SAPS,CA3IC,oBAAC,CAAoB,OAAC,CAAO,UAAA,CAAC,IAAI,OAAA,MAAA,CAAO,SAAC,CAAS,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAmJnE,CAAC;QAlJC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,QAAC,CAAQ,aAAC,CAAa,CAAC,CAAA;YAmJ3C,SAPI,CA3IM,QAAC,CAAQ,aAAC,CAAa,MAAC,CAAM,CAAC;QAmJ3C,CAAC;QAlJC,IAAA,CAAK,CAAA;YAmJL,MAlJM,IAAI,KAAA,CAmJN,gBAPW,SA3II,CAAS,SAAC,CAAS,QAAC,CAAQ,WAAC,CAAW,mHAAC;gBAmJxD,6BAPuB,CA3IO,CAAC;QAmJrC,CAAC;QACD,IAPI,CA3IC,QAAC,CAAQ,IAAC,CAAI,SAAC,CAAS,CAAC;IAmJhC,CAAC;IAQH,mBAzJC;AAyJD,CAlIA,AAvBC,CAtFiC,WAAA;;AAsF3B,uBAAA,GAA+C;IAmJtD,EAlJE,IAAA,EAAM,UAAA,EAxFN;CA2OD,CAlJC;AAmJF,kBAAkB;AAjJX,2BAAA,GAA4F,cAAM,OAAA;IAmJzG,EAAC,IAlJC,EAAK,QAAA,GAAS;CAmJf,EApJwG,CAoJxG,CAlJC;AAqJF;IACA,gBAPc;IAQd,YAPU,CAAA,UAAS,CAAA;IAQnB;;;OAGG;IACH,YAPY,CAAC,cAAG,CAAA;IAQhB,gBAAgB;IAChB,YAPU,CAAA,SAAK,CAAA,QAAgB,CAAC;IAQhC,gBAPgB;IAQhB,YAAY,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACzC,gBAPM;IAQN,YAPQ,CAAA,SAAA,CAAA,UAAkB,CAAA;IAQ1B,gBAPS;IAQT,YAAY,CAAC,SAAS,CAPC,SAAE,CAAA;AAQzB,CAAC;AAED;;;;;GAKG;AACH;IAAA;IAgEA,CA5KC;IA4KD,qBA5KC;AA4KD,CAhEA,AA5GC,IAAA;;AA8KD;IAEA;;;;;;;;;;;;;;;;;;;OAAE;IAoBF,cAAc,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,gBAAgB,EAAE,kBAAkB,IAAG,CAAC,CAAC;IAEvF;;;;;;;;;;;OAWG;IACH,cAAc,CAAC,SAAS,CAAC,IAAI,GAAG,cAAY,CAAC,CAAC;IAE9C;;;;;OAKG;IACH,cAAc,CAAC,SAAS,CAAC,cAAc,GAAG,cAAY,CAAC,CAAC;IAExD;;;;OAIG;IACH,cAAc,CAAC,SAAS,CAAC,UAAU,GAAG,cAAY,CAAC,CAAC;IAEpD;;;;;;;OAOG;IACH,cAAc,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,IAAI,IAAG,CAAC,CAAC;IAExD;;;;;OAKG;IACH,cAAc,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,IAAI,IAAG,CAAC,CAAC;IAExD;;;;OAIG;IACH,cAAc,CAAC,SAAS,CAAC,SAAS,GAAG,cAAY,CAAC,CAAC;IAEnD;;;;OAIG;IACH,cAAc,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;AAClD,CAAC;AAED;;;GAGG;AACH;IAjQqC,2CAAA;IA8QrC;;;;;;;OAOG;IACH,yBAxQc,KAAO,EAAgB,QAAU,EAAiB,SAAW,EAC7D,iBAAmB,EACnB,yBAA2B,EAC3B,WAAa;QAqQ3B,YAOI,iBA3QM,SAwTP;QA5TW,WAAA,GAAA,KAAA,CAAO;QAAgB,cAAA,GAAA,QAAA,CAAU;QAAiB,eAAA,GAAA,SAAA,CAAW;QAC7D,uBAAA,GAAA,iBAAA,CAAmB;QACnB,+BAAA,GAAA,yBAAA,CAA2B;QAC3B,iBAAA,GAAA,WAAA,CAAa;QAbjB,yBAAA,GAAgE,EAAA,CAAG;QACnE,qBAAA,GAAuC,EAAA,CAAG;QAC1C,yBAAA,GAAmC,EAAA,CAAG;QACtC,YAAA,GAA4B,EAAA,CAAG;QAC/B,kBAAA,GAAwB,KAAA,CAAM;QAC9B,0BAAA,GAAgC,KAAA,CAAM;QAEtC,aAAA,GAAU,IAAA,CAAK;QAmRrB,KAAI,CA3QC,oBAAC,GAAsB,SAAA,EAAU,CAAE;QA6QxC,KAAI,CA3QC,KAAC,CAAK,gBAAC,CAAgB,SAAC,CA4QzB,EAAC,IA3QC,EAAK,cAAQ,KAAA,CAAK,KAAC,CAAK,GAAC,CAAG,cAAQ,KAAA,CAAK,IAAC,EAAI,CAAE,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA,EAAE,CAAC,CAAC;QA6Q/D,IAAM,gBAAgB,CA3QhB,iBAAA,GAAoB,IAAI,UAAA,CAAmB,UAAE,QAA2B;YA4Q5E,KAAI,CA3QC,OAAC,GAAS,KAAA,CAAK,KAAC,CAAK,QAAC,IAAW,CAAA,KAAE,CAAI,KAAC,CAAK,oBAAC;gBA4Q/C,CAAC,KA3QC,CAAI,KAAC,CAAK,oBAAC,CAAoB;YA4QrC,KAAI,CA3QC,KAAC,CAAK,iBAAC,CAAiB;gBA4Q3B,QAAQ,CA3QC,IAAC,CAAI,KAAC,CAAI,OAAC,CAAO,CAAC;gBA4Q5B,QAAQ,CA3QC,QAAC,EAAQ,CAAE;YA4QtB,CAAC,CA3QC,CAAC;QA4QL,CAAC,CA3QC,CAAC;QA6QH,IAAM,gBAAgB,CA3QhB,QAAA,GAAW,IAAI,UAAA,CAAmB,UAAE,QAA2B;YA4QnE,IAAM,gBAAgB,CA3QhB,SAAA,GAA0B,KAAA,CAAK,KAAC,CAAK,QAAC,CAAQ,SAAC,CAAS;gBA4Q5D,MAAM,CA3QC,sBAAC,EAAsB,CAAE;gBA6QhC,wEAAwE;gBACxE,2CAA2C;gBAC3C,iBAAiB,CA3QC;oBA4QhB,EAAE,CAAC,CAAC,CA3QC,KAAC,CAAI,OAAC,IAAU,CAAA,KAAE,CAAI,KAAC,CAAK,oBAAC;wBA4Q9B,CAAC,KA3QC,CAAI,KAAC,CAAK,oBAAC,CAAoB,CAAC,CAAA;wBA4QpC,KAAI,CA3QC,OAAC,GAAS,IAAA,CAAK;wBA4QpB,QAAQ,CA3QC,IAAC,CAAI,IAAC,CAAI,CAAC;oBA4QtB,CAAC;gBACH,CAAC,CA3QC,CAAC;YA4QL,CAAC,CA3QC,CAAC;YA6QH,IAAM,gBAAgB,CA3QhB,WAAA,GAA4B,KAAA,CAAK,KAAC,CAAK,UAAC,CAAU,SAAC,CAAS;gBA4QhE,MAAM,CA3QC,mBAAC,EAAmB,CAAE;gBA4Q7B,EAAE,CAAC,CAAC,KA3QC,CAAI,OAAC,CAAO,CAAC,CAAA;oBA4QhB,KAAI,CA3QC,OAAC,GAAS,KAAA,CAAM;oBA4QrB,KAAI,CA3QC,KAAC,CAAK,iBAAC,CAAiB,cAAQ,QAAA,CAAS,IAAC,CAAI,KAAC,CAAK,CAAC,CAAC,CAAA,CAAE,CAAC;gBA4QhE,CAAC;YACH,CAAC,CA3QC,CAAC;YA6QH,MAAM,CA3QC;gBA4QL,SAAS,CA3QC,WAAC,EAAW,CAAE;gBA4QxB,WAAW,CA3QC,WAAC,EAAW,CAAE;YA4Q5B,CAAC,CA3QC;QA4QJ,CAAC,CA3QC,CAAC;QA6QH,KAAI,CA3QC,SAAC,GAAW,KAAA,CAAM,iBAAC,EAAkB,KAAA,CAAM,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAC;;IA4QlE,CAAC;IACH;;;OAGG;IACH,oCAvQG,GAuQH,UA9Qa,OAAS;QA+QlB,IAAM,gBAAgB,CA9QhB,IAAA,GAAO,CAAA,CAAA,OAAY,CAAA,CAAgB,CAAC;QA+Q1C,IAAI,CA9QC,MAAC,CAAM,IAAC,CAAI,IAAC,CAAI,CAAC;QA+QvB,IAAI,CA9QC,cAAC,CAAc,IAAC,CAAI,CAAC;IA+Q5B,CAAC;IACH;;;OAGG;IACH,oCA1QG,GA0QH,UAjRa,OAAS;QAkRlB,IAAM,gBAAgB,CAjRhB,IAAA,GAAO,CAAA,CAAA,OAAY,CAAA,CAAgB,CAAC;QAkR1C,MAAM,CAjRC,IAAC,CAAI,MAAC,EAAO,IAAA,CAAK,CAAC;QAkR1B,IAAI,CAjRC,gBAAC,EAAgB,CAAE;IAkR1B,CAAC;IACH;;;;;OAKG;IACH,mCA/QG,GA+QH,UAtRc,kBAAgD,EAAE,kBAA6B;QAsR7F,iBAmCG;QAjCC,EAAE,CAAC,CAAC,CAtRC,IAAC,CAAI,WAAC,CAAW,IAAC,CAAI,CAAC,CAAA;YAuR1B,MAtRM,IAAI,KAAA,CAuRN,+IAA+I,CAtRC,CAAC;QAuRvJ,CAAC;QACD,IAAI,gBAAgB,CAtRhB,gBAAqC,CAAC;QAuR1C,EAAE,CAAC,CAAC,kBAtRC,YAA6B,gBAAA,CAAiB,CAAC,CAAA;YAuRlD,gBAAgB,GAtRG,kBAAA,CAAmB;QAuRxC,CAAC;QAtRC,IAAA,CAAK,CAAA;YAuRL,gBAAgB,GAtRC,CAAA,CAuRb,IAAI,CAtRC,yBAAC,CAAyB,uBAAC,CAAuB,kBAAC,CAAkB,CAAA,CAAA,CAAG;QAuRnF,CAAC;QACD,IAAI,CAtRC,mBAAC,CAAmB,IAAC,CAAI,gBAAC,CAAgB,aAAC,CAAa,CAAC;QAwR9D,sFAAsF;QACtF,IAAM,gBAAgB,CAtRhB,QAAA,GAAW,gBAAA,YAA4B,6BAAA;YAuRzC,IAAI;YACJ,IAAI,CAtRC,SAAC,CAAS,GAAC,CAAG,WAAC,CAAW,CAAC;QAuRpC,IAAM,gBAAgB,CAtRhB,cAAA,GAAiB,kBAAA,IAAsB,gBAAA,CAAiB,QAAC,CAAQ;QAuRvE,IAAM,gBAAgB,CAtRhB,OAAA,GAAU,gBAAA,CAAiB,MAAC,CAAM,QAAC,CAAQ,IAAC,EAAK,EAAA,EAAI,cAAA,EAAgB,QAAA,CAAS,CAAC;QAwRrF,OAAO,CAtRC,SAAC,CAAS,cAAQ,KAAA,CAAK,gBAAC,CAAgB,OAAC,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC;QAuR7D,IAAM,gBAAgB,CAtRhB,WAAA,GAAc,OAAA,CAAQ,QAAC,CAAQ,GAAC,CAAG,WAAC,EAAY,IAAA,CAAK,CAAC;QAuR5D,EAAE,CAAC,CAAC,WAtRC,CAAW,CAAC,CAAA;YAuRf,OAAO,CAtRC,QAAC,CAAQ,GAAC,CAAG,mBAAC,CAAmB;iBAuRpC,mBAtRC,CAAmB,OAAC,CAAO,QAAC,CAAQ,aAAC,EAAc,WAAA,CAAY,CAAC;QAuRxE,CAAC;QAED,IAAI,CAtRC,cAAC,CAAc,OAAC,CAAO,CAAC;QAuR7B,EAAE,CAAC,CAAC,SAtRC,EAAS,CAAE,CAAC,CAAA;YAuRf,IAAI,CAtRC,QAAC,CAAQ,GAAC,CAuRX,kGAAkG,CAtRC,CAAC;QAuR1G,CAAC;QACD,MAAM,CAtRC,OAAA,CAAQ;IAuRjB,CAAC;IACH;;;OAGG;IAxRO,wCAAA,GA0RV,UA1RyB,YAA+B;QA2RpD,IAAI,CA1RC,UAAC,CAAU,YAAC,CAAY,QAAC,CAAQ,CAAC;QA2RvC,IAAI,CA1RC,IAAC,EAAI,CAAE;QA2RZ,IAAI,CA1RC,eAAC,CAAe,IAAC,CAAI,YAAC,CAAY,CAAC;QA2RxC,iDAAiD;QACjD,IAAM,gBAAgB,CA1RhB,SAAA,GA2RF,IAAI,CA1RC,SAAC,CAAS,GAAC,CAAG,sBAAC,EAAuB,EAAA,CAAG,CAAC,MAAC,CAAM,IAAC,CAAI,mBAAC,CAAmB,CAAC;QA2RpF,SAAS,CA1RC,OAAC,CAAO,UAAC,QAAC,IAAY,OAAA,QAAA,CAAS,YAAC,CAAY,EAAtB,CAAsB,CAAC,CAAC;IA2R1D,CAAC;IACH;;;OAGG;IA5RO,0CAAA,GA8RV,UA9R2B,YAA+B;QA+RtD,IAAI,CA9RC,UAAC,CAAU,YAAC,CAAY,QAAC,CAAQ,CAAC;QA+RvC,MAAM,CA9RC,IAAC,CAAI,eAAC,EAAgB,YAAA,CAAa,CAAC;IA+R7C,CAAC;IACH;;OAEG;IACH,8BAzRG,GAyRH;QAAA,iBAmBG;QAlBC,EAAE,CAAC,CAAC,IAhSC,CAAI,YAAC,CAAY,CAAC,CAAA;YAiSrB,MAhSM,IAAI,KAAA,CAAM,2CAAC,CAA2C,CAAC;QAiS/D,CAAC;QAED,IAAM,gBAAgB,CAhShB,KAAA,GAAQ,eAAA,CAAgB,UAAC,EAAU,CAAE;QAiS3C,IAhSI,CAAA;YAiSF,IAAI,CAhSC,YAAC,GAAc,IAAA,CAAK;YAiSzB,IAAI,CAhSC,MAAC,CAAM,OAAC,CAAO,UAAC,IAAC,IAAQ,OAAA,IAAA,CAAK,aAAC,EAAa,EAAnB,CAAmB,CAAE,CAAC;YAiSpD,EAAE,CAAC,CAAC,IAhSC,CAAI,oBAAC,CAAoB,CAAC,CAAA;gBAiS7B,IAAI,CAhSC,MAAC,CAAM,OAAC,CAAO,UAAC,IAAC,IAAQ,OAAA,IAAA,CAAK,cAAC,EAAc,EAApB,CAAoB,CAAE,CAAC;YAiSvD,CAAC;QACH,CAAC;QAhSC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YAiSV,4EAA4E;YAC5E,IAAI,CAhSC,KAAC,CAAK,iBAAC,CAAiB,cAAM,OAAA,KAAA,CAAK,iBAAC,CAAiB,WAAC,CAAW,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAC;QAiS5E,CAAC;gBAhSS,CAAA;YAiSR,IAAI,CAhSC,YAAC,GAAc,KAAA,CAAM;YAiS1B,QAAQ,CAhSC,KAAC,CAAK,CAAC;QAiSlB,CAAC;IACH,CAAC;IACH;;OAEG;IACH,qCA3RG,GA2RH;QACI,uCAAuC;QACvC,IAAI,CAlSC,MAAC,CAAM,KAAC,EAAK,CAAE,OAAC,CAAO,UAAC,IAAC,IAAQ,OAAA,IAAA,CAAK,OAAC,EAAO,EAAb,CAAa,CAAE,CAAC;IAmSxD,CAAC;IAIH,sBApSM,sCAAA;QAiSN;;WAEG;aACH,cApSoB,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,MAAC,CAAM,CAAC,CAAA;;;OAAA;IAwS/C,sBAtSM,2CAAA;QAmSN;;WAEG;aACH,cAtSsC,MAAA,CAAO,IAAA,CAAK,mBAAC,CAAmB,CAAC,CAAA;;;OAAA;IA0SvE,sBAxSM,uCAAA;QAqSN;;WAEG;aACH,cAxS0C,MAAA,CAAO,IAAA,CAAK,eAAC,CAAe,CAAC,CAAA;;;OAAA;IA4SvE,sBA1SM,qCAAA;QAuSN;;WAEG;aACH,cA1SwC,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;;;OAAA;IAuT/D,sBAtTC;AAsTD,CAvNA,AA/FC,CAlKoC,cAAA;;AAkQrC;;GAEG;AAlQM,0BAAA,GAAyB,cAAA,CAAe,uBAAC,CAAuB,CAAC;AAuKnE,0BAAA,GAA+C;IAoStD,EAnSE,IAAA,EAAM,UAAA,EA3KN;CA+cD,CAnSC;AAoSF,kBAAkB;AAlSX,8BAAA,GAA4F,cAAM,OAAA;IAoSzG,EAAC,IAnSC,EAAK,MAAA,GAAO;IAoSd,EAAC,IAnSC,EAAK,OAAA,GAAQ;IAoSf,EAAC,IAnSC,EAAK,QAAA,GAAS;IAoShB,EAAC,IAnSC,EAAK,YAAA,GAAa;IAoSpB,EAAC,IAnSC,EAAK,wBAAA,GAAyB;IAoShC,EAAC,IAnSC,EAAK,qBAAA,GAAsB;CAoS5B,EA1SwG,CA0SxG,CAnSC;AAsSF;IACA;;;OAGG;IACH,eAAe,CAAC,UAAU,CAAC;IAC3B,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;IAC/B,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,mBAAmB,CAAC;IAC9C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC;IAC1C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,mBAAmB,CAAC;IAC9C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;IACjC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC;IACvC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,oBAAoB,CAAC;IAC/C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;IACpC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;IAClC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC;IAChC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;IACnC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;IACpC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC5C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,yBAAyB,CAAC;IACpD,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,WAAW,CAAC;AACtC,CAAC;AAED;;;;;GAKG;AACH,gBAvWkB,IAAS,EAAG,EAAI;IAwWhC,IAAM,gBAAgB,CAvWhB,KAAA,GAAQ,IAAA,CAAK,OAAC,CAAO,EAAC,CAAE,CAAC;IAwW/B,EAAE,CAAC,CAAC,KAvWC,GAAO,CAAA,CAAE,CAAC,CAAC,CAAA;QAwWd,IAAI,CAvWC,MAAC,CAAM,KAAC,EAAM,CAAA,CAAE,CAAC;IAwWxB,CAAC;AACH,CAAC","file":"application_ref.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {share} from 'rxjs/operator/share';\n\nimport {ErrorHandler} from '../src/error_handler';\nimport {scheduleMicroTask, stringify} from '../src/util';\nimport {isPromise} from '../src/util/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, StaticProvider} from './di';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {NgZone} from './zone/ng_zone';\n\nlet /** @type {?} */ _devMode: boolean = true;\nlet /** @type {?} */ _runModeLocked: boolean = false;\nlet /** @type {?} */ _platform: PlatformRef;\n\nexport const /** @type {?} */ ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n * \n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n * \n * \\@stable\n * @return {?}\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n * \n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n * \n * \\@experimental\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n/**\n * Creates a factory for a platform\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null,\n    name: string, providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) =>\n    PlatformRef {\n  const /** @type {?} */ marker = new InjectionToken(`Platform: ${name}`);\n  return (extraProviders: StaticProvider[] = []) => {\n    let /** @type {?} */ platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        createPlatform(Injector.create(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true})));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const /** @type {?} */ platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n/**\n * Destroy the existing platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n/**\n * Returns the current platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * \n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformRef {\n  /**\n   * Creates an instance of an `@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * ## Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   *\n   * @experimental APIs related to application bootstrap are currently under review.\n   */\n  abstract bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>>;\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * ## Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   * @stable\n   */\n  abstract bootstrapModule<M>(\n      moduleType: Type<M>,\n      compilerOptions?: CompilerOptions|CompilerOptions[]): Promise<NgModuleRef<M>>;\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  abstract onDestroy(callback: () => void): void;\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  abstract destroy(): void;\n\n  abstract get destroyed(): boolean;\n}\n\nfunction PlatformRef_tsickle_Closure_declarations() {\n\n/**\n * Creates an instance of an `\\@NgModule` for the given platform\n * for offline compilation.\n * \n * ## Simple Example\n * \n * ```typescript\n * my_module.ts:\n * \n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * main.ts:\n * import {MyModuleNgFactory} from './my_module.ngfactory';\n * import {platformBrowser} from '\\@angular/platform-browser';\n * \n * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n * ```\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @abstract\n * @template M\n * @param {?} moduleFactory\n * @return {?}\n */\nPlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {};\n\n/**\n * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n * \n * ## Simple Example\n * \n * ```typescript\n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n * ```\n * \\@stable\n * @abstract\n * @template M\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nPlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {};\n\n/**\n * Register a listener to be called when the platform is disposed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nPlatformRef.prototype.onDestroy = function(callback) {};\n\n/**\n * Retrieve the platform {\\@link Injector}, which is the parent injector for\n * every Angular application on the page and provides singleton providers.\n * @abstract\n * @return {?}\n */\nPlatformRef.prototype.injector = function() {};\n\n/**\n * Destroy the Angular platform and all Angular applications on the page.\n * @abstract\n * @return {?}\n */\nPlatformRef.prototype.destroy = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformRef.prototype.destroyed = function() {};\n}\n\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const /** @type {?} */ result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch ( /** @type {?} */e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class PlatformRef_ extends PlatformRef {\nprivate _modules: NgModuleRef<any>[] = [];\nprivate _destroyListeners: Function[] = [];\nprivate _destroyed: boolean = false;\n/**\n * @param {?} _injector\n */\nconstructor(private _injector: Injector) { super(); }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._injector; }\n/**\n * @return {?}\n */\nget destroyed() { return this._destroyed; }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n/**\n * @template M\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleFactoryWithZone(moduleFactory);\n  }\n/**\n * @template M\n * @param {?} moduleFactory\n * @param {?=} ngZone\n * @return {?}\n */\n\nprivate _bootstrapModuleFactoryWithZone<M>(moduleFactory: NgModuleFactory<M>, ngZone?: NgZone):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    if (!ngZone) ngZone = new NgZone({enableLongStackTrace: isDevMode()});\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const /** @type {?} */ ngZoneInjector = Injector.create([{provide: NgZone, useValue: ngZone}], this.injector);\n      const /** @type {?} */ moduleRef = /** @type {?} */(( <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector)));\n      const /** @type {?} */ exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef)); /** @type {?} */((\n      ngZone)).runOutsideAngular(\n          () => /** @type {?} */(( ngZone)).onError.subscribe(\n              {next: (error: any) => { exceptionHandler.handleError(error); }}));\n      return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */(( ngZone)), () => {\n        const /** @type {?} */ initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n/**\n * @template M\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = []):\n      Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleWithZone(moduleType, compilerOptions);\n  }\n/**\n * @template M\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @param {?=} ngZone\n * @return {?}\n */\n\nprivate _bootstrapModuleWithZone<M>(\n      moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = [],\n      ngZone?: NgZone): Promise<NgModuleRef<M>> {\n    const /** @type {?} */ compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const /** @type {?} */ compiler = compilerFactory.createCompiler(\n        Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone));\n  }\n/**\n * @param {?} moduleRef\n * @return {?}\n */\n\nprivate _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const /** @type {?} */ appRef = /** @type {?} */(( moduleRef.injector.get(ApplicationRef) as ApplicationRef));\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction PlatformRef__tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformRef_.ctorParameters;\n/** @type {?} */\nPlatformRef_.prototype._modules;\n/** @type {?} */\nPlatformRef_.prototype._destroyListeners;\n/** @type {?} */\nPlatformRef_.prototype._destroyed;\n/** @type {?} */\nPlatformRef_.prototype._injector;\n}\n\n/**\n * A reference to an Angular application running on a page.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ApplicationRef {\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the [componentType]'s\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * [componentType]'s selector.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  abstract bootstrap<C>(\n      componentFactory: ComponentFactory<C>|Type<C>,\n      rootSelectorOrNode?: string|any): ComponentRef<C>;\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  abstract tick(): void;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  abstract get componentTypes(): Type<any>[];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  abstract get components(): ComponentRef<any>[];\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  abstract attachView(view: ViewRef): void;\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  abstract detachView(view: ViewRef): void;\n\n  /**\n   * Returns the number of attached views.\n   */\n  abstract get viewCount(): number;\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   */\n  abstract get isStable(): Observable<boolean>;\n}\n\nfunction ApplicationRef_tsickle_Closure_declarations() {\n\n/**\n * Bootstrap a new component at the root level of the application.\n * \n * ### Bootstrap process\n * \n * When bootstrapping a new root component into an application, Angular mounts the\n * specified application component onto DOM elements identified by the [componentType]'s\n * selector and kicks off automatic change detection to finish initializing the component.\n * \n * Optionally, a component can be mounted onto a DOM element that does not match the\n * [componentType]'s selector.\n * \n * ### Example\n * {\\@example core/ts/platform/platform.ts region='longform'}\n * @abstract\n * @template C\n * @param {?} componentFactory\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\nApplicationRef.prototype.bootstrap = function(componentFactory, rootSelectorOrNode) {};\n\n/**\n * Invoke this method to explicitly process change detection and its side-effects.\n * \n * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n * further changes are detected. If additional changes are picked up during this second cycle,\n * bindings in the app have side-effects that cannot be resolved in a single change detection\n * pass.\n * In this case, Angular throws an error, since an Angular application can only have one change\n * detection pass during which all change detection must complete.\n * @abstract\n * @return {?}\n */\nApplicationRef.prototype.tick = function() {};\n\n/**\n * Get a list of component types registered to this application.\n * This list is populated even before the component is created.\n * @abstract\n * @return {?}\n */\nApplicationRef.prototype.componentTypes = function() {};\n\n/**\n * Get a list of components registered to this application.\n * @abstract\n * @return {?}\n */\nApplicationRef.prototype.components = function() {};\n\n/**\n * Attaches a view so that it will be dirty checked.\n * The view will be automatically detached when it is destroyed.\n * This will throw if the view is already attached to a ViewContainer.\n * @abstract\n * @param {?} view\n * @return {?}\n */\nApplicationRef.prototype.attachView = function(view) {};\n\n/**\n * Detaches a view from dirty checking again.\n * @abstract\n * @param {?} view\n * @return {?}\n */\nApplicationRef.prototype.detachView = function(view) {};\n\n/**\n * Returns the number of attached views.\n * @abstract\n * @return {?}\n */\nApplicationRef.prototype.viewCount = function() {};\n\n/**\n * Returns an Observable that indicates when the application is stable or unstable.\n * @abstract\n * @return {?}\n */\nApplicationRef.prototype.isStable = function() {};\n}\n\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class ApplicationRef_ extends ApplicationRef {\n/**\n * \\@internal\n */\nstatic _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\nprivate _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\nprivate _rootComponents: ComponentRef<any>[] = [];\nprivate _rootComponentTypes: Type<any>[] = [];\nprivate _views: InternalViewRef[] = [];\nprivate _runningTick: boolean = false;\nprivate _enforceNoNewChanges: boolean = false;\nprivate _isStable: Observable<boolean>;\nprivate _stable = true;\n/**\n * @param {?} _zone\n * @param {?} _console\n * @param {?} _injector\n * @param {?} _exceptionHandler\n * @param {?} _componentFactoryResolver\n * @param {?} _initStatus\n */\nconstructor(\nprivate _zone: NgZone,\nprivate _console: Console,\nprivate _injector: Injector,\nprivate _exceptionHandler: ErrorHandler,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _initStatus: ApplicationInitStatus) {\n    super();\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n\n    const /** @type {?} */ isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const /** @type {?} */ isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      const /** @type {?} */ stableSub: Subscription = this._zone.onStable.subscribe(() => {\n        NgZone.assertNotInAngularZone();\n\n        // Check whether there are no pending macro/micro tasks in the next tick\n        // to allow for NgZone to update the state.\n        scheduleMicroTask(() => {\n          if (!this._stable && !this._zone.hasPendingMacrotasks &&\n              !this._zone.hasPendingMicrotasks) {\n            this._stable = true;\n            observer.next(true);\n          }\n        });\n      });\n\n      const /** @type {?} */ unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => { observer.next(false); });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    this._isStable = merge(isCurrentlyStable, share.call(isStable));\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nattachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as InternalViewRef)));\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\ndetachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as InternalViewRef)));\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n/**\n * @template C\n * @param {?} componentOrFactory\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\nbootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let /** @type {?} */ componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = /** @type {?} */((\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n    }\n    this._rootComponentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n        null :\n        this._injector.get(NgModuleRef);\n    const /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const /** @type {?} */ testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\n\nprivate _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this._rootComponents.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const /** @type {?} */ listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\n\nprivate _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    remove(this._rootComponents, componentRef);\n  }\n/**\n * @return {?}\n */\ntick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const /** @type {?} */ scope = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.checkNoChanges());\n      }\n    } catch ( /** @type {?} */e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n/**\n * @return {?}\n */\nget viewCount() { return this._views.length; }\n/**\n * @return {?}\n */\nget componentTypes(): Type<any>[] { return this._rootComponentTypes; }\n/**\n * @return {?}\n */\nget components(): ComponentRef<any>[] { return this._rootComponents; }\n/**\n * @return {?}\n */\nget isStable(): Observable<boolean> { return this._isStable; }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgZone, },\n{type: Console, },\n{type: Injector, },\n{type: ErrorHandler, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationInitStatus, },\n];\n}\n\nfunction ApplicationRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nApplicationRef_._tickScope;\n/** @type {?} */\nApplicationRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationRef_.ctorParameters;\n/** @type {?} */\nApplicationRef_.prototype._bootstrapListeners;\n/** @type {?} */\nApplicationRef_.prototype._rootComponents;\n/** @type {?} */\nApplicationRef_.prototype._rootComponentTypes;\n/** @type {?} */\nApplicationRef_.prototype._views;\n/** @type {?} */\nApplicationRef_.prototype._runningTick;\n/** @type {?} */\nApplicationRef_.prototype._enforceNoNewChanges;\n/** @type {?} */\nApplicationRef_.prototype._isStable;\n/** @type {?} */\nApplicationRef_.prototype._stable;\n/** @type {?} */\nApplicationRef_.prototype._zone;\n/** @type {?} */\nApplicationRef_.prototype._console;\n/** @type {?} */\nApplicationRef_.prototype._injector;\n/** @type {?} */\nApplicationRef_.prototype._exceptionHandler;\n/** @type {?} */\nApplicationRef_.prototype._componentFactoryResolver;\n/** @type {?} */\nApplicationRef_.prototype._initStatus;\n}\n\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove<T>(list: T[], el: T): void {\n  const /** @type {?} */ index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n"]}