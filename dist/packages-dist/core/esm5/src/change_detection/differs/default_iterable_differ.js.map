{"version":3,"sources":["../../../../../../../packages/core/src/change_detection/differs/default_iterable_differ.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAAe,SAAA,EAAU,MAAA,YAAA,CAAA;AAMlC,OALO,EAAA,kBAAE,EAAmB,eAAA,EAAgB,MAAA,0BAAA,CAAA;AAS5C;IACA;IAHgB,CAAA;IAIhB;;;OAGG;IACH,+CAPG,GAOH,UAPW,GAAkB,IAAqB,MAAA,CAAO,kBAAA,CAAmB,GAAC,CAAG,CAAC,CAAC,CAAA;IAUlF;;;;;;OAMG;IACH,6CAVG,GAUH,UAVW,cAAsD,EAAE,SAA8B;QAY7F,MAAM,CAVC,IAAI,qBAAA,CAAwB,SAAE,IAAS,CAAyB,cAAC,CAAA,CAAc,CAAC;IAWzF,CAAC;IACH,mCAVC;AAUD,CApBA,AAUC,IAAA;;AAYD,IAAM,gBAAgB,CAVhB,eAAA,GAAkB,UAAA,KAAQ,EAAQ,IAAM,IAAQ,OAAA,IAAA,EAAA,CAAA,CAAK;AAW3D;;GAEG;AACH;IAiBA;;OAEG;IACH,+BARG,SAAyC;QApBlC,YAAA,GAAkB,CAAA,CAAE;QACpB,gBAAA,GAAkC,IAAA,CAAK;QAEvC,mBAAA,GAAwC,IAAA,CAAK;QAE7C,qBAAA,GAA0C,IAAA,CAAK;QAC/C,oBAAA,GAAiD,IAAA,CAAK;QACtD,YAAA,GAAyC,IAAA,CAAK;QAC9C,YAAA,GAAyC,IAAA,CAAK;QAC9C,mBAAA,GAAgD,IAAA,CAAK;QACrD,mBAAA,GAAgD,IAAA,CAAK;QACrD,eAAA,GAA4C,IAAA,CAAK;QACjD,eAAA,GAA4C,IAAA,CAAK;QACjD,kBAAA,GAA+C,IAAA,CAAK;QACpD,kBAAA,GAA+C,IAAA,CAAK;QAEpD,yBAAA,GAAsD,IAAA,CAAK;QAC3D,yBAAA,GAAsD,IAAA,CAAK;QAGrB,IAAA,CAAK,UAAC,GAAY,SAAA,IAAa,eAAA,CAAgB;IAAC,CAAA;IAYhG,sBAVM,6CAAA;QAON;;WAEG;aACH,cAVqB,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;;;OAAA;IAc9C,sBAZM,yCAAA;QASN;;WAEG;aACH,cAZyB,MAAA,CAAO,IAAA,CAAK,OAAC,CAAO,CAAC,CAAA;;;OAAA;IAa9C;;;OAGG;IACH,2CAfG,GAeH,UAfc,EAA0C;QAgBpD,IAAI,gBAAgB,CAfhB,MAAkC,CAAI;QAgB1C,GAAG,CAAC,CAAC,MAfC,GAAQ,IAAA,CAAK,OAAC,EAAQ,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,KAAC,EAAM,CAAA;YAgBlE,EAAE,CAfC,MAAC,CAAM,CAAC;QAgBb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,gDAlBG,GAkBH,UACM,EACQ;QACV,IAAI,gBAAgB,CAlBhB,MAAA,GAAS,IAAA,CAAK,OAAC,CAAO;QAmB1B,IAAI,gBAAgB,CAlBhB,UAAA,GAAa,IAAA,CAAK,aAAC,CAAa;QAmBpC,IAAI,gBAAgB,CAlBhB,eAAA,GAAkB,CAAA,CAAE;QAmBxB,IAAI,gBAAgB,CAlBhB,WAAA,GAA6B,IAAA,CAAK;QAmBtC,OAAO,MAlBC,IAAS,UAAA,EAAY,CAAA;YAmB3B,iDAAiD;YACjD,2BAA2B;YAC3B,IAAM,gBAAgB,CAlBhB,MAAA,GAAkC,CAAA,UAAE;gBAmBlC,MAAM,IAlBC,CAAA,CAmBH,MAAM,CAlBC,YAAC,CAAA,CAAA;oBAmBJ,gBAAgB,CAlBC,UAAC,EAAW,eAAA,EAAiB,WAAA,CAAY,GAAC,CAAA,CAmBvE,MAAM,CAAC,CAAC;gBACR,UAAU,CAlBC;YAmBf,IAAM,gBAAgB,CAlBhB,gBAAA,GAAmB,gBAAA,CAAiB,MAAC,EAAO,eAAA,EAAiB,WAAA,CAAY,CAAC;YAmBhF,IAAM,gBAAgB,CAlBhB,YAAA,GAAe,MAAA,CAAO,YAAC,CAAY;YAoBzC,wFAAwF;YACxF,EAAE,CAAC,CAAC,MAlBC,KAAU,UAAA,CAAW,CAAC,CAAA;gBAmBzB,eAAe,EAlBC,CAAE;gBAmBlB,UAAU,GAlBG,UAAA,CAAW,YAAC,CAAY;YAmBvC,CAAC;YAlBC,IAAA,CAAK,CAAA;gBAmBL,MAAM,GAlBC,CAAA,CAAE,MAAA,CAAA,CAAA,CAAS,KAAC,CAAK;gBAmBxB,EAAE,CAAC,CAAC,MAlBC,CAAM,aAAC,IAAgB,IAAA,CAAK,CAAC,CAAA;oBAmBhC,eAAe,EAlBC,CAAE;gBAmBpB,CAAC;gBAlBC,IAAA,CAAK,CAAA;oBAmBL,2CAA2C;oBAC3C,EAAE,CAAC,CAAC,CAlBC,WAAC,CAAW;wBAAC,WAAA,GAAc,EAAA,CAAG;oBAmBnC,IAAM,gBAAgB,CAlBhB,sBAAA,GAAyB,gBAAA,GAAmB,eAAA,CAAgB;oBAmBlE,IAAM,gBAAgB,CAlBhB,iBAAA,GAAkB,CAAA,CAAE,YAAA,CAAA,CAAA,GAAiB,eAAA,CAAgB;oBAmB3D,EAAE,CAAC,CAAC,sBAlBC,IAAyB,iBAAA,CAAkB,CAAC,CAAA;wBAmB/C,GAAG,CAAC,CAAC,IAlBC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,sBAAA,EAAwB,CAAA,EAAE,EAAG,CAAA;4BAmB/C,IAAM,gBAAgB,CAlBhB,MAAA,GAAS,CAAA,GAAI,WAAA,CAAY,MAAC,GAAQ,WAAA,CAAY,CAAC,CAAC,GAAG,CAAA,WAAE,CAAW,CAAC,CAAC,GAAG,CAAA,CAAE,CAAC;4BAmB9E,IAAM,gBAAgB,CAlBhB,KAAA,GAAQ,MAAA,GAAS,CAAA,CAAE;4BAmBzB,EAAE,CAAC,CAAC,iBAlBC,IAAoB,KAAA,IAAS,KAAA,GAAQ,sBAAA,CAAuB,CAAC,CAAA;gCAmBhE,WAAW,CAlBC,CAAC,CAAC,GAAG,MAAA,GAAS,CAAA,CAAE;4BAmB9B,CAAC;wBACH,CAAC;wBACD,IAAM,gBAAgB,CAlBhB,aAAA,GAAgB,MAAA,CAAO,aAAC,CAAa;wBAmB3C,WAAW,CAlBC,aAAC,CAAa,GAAG,iBAAA,GAAoB,sBAAA,CAAuB;oBAmB1E,CAAC;gBACH,CAAC;YACH,CAAC;YAED,EAAE,CAAC,CAAC,gBAlBC,KAAoB,YAAA,CAAa,CAAC,CAAA;gBAmBrC,EAAE,CAlBC,MAAC,EAAO,gBAAA,EAAkB,YAAA,CAAa,CAAC;YAmB7C,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,mDArBG,GAqBH,UArBsB,EAA0C;QAsB5D,IAAI,gBAAgB,CArBhB,MAAkC,CAAI;QAsB1C,GAAG,CAAC,CAAC,MArBC,GAAQ,IAAA,CAAK,eAAC,EAAgB,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,aAAC,EAAc,CAAA;YAsBlF,EAAE,CArBC,MAAC,CAAM,CAAC;QAsBb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,gDAxBG,GAwBH,UAxBmB,EAA0C;QAyBzD,IAAI,gBAAgB,CAxBhB,MAAkC,CAAI;QAyB1C,GAAG,CAAC,CAAC,MAxBC,GAAQ,IAAA,CAAK,cAAC,EAAe,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,UAAC,EAAW,CAAA;YAyB9E,EAAE,CAxBC,MAAC,CAAM,CAAC;QAyBb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,gDA3BG,GA2BH,UA3BmB,EAA0C;QA4BzD,IAAI,gBAAgB,CA3BhB,MAAkC,CAAI;QA4B1C,GAAG,CAAC,CAAC,MA3BC,GAAQ,IAAA,CAAK,UAAC,EAAW,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,UAAC,EAAW,CAAA;YA4B1E,EAAE,CA3BC,MAAC,CAAM,CAAC;QA4Bb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,kDA9BG,GA8BH,UA9BqB,EAA0C;QA+B3D,IAAI,gBAAgB,CA9BhB,MAAkC,CAAI;QA+B1C,GAAG,CAAC,CAAC,MA9BC,GAAQ,IAAA,CAAK,aAAC,EAAc,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,YAAC,EAAa,CAAA;YA+B/E,EAAE,CA9BC,MAAC,CAAM,CAAC;QA+Bb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,qDAjCG,GAiCH,UAjCwB,EAA0C;QAkC9D,IAAI,gBAAgB,CAjChB,MAAkC,CAAI;QAkC1C,GAAG,CAAC,CAAC,MAjCC,GAAQ,IAAA,CAAK,oBAAC,EAAqB,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,mBAAC,EAAoB,CAAA;YAkC7F,EAAE,CAjCC,MAAC,CAAM,CAAC;QAkCb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,oCApCG,GAoCH,UApCO,UAAyB;QAqC5B,EAAE,CAAC,CAAC,UApCC,IAAa,IAAA,CAAK;YAAC,UAAA,GAAa,EAAA,CAAG;QAqCxC,EAAE,CAAC,CAAC,CApCC,kBAAC,CAAkB,UAAC,CAAU,CAAC,CAAC,CAAA;YAqCnC,MApCM,IAAI,KAAA,CAqCN,2BAAyB,SApCC,CAAS,UAAC,CAAU,6CAAC,CAA0C,CAAC;QAqChG,CAAC;QAED,EAAE,CAAC,CAAC,IApCC,CAAI,KAAC,CAAK,UAAC,CAAU,CAAC,CAAC,CAAA;YAqC1B,MAAM,CApCC,IAAA,CAAK;QAqCd,CAAC;QApCC,IAAA,CAAK,CAAA;YAqCL,MAAM,CApCC,IAAA,CAAK;QAqCd,CAAC;IACH,CAAC;IACH;;OAEG;IACH,yCAtCG,GAsCH,cAtCc,CAAA;IAuCd;;;OAGG;IACH,qCAzCG,GAyCH,UAzCQ,UAAyB;QAyCjC,iBAkDG;QAjDC,IAAI,CAzCC,MAAC,EAAM,CAAE;QA2Cd,IAAI,gBAAgB,CAzChB,MAAA,GAAwC,IAAA,CAAK,OAAC,CAAO;QA0CzD,IAAI,gBAAgB,CAzChB,UAAA,GAAsB,KAAA,CAAM;QA0ChC,IAAI,gBAAgB,CAzChB,KAAO,CAAO;QA0ClB,IAAI,gBAAgB,CAzChB,IAAM,CAAE;QA0CZ,IAAI,gBAAgB,CAzChB,WAAa,CAAI;QA0CrB,EAAE,CAAC,CAAC,KAzCC,CAAK,OAAC,CAAO,UAAC,CAAU,CAAC,CAAC,CAAA;YA0C7B,IAAI,CAzCC,OAAC,GAAS,UAAA,CAAW,MAAC,CAAM;YA2CjC,GAAG,CAAC,CAAC,IAzCC,gBAAA,CAAG,OAAA,GAAQ,CAAA,EAAG,OAAA,GAAQ,IAAA,CAAK,OAAC,EAAQ,OAAA,EAAM,EAAG,CAAA;gBA0CjD,IAAI,GAzCG,UAAA,CAAW,OAAC,CAAK,CAAC;gBA0CzB,WAAW,GAzCG,IAAA,CAAK,UAAC,CAAU,OAAC,EAAM,IAAA,CAAK,CAAC;gBA0C3C,EAAE,CAAC,CAAC,MAzCC,KAAU,IAAA,IAAQ,CAAA,cAAE,CAAc,MAAC,CAAM,SAAC,EAAU,WAAA,CAAY,CAAC,CAAC,CAAA;oBA0CrE,MAAM,GAzCG,IAAA,CAAK,SAAC,CAAS,MAAC,EAAO,IAAA,EAAM,WAAA,EAAa,OAAA,CAAM,CAAC;oBA0C1D,UAAU,GAzCG,IAAA,CAAK;gBA0CpB,CAAC;gBAzCC,IAAA,CAAK,CAAA;oBA0CL,EAAE,CAAC,CAAC,UAzCC,CAAU,CAAC,CAAA;wBA0Cd,qDAAqD;wBACrD,MAAM,GAzCG,IAAA,CAAK,kBAAC,CAAkB,MAAC,EAAO,IAAA,EAAM,WAAA,EAAa,OAAA,CAAM,CAAC;oBA0CrE,CAAC;oBACD,EAAE,CAAC,CAAC,CAzCC,cAAC,CAAc,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,CAAC;wBAAC,IAAA,CAAK,kBAAC,CAAkB,MAAC,EAAO,IAAA,CAAK,CAAC;gBA0ChF,CAAC;gBAED,MAAM,GAzCG,MAAA,CAAO,KAAC,CAAK;YA0CxB,CAAC;QACH,CAAC;QAzCC,IAAA,CAAK,CAAA;YA0CL,KAAK,GAzCG,CAAA,CAAE;YA0CV,eAAe,CAzCC,UAAC,EAAW,UAAA,IAAO;gBA0CjC,WAAW,GAzCG,KAAA,CAAK,UAAC,CAAU,KAAC,EAAM,IAAA,CAAK,CAAC;gBA0C3C,EAAE,CAAC,CAAC,MAzCC,KAAU,IAAA,IAAQ,CAAA,cAAE,CAAc,MAAC,CAAM,SAAC,EAAU,WAAA,CAAY,CAAC,CAAC,CAAA;oBA0CrE,MAAM,GAzCG,KAAA,CAAK,SAAC,CAAS,MAAC,EAAO,IAAA,EAAM,WAAA,EAAa,KAAA,CAAM,CAAC;oBA0C1D,UAAU,GAzCG,IAAA,CAAK;gBA0CpB,CAAC;gBAzCC,IAAA,CAAK,CAAA;oBA0CL,EAAE,CAAC,CAAC,UAzCC,CAAU,CAAC,CAAA;wBA0Cd,qDAAqD;wBACrD,MAAM,GAzCG,KAAA,CAAK,kBAAC,CAAkB,MAAC,EAAO,IAAA,EAAM,WAAA,EAAa,KAAA,CAAM,CAAC;oBA0CrE,CAAC;oBACD,EAAE,CAAC,CAAC,CAzCC,cAAC,CAAc,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,CAAC;wBAAC,KAAA,CAAK,kBAAC,CAAkB,MAAC,EAAO,IAAA,CAAK,CAAC;gBA0ChF,CAAC;gBACD,MAAM,GAzCG,MAAA,CAAO,KAAC,CAAK;gBA0CtB,KAAK,EAzCC,CAAE;YA0CV,CAAC,CAzCC,CAAC;YA0CH,IAAI,CAzCC,OAAC,GAAS,KAAA,CAAM;QA0CvB,CAAC;QAED,IAAI,CAzCC,SAAC,CAAS,MAAC,CAAM,CAAC;QA0CvB,IAAI,CAzCC,WAAC,GAAa,UAAA,CAAW;QA0C9B,MAAM,CAzCC,IAAA,CAAK,OAAC,CAAO;IA0CtB,CAAC;IAIH,sBAxCM,0CAAA;QAqCN;;WAEG;aACH;YACI,MAAM,CAxCC,IAAA,CAAK,cAAC,KAAkB,IAAA,IAAQ,IAAA,CAAK,UAAC,KAAc,IAAA;gBAyCvD,IAAI,CAxCC,aAAC,KAAiB,IAAA,IAAQ,IAAA,CAAK,oBAAC,KAAwB,IAAA,CAAK;QAyCxE,CAAC;;;OAAA;IACH;;;;;;;;OAQG;IACH,sCAxCG,GAwCH;QACI,EAAE,CAAC,CAAC,IAxCC,CAAI,OAAC,CAAO,CAAC,CAAA;YAyChB,IAAI,gBAAgB,CAxChB,MAAA,SAAkC,CAAI;YAyC1C,IAAI,gBAAgB,CAxChB,UAAA,SAAsC,CAAI;YA0C9C,GAAG,CAAC,CAAC,MAxCC,GAAQ,IAAA,CAAK,eAAC,GAAiB,IAAA,CAAK,OAAC,EAAQ,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,KAAC,EAAM,CAAA;gBAyCzF,MAAM,CAxCC,aAAC,GAAe,MAAA,CAAO,KAAC,CAAK;YAyCtC,CAAC;YAED,GAAG,CAAC,CAAC,MAxCC,GAAQ,IAAA,CAAK,cAAC,EAAe,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,UAAC,EAAW,CAAA;gBAyC9E,MAAM,CAxCC,aAAC,GAAe,MAAA,CAAO,YAAC,CAAY;YAyC7C,CAAC;YACD,IAAI,CAxCC,cAAC,GAAgB,IAAA,CAAK,cAAC,GAAgB,IAAA,CAAK;YA0CjD,GAAG,CAAC,CAAC,MAxCC,GAAQ,IAAA,CAAK,UAAC,EAAW,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,UAAA,EAAY,CAAA;gBAyCnE,MAAM,CAxCC,aAAC,GAAe,MAAA,CAAO,YAAC,CAAY;gBAyC3C,UAAU,GAxCG,MAAA,CAAO,UAAC,CAAU;YAyCjC,CAAC;YACD,IAAI,CAxCC,UAAC,GAAY,IAAA,CAAK,UAAC,GAAY,IAAA,CAAK;YAyCzC,IAAI,CAxCC,aAAC,GAAe,IAAA,CAAK,aAAC,GAAe,IAAA,CAAK;YAyC/C,IAAI,CAxCC,oBAAC,GAAsB,IAAA,CAAK,oBAAC,GAAsB,IAAA,CAAK;YA0C7D,wCAAwC;YACxC,yBAAyB;QAC3B,CAAC;IACH,CAAC;IACH;;;;;;;;;;;;;;OAcG;IACH,yCA5CG,GA4CH,UA5CY,MAAkC,EAAK,IAAM,EAAG,WAAa,EAAK,KAAO;QA8CjF,kEAAkE;QAClE,IAAI,gBAAgB,CA5ChB,cAA0C,CAAI;QA8ClD,EAAE,CAAC,CAAC,MA5CC,KAAU,IAAA,CAAK,CAAC,CAAA;YA6CnB,cAAc,GA5CG,IAAA,CAAK,OAAC,CAAO;QA6ChC,CAAC;QA5CC,IAAA,CAAK,CAAA;YA6CL,cAAc,GA5CG,MAAA,CAAO,KAAC,CAAK;YA6C9B,kFAAkF;YAClF,IAAI,CA5CC,OAAC,CAAO,MAAC,CAAM,CAAC;QA6CvB,CAAC;QAED,kDAAkD;QAClD,MAAM,GA5CG,IAAA,CAAK,cAAC,KAAkB,IAAA,GAAO,IAAA,GAAO,IAAA,CAAK,cAAC,CAAc,GAAC,CAAG,WAAC,EAAY,KAAA,CAAM,CAAC;QA6C3F,EAAE,CAAC,CAAC,MA5CC,KAAU,IAAA,CAAK,CAAC,CAAA;YA6CnB,0EAA0E;YAC1E,wFAAwF;YACxF,EAAE,CAAC,CAAC,CA5CC,cAAC,CAAc,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,CAAC;gBAAC,IAAA,CAAK,kBAAC,CAAkB,MAAC,EAAO,IAAA,CAAK,CAAC;YA8C9E,IAAI,CA5CC,UAAC,CAAU,MAAC,EAAO,cAAA,EAAgB,KAAA,CAAM,CAAC;QA6CjD,CAAC;QA5CC,IAAA,CAAK,CAAA;YA6CL,qCAAqC;YACrC,MAAM,GA5CG,IAAA,CAAK,gBAAC,KAAoB,IAAA,GAAO,IAAA,GAAO,IAAA,CAAK,gBAAC,CAAgB,GAAC,CAAG,WAAC,EAAY,IAAA,CAAK,CAAC;YA6C9F,EAAE,CAAC,CAAC,MA5CC,KAAU,IAAA,CAAK,CAAC,CAAA;gBA6CnB,+EAA+E;gBAC/E,wFAAwF;gBACxF,EAAE,CAAC,CAAC,CA5CC,cAAC,CAAc,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,CAAC;oBAAC,IAAA,CAAK,kBAAC,CAAkB,MAAC,EAAO,IAAA,CAAK,CAAC;gBA8C9E,IAAI,CA5CC,cAAC,CAAc,MAAC,EAAO,cAAA,EAAgB,KAAA,CAAM,CAAC;YA6CrD,CAAC;YA5CC,IAAA,CAAK,CAAA;gBA6CL,4BAA4B;gBAC5B,MAAM;oBACF,IAAI,CA5CC,SAAC,CAAS,IAAI,qBAAA,CAAwB,IAAE,EAAK,WAAA,CAAY,EAAE,cAAA,EAAgB,KAAA,CAAM,CAAC;YA6C7F,CAAC;QACH,CAAC;QACD,MAAM,CA5CC,MAAA,CAAO;IA6ChB,CAAC;IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BG;IACH,kDAhDG,GAgDH,UAhDqB,MAAgC,EAAE,IAAM,EAAG,WAAa,EAAK,KAAO;QAkDrF,IAAI,gBAAgB,CAhDhB,cAAA,GAiDA,IAAI,CAhDC,gBAAC,KAAoB,IAAA,GAAO,IAAA,GAAO,IAAA,CAAK,gBAAC,CAAgB,GAAC,CAAG,WAAC,EAAY,IAAA,CAAK,CAAC;QAiDzF,EAAE,CAAC,CAAC,cAhDC,KAAkB,IAAA,CAAK,CAAC,CAAA;YAiD3B,MAAM,GAhDG,IAAA,CAAK,cAAC,CAAc,cAAC,EAAc,gBAAA,CAAA,CAAA,CAAC,MAAA,CAAO,KAAC,CAAA,CAAA,EAAQ,KAAA,CAAM,CAAC;QAiDtE,CAAC;QAhDC,IAAA,CAAK,EAAA,CAAA,CAAA,MAAK,CAAM,YAAC,IAAe,KAAA,CAAM,CAAC,CAAA;YAiDvC,MAAM,CAhDC,YAAC,GAAc,KAAA,CAAM;YAiD5B,IAAI,CAhDC,WAAC,CAAW,MAAC,EAAO,KAAA,CAAM,CAAC;QAiDlC,CAAC;QACD,MAAM,CAhDC,MAAA,CAAO;IAiDhB,CAAC;IACH;;;;;;;;OAQG;IACH,yCAjDG,GAiDH,UAjDY,MAAkC;QAkD1C,2CAA2C;QAC3C,OAAO,MAjDC,KAAU,IAAA,EAAM,CAAA;YAkDtB,IAAM,gBAAgB,CAjDhB,UAAA,GAA4C,MAAA,CAAO,KAAC,CAAK;YAkD/D,IAAI,CAjDC,cAAC,CAAc,IAAC,CAAI,OAAC,CAAO,MAAC,CAAM,CAAC,CAAC;YAkD1C,MAAM,GAjDG,UAAA,CAAW;QAkDtB,CAAC;QACD,EAAE,CAAC,CAAC,IAjDC,CAAI,gBAAC,KAAoB,IAAA,CAAK,CAAC,CAAA;YAkDlC,IAAI,CAjDC,gBAAC,CAAgB,KAAC,EAAK,CAAE;QAkDhC,CAAC;QAED,EAAE,CAAC,CAAC,IAjDC,CAAI,cAAC,KAAkB,IAAA,CAAK,CAAC,CAAA;YAkDhC,IAAI,CAjDC,cAAC,CAAc,UAAC,GAAY,IAAA,CAAK;QAkDxC,CAAC;QACD,EAAE,CAAC,CAAC,IAjDC,CAAI,UAAC,KAAc,IAAA,CAAK,CAAC,CAAA;YAkD5B,IAAI,CAjDC,UAAC,CAAU,UAAC,GAAY,IAAA,CAAK;QAkDpC,CAAC;QACD,EAAE,CAAC,CAAC,IAjDC,CAAI,OAAC,KAAW,IAAA,CAAK,CAAC,CAAA;YAkDzB,IAAI,CAjDC,OAAC,CAAO,KAAC,GAAO,IAAA,CAAK;QAkD5B,CAAC;QACD,EAAE,CAAC,CAAC,IAjDC,CAAI,aAAC,KAAiB,IAAA,CAAK,CAAC,CAAA;YAkD/B,IAAI,CAjDC,aAAC,CAAa,YAAC,GAAc,IAAA,CAAK;QAkDzC,CAAC;QACD,EAAE,CAAC,CAAC,IAjDC,CAAI,oBAAC,KAAwB,IAAA,CAAK,CAAC,CAAA;YAkDtC,IAAI,CAjDC,oBAAC,CAAoB,mBAAC,GAAqB,IAAA,CAAK;QAkDvD,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IACH,8CAtDG,GAsDH,UACM,MAtDgC,EAAE,UAAsC,EAuDxE,KAtDO;QAuDT,EAAE,CAAC,CAAC,IAtDC,CAAI,gBAAC,KAAoB,IAAA,CAAK,CAAC,CAAA;YAuDlC,IAAI,CAtDC,gBAAC,CAAgB,MAAC,CAAM,MAAC,CAAM,CAAC;QAuDvC,CAAC;QACD,IAAM,gBAAgB,CAtDhB,IAAA,GAAO,MAAA,CAAO,YAAC,CAAY;QAuDjC,IAAM,gBAAgB,CAtDhB,IAAA,GAAO,MAAA,CAAO,YAAC,CAAY;QAwDjC,EAAE,CAAC,CAAC,IAtDC,KAAQ,IAAA,CAAK,CAAC,CAAA;YAuDjB,IAAI,CAtDC,aAAC,GAAe,IAAA,CAAK;QAuD5B,CAAC;QAtDC,IAAA,CAAK,CAAA;YAuDL,IAAI,CAtDC,YAAC,GAAc,IAAA,CAAK;QAuD3B,CAAC;QACD,EAAE,CAAC,CAAC,IAtDC,KAAQ,IAAA,CAAK,CAAC,CAAA;YAuDjB,IAAI,CAtDC,aAAC,GAAe,IAAA,CAAK;QAuD5B,CAAC;QAtDC,IAAA,CAAK,CAAA;YAuDL,IAAI,CAtDC,YAAC,GAAc,IAAA,CAAK;QAuD3B,CAAC;QAED,IAAI,CAtDC,YAAC,CAAY,MAAC,EAAO,UAAA,EAAY,KAAA,CAAM,CAAC;QAuD7C,IAAI,CAtDC,WAAC,CAAW,MAAC,EAAO,KAAA,CAAM,CAAC;QAuDhC,MAAM,CAtDC,MAAA,CAAO;IAuDhB,CAAC;IACH;;;;;;OAMG;IACH,0CA3DG,GA2DH,UACM,MA3DgC,EAAE,UAAsC,EA4DxE,KA3DO;QA4DT,IAAI,CA3DC,OAAC,CAAO,MAAC,CAAM,CAAC;QA4DrB,IAAI,CA3DC,YAAC,CAAY,MAAC,EAAO,UAAA,EAAY,KAAA,CAAM,CAAC;QA4D7C,IAAI,CA3DC,WAAC,CAAW,MAAC,EAAO,KAAA,CAAM,CAAC;QA4DhC,MAAM,CA3DC,MAAA,CAAO;IA4DhB,CAAC;IACH;;;;;;OAMG;IACH,yCAhEG,GAgEH,UACM,MAhEgC,EAAE,UAAsC,EAiExE,KAhEO;QAiET,IAAI,CAhEC,YAAC,CAAY,MAAC,EAAO,UAAA,EAAY,KAAA,CAAM,CAAC;QAkE7C,EAAE,CAAC,CAAC,IAhEC,CAAI,cAAC,KAAkB,IAAA,CAAK,CAAC,CAAA;YAiEhC,aAAa;YACb,wCAAwC;YACxC,IAAI,CAhEC,cAAC,GAAgB,IAAA,CAAK,cAAC,GAAgB,MAAA,CAAO;QAiErD,CAAC;QAhEC,IAAA,CAAK,CAAA;YAiEL,aAAa;YACb,8CAA8C;YAC9C,sCAAsC;YACtC,IAAI,CAhEC,cAAC,GAAgB,IAAA,CAAK,cAAC,CAAc,UAAC,GAAY,MAAA,CAAO;QAiEhE,CAAC;QACD,MAAM,CAhEC,MAAA,CAAO;IAiEhB,CAAC;IACH;;;;;;OAMG;IACH,4CArEG,GAqEH,UACM,MArEgC,EAAE,UAAsC,EAsExE,KArEO;QAsET,aAAa;QACb,gCAAgC;QAChC,iCAAiC;QACjC,iCAAiC;QAEjC,IAAM,gBAAgB,CArEhB,IAAA,GAsEF,UAAU,KArEK,IAAA,GAAO,IAAA,CAAK,OAAC,GAAS,UAAA,CAAW,KAAC,CAAK;QAsE1D,aAAa;QACb,0BAA0B;QAC1B,gCAAgC;QAChC,MAAM,CArEC,KAAC,GAAO,IAAA,CAAK;QAsEpB,MAAM,CArEC,KAAC,GAAO,UAAA,CAAW;QAsE1B,EAAE,CAAC,CAAC,IArEC,KAAQ,IAAA,CAAK,CAAC,CAAA;YAsEjB,IAAI,CArEC,OAAC,GAAS,MAAA,CAAO;QAsExB,CAAC;QArEC,IAAA,CAAK,CAAA;YAsEL,IAAI,CArEC,KAAC,GAAO,MAAA,CAAO;QAsEtB,CAAC;QACD,EAAE,CAAC,CAAC,UArEC,KAAc,IAAA,CAAK,CAAC,CAAA;YAsEvB,IAAI,CArEC,OAAC,GAAS,MAAA,CAAO;QAsExB,CAAC;QArEC,IAAA,CAAK,CAAA;YAsEL,UAAU,CArEC,KAAC,GAAO,MAAA,CAAO;QAsE5B,CAAC;QAED,EAAE,CAAC,CAAC,IArEC,CAAI,cAAC,KAAkB,IAAA,CAAK,CAAC,CAAA;YAsEhC,IAAI,CArEC,cAAC,GAAgB,IAAI,aAAA,EAAgB,CAAG;QAsE/C,CAAC;QACD,IAAI,CArEC,cAAC,CAAc,GAAC,CAAG,MAAC,CAAM,CAAC;QAuEhC,MAAM,CArEC,YAAC,GAAc,KAAA,CAAM;QAsE5B,MAAM,CArEC,MAAA,CAAO;IAsEhB,CAAC;IACH;;;;OAIG;IACH,uCAxEG,GAwEH,UAxEU,MAAgC;QAyEtC,MAAM,CAxEC,IAAA,CAAK,cAAC,CAAc,IAAC,CAAI,OAAC,CAAO,MAAC,CAAM,CAAC,CAAC;IAyEnD,CAAC;IACH;;;;OAIG;IACH,uCA3EG,GA2EH,UA3EU,MAAgC;QA4EtC,EAAE,CAAC,CAAC,IA3EC,CAAI,cAAC,KAAkB,IAAA,CAAK,CAAC,CAAA;YA4EhC,IAAI,CA3EC,cAAC,CAAc,MAAC,CAAM,MAAC,CAAM,CAAC;QA4ErC,CAAC;QAED,IAAM,gBAAgB,CA3EhB,IAAA,GAAO,MAAA,CAAO,KAAC,CAAK;QA4E1B,IAAM,gBAAgB,CA3EhB,IAAA,GAAO,MAAA,CAAO,KAAC,CAAK;QA6E1B,aAAa;QACb,0CAA0C;QAC1C,0CAA0C;QAE1C,EAAE,CAAC,CAAC,IA3EC,KAAQ,IAAA,CAAK,CAAC,CAAA;YA4EjB,IAAI,CA3EC,OAAC,GAAS,IAAA,CAAK;QA4EtB,CAAC;QA3EC,IAAA,CAAK,CAAA;YA4EL,IAAI,CA3EC,KAAC,GAAO,IAAA,CAAK;QA4EpB,CAAC;QACD,EAAE,CAAC,CAAC,IA3EC,KAAQ,IAAA,CAAK,CAAC,CAAA;YA4EjB,IAAI,CA3EC,OAAC,GAAS,IAAA,CAAK;QA4EtB,CAAC;QA3EC,IAAA,CAAK,CAAA;YA4EL,IAAI,CA3EC,KAAC,GAAO,IAAA,CAAK;QA4EpB,CAAC;QAED,MAAM,CA3EC,MAAA,CAAO;IA4EhB,CAAC;IACH;;;;;OAKG;IACH,2CA/EG,GA+EH,UA/Ec,MAAgC,EAAE,OAAS;QAgFrD,aAAa;QACb,sCAAsC;QAEtC,EAAE,CAAC,CAAC,MA/EC,CAAM,aAAC,KAAiB,OAAA,CAAQ,CAAC,CAAA;YAgFpC,MAAM,CA/EC,MAAA,CAAO;QAgFhB,CAAC;QAED,EAAE,CAAC,CAAC,IA/EC,CAAI,UAAC,KAAc,IAAA,CAAK,CAAC,CAAA;YAgF5B,aAAa;YACb,+BAA+B;YAC/B,IAAI,CA/EC,UAAC,GAAY,IAAA,CAAK,UAAC,GAAY,MAAA,CAAO;QAgF7C,CAAC;QA/EC,IAAA,CAAK,CAAA;YAgFL,aAAa;YACb,0CAA0C;YAC1C,IAAI,CA/EC,UAAC,GAAY,IAAA,CAAK,UAAC,CAAU,UAAC,GAAY,MAAA,CAAO;QAgFxD,CAAC;QAED,MAAM,CA/EC,MAAA,CAAO;IAgFhB,CAAC;IACH;;;OAGG;IAjFO,8CAAA,GAmFV,UAnFyB,MAAgC;QAoFrD,EAAE,CAAC,CAAC,IAnFC,CAAI,gBAAC,KAAoB,IAAA,CAAK,CAAC,CAAA;YAoFlC,IAAI,CAnFC,gBAAC,GAAkB,IAAI,aAAA,EAAgB,CAAG;QAoFjD,CAAC;QACD,IAAI,CAnFC,gBAAC,CAAgB,GAAC,CAAG,MAAC,CAAM,CAAC;QAoFlC,MAAM,CAnFC,YAAC,GAAc,IAAA,CAAK;QAoF3B,MAAM,CAnFC,YAAC,GAAc,IAAA,CAAK;QAqF3B,EAAE,CAAC,CAAC,IAnFC,CAAI,aAAC,KAAiB,IAAA,CAAK,CAAC,CAAA;YAoF/B,aAAa;YACb,kCAAkC;YAClC,IAAI,CAnFC,aAAC,GAAe,IAAA,CAAK,aAAC,GAAe,MAAA,CAAO;YAoFjD,MAAM,CAnFC,YAAC,GAAc,IAAA,CAAK;QAoF7B,CAAC;QAnFC,IAAA,CAAK,CAAA;YAoFL,aAAa;YACb,+CAA+C;YAC/C,wCAAwC;YACxC,MAAM,CAnFC,YAAC,GAAc,IAAA,CAAK,aAAC,CAAa;YAoFzC,IAAI,CAnFC,aAAC,GAAe,IAAA,CAAK,aAAC,CAAa,YAAC,GAAc,MAAA,CAAO;QAoFhE,CAAC;QACD,MAAM,CAnFC,MAAA,CAAO;IAoFhB,CAAC;IACH;;;;;OAKG;IACH,kDAvFG,GAuFH,UAvFqB,MAAgC,EAAE,IAAM;QAwFzD,MAAM,CAvFC,IAAC,GAAM,IAAA,CAAK;QAwFnB,EAAE,CAAC,CAAC,IAvFC,CAAI,oBAAC,KAAwB,IAAA,CAAK,CAAC,CAAA;YAwFtC,IAAI,CAvFC,oBAAC,GAAsB,IAAA,CAAK,oBAAC,GAAsB,MAAA,CAAO;QAwFjE,CAAC;QAvFC,IAAA,CAAK,CAAA;YAwFL,IAAI,CAvFC,oBAAC,GAAsB,IAAA,CAAK,oBAAC,CAAoB,mBAAC,GAAqB,MAAA,CAAO;QAwFrF,CAAC;QACD,MAAM,CAvFC,MAAA,CAAO;IAwFhB,CAAC;IACH;;OAEG;IACH,wCAxFG,GAwFH;QACI,IAAM,gBAAgB,CAxFhB,IAAA,GAAmC,EAAA,CAAG;QAyF5C,IAAI,CAxFC,WAAC,CAAW,UAAC,MAAgC,IAAK,OAAA,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,EAAjB,CAAiB,CAAC,CAAC;QA0F1E,IAAM,gBAAgB,CAxFhB,QAAA,GAAuC,EAAA,CAAG;QAyFhD,IAAI,CAxFC,mBAAC,CAAmB,UAAC,MAAgC,IAAK,OAAA,QAAA,CAAS,IAAC,CAAI,MAAC,CAAM,EAArB,CAAqB,CAAC,CAAC;QA0FtF,IAAM,gBAAgB,CAxFhB,SAAA,GAAwC,EAAA,CAAG;QAyFjD,IAAI,CAxFC,gBAAC,CAAgB,UAAC,MAAgC,IAAK,OAAA,SAAA,CAAU,IAAC,CAAI,MAAC,CAAM,EAAtB,CAAsB,CAAC,CAAC;QA0FpF,IAAM,gBAAgB,CAxFhB,KAAA,GAAoC,EAAA,CAAG;QAyF7C,IAAI,CAxFC,gBAAC,CAAgB,UAAC,MAAgC,IAAK,OAAA,KAAA,CAAM,IAAC,CAAI,MAAC,CAAM,EAAlB,CAAkB,CAAC,CAAC;QA0FhF,IAAM,gBAAgB,CAxFhB,QAAA,GAAuC,EAAA,CAAG;QAyFhD,IAAI,CAxFC,kBAAC,CAAkB,UAAC,MAAgC,IAAK,OAAA,QAAA,CAAS,IAAC,CAAI,MAAC,CAAM,EAArB,CAAqB,CAAC,CAAC;QA0FrF,IAAM,gBAAgB,CAxFhB,eAAA,GAA8C,EAAA,CAAG;QAyFvD,IAAI,CAxFC,qBAAC,CAAqB,UAAC,MAAgC,IAAK,OAAA,eAAA,CAAgB,IAAC,CAAI,MAAC,CAAM,EAA5B,CAA4B,CAAC,CAAC;QA0F/F,MAAM,CAxFC,cAAA,GAAiB,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA;YAyFtC,YAAY,GAxFG,QAAA,CAAS,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA;YAyFrC,aAAa,GAxFG,SAAA,CAAU,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA;YAyFvC,SAAS,GAxFG,KAAA,CAAM,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA;YAyF/B,YAAY,GAxFG,QAAA,CAAS,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA;YAyFrC,mBAAmB,GAxFG,eAAA,CAAgB,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA,CAAK;IAyF9D,CAAC;IACH,4BAxFC;AAwFD,CAjoBA,AAyiBC,IAAA;;AA0FD;IACA,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;IACxC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,WAAW,CAAC;IAC5C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC/C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACjD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;IAChD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;IACxC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;IACxC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC/C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC/C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACrD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACrD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH;IA2CA;;;OAGG;IACH,+BAhJqB,IAAM,EAAU,SAAW;QAA3B,SAAA,GAAA,IAAA,CAAM;QAAU,cAAA,GAAA,SAAA,CAAW;QAkG9C,iBAAY,GA3HgB,IAAA,CAAK;QA4HjC,kBAAa,GA3HgB,IAAA,CAAK;QA4HpC;;WAEG;QACH,kBA5HG,GAA8C,IAAA,CAAK;QA6HtD;;WAEG;QACH,UA9HG,GAAsC,IAAA,CAAK;QA+H9C;;WAEG;QACH,UAhIG,GAAsC,IAAA,CAAK;QAiI9C;;WAEG;QACH,aAlIG,GAAyC,IAAA,CAAK;QAmIjD;;WAEG;QACH,aApIG,GAAyC,IAAA,CAAK;QAqIjD;;WAEG;QACH,iBAtIG,GAA6C,IAAA,CAAK;QAuIrD;;WAEG;QACH,iBAxIG,GAA6C,IAAA,CAAK;QAyIrD;;WAEG;QACH,eA1IG,GAA2C,IAAA,CAAK;QA2InD;;WAEG;QACH,eA5IG,GAA2C,IAAA,CAAK;QA6InD;;WAEG;QACH,wBA9IG,GAAoD,IAAA,CAAK;IAGP,CAAA;IAkJrD;;OAEG;IACH,wCAnJG,GAmJH;QACI,MAAM,CAnJC,IAAA,CAAK,aAAC,KAAiB,IAAA,CAAK,YAAC,GAAc,SAAA,CAAU,IAAC,CAAI,IAAC,CAAI;YAoJpB,SAAS,CAnJC,IAAC,CAAI,IAAC,CAAI,GAAG,GAAA;gBAoJjE,SAAS,CAnJC,IAAC,CAAI,aAAC,CAAa,GAAG,IAAA,GAAO,SAAA,CAAU,IAAC,CAAI,YAAC,CAAY,GAAG,GAAA,CAAI;IAoJpF,CAAC;IACH,4BAnJC;AAmJD,CAzDA,AA1FC,IAAA;;AAqJD;IACA,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,YAAY,CAAC;IAC7C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC;IACtC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC;IACtC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACzC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACzC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,YAAY,CAAC;IAC7C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,YAAY,CAAC;IAC7C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACpD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC;IACrC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,SAAS,CAAC;AAC1C,CAAC;AAED;IAAA;QACA;;WAEG;QACH,UAjNG,GAAsC,IAAA,CAAK;QAkN9C;;WAEG;QACH,UAnNG,GAAsC,IAAA,CAAK;IAwR9C,CAvNC;IAmJD;;;;;;OAMG;IACH,sCApNG,GAoNH,UApNM,MAAgC;QAqNlC,EAAE,CAAC,CAAC,IApNC,CAAI,KAAC,KAAS,IAAA,CAAK,CAAC,CAAA;YAqNvB,IAAI,CApNC,KAAC,GAAO,IAAA,CAAK,KAAC,GAAO,MAAA,CAAO;YAqNjC,MAAM,CApNC,QAAC,GAAU,IAAA,CAAK;YAqNvB,MAAM,CApNC,QAAC,GAAU,IAAA,CAAK;QAqNzB,CAAC;QApNC,IAAA,CAAK,CAAA;YAAA,CAAA;YAqNL,aAAa;YACb,uCAAuC;YACvC,2FAA2F;YAC3F,IAAI,CApNC,KAAC,CAAA,CAAA,CAAO,QAAC,GAAU,MAAA,CAAO;YAqN/B,MAAM,CApNC,QAAC,GAAU,IAAA,CAAK,KAAC,CAAK;YAqN7B,MAAM,CApNC,QAAC,GAAU,IAAA,CAAK;YAqNvB,IAAI,CApNC,KAAC,GAAO,MAAA,CAAO;QAqNtB,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,sCAtNG,GAsNH,UAtNM,SAAW,EAAK,cAAwB;QAuN1C,IAAI,gBAAgB,CAtNhB,MAAkC,CAAI;QAuN1C,GAAG,CAAC,CAAC,MAtNC,GAAQ,IAAA,CAAK,KAAC,EAAM,MAAA,KAAW,IAAA,EAAM,MAAA,GAAS,MAAA,CAAO,QAAC,EAAS,CAAA;YAuNnE,EAAE,CAAC,CAAC,CAtNC,cAAC,KAAkB,IAAA,IAAQ,cAAA,IAAe,CAAA,CAAG,MAAA,CAAO,YAAC,CAAA,CAAA,CAAc;gBAuNpE,cAAc,CAtNC,MAAC,CAAM,SAAC,EAAU,SAAA,CAAU,CAAC,CAAC,CAAA;gBAuN/C,MAAM,CAtNC,MAAA,CAAO;YAuNhB,CAAC;QACH,CAAC;QACD,MAAM,CAtNC,IAAA,CAAK;IAuNd,CAAC;IACH;;;;;;OAMG;IACH,yCAvNG,GAuNH,UAvNS,MAAgC;QAwNrC,aAAa;QACb,cAAc;QACd,2DAA2D;QAC3D,0FAA0F;QAC1F,iDAAiD;QACjD,KAAK;QACL,iBAAiB;QACjB,KAAK;QAEL,IAAM,gBAAgB,CAvNhB,IAAA,GAAsC,MAAA,CAAO,QAAC,CAAQ;QAwN5D,IAAM,gBAAgB,CAvNhB,IAAA,GAAsC,MAAA,CAAO,QAAC,CAAQ;QAwN5D,EAAE,CAAC,CAAC,IAvNC,KAAQ,IAAA,CAAK,CAAC,CAAA;YAwNjB,IAAI,CAvNC,KAAC,GAAO,IAAA,CAAK;QAwNpB,CAAC;QAvNC,IAAA,CAAK,CAAA;YAwNL,IAAI,CAvNC,QAAC,GAAU,IAAA,CAAK;QAwNvB,CAAC;QACD,EAAE,CAAC,CAAC,IAvNC,KAAQ,IAAA,CAAK,CAAC,CAAA;YAwNjB,IAAI,CAvNC,KAAC,GAAO,IAAA,CAAK;QAwNpB,CAAC;QAvNC,IAAA,CAAK,CAAA;YAwNL,IAAI,CAvNC,QAAC,GAAU,IAAA,CAAK;QAwNvB,CAAC;QACD,MAAM,CAvNC,IAAA,CAAK,KAAC,KAAS,IAAA,CAAK;IAwN7B,CAAC;IACH,+BAvNC;AAuND,CA7EA,AA1IC,IAAA;AAyND;IACA;;;OAGG;IACH,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC;IACzC;;;OAGG;IACH,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC;AACzC,CAAC;AAED;IAAA;QACE,QAAG,GApOG,IAAI,GAAA,EAAqC,CAAG;IA8RpD,CAhPC;IAuLD;;;OAGG;IACH,2BAvOG,GAuOH,UAvOM,MAAgC;QAwOlC,IAAM,gBAAgB,CAvOhB,GAAA,GAAM,MAAA,CAAO,SAAC,CAAS;QAyO7B,IAAI,gBAAgB,CAvOhB,UAAA,GAAa,IAAA,CAAK,GAAC,CAAG,GAAC,CAAG,GAAC,CAAG,CAAC;QAwOnC,EAAE,CAAC,CAAC,CAvOC,UAAC,CAAU,CAAC,CAAA;YAwOf,UAAU,GAvOG,IAAI,wBAAA,EAA2B,CAAG;YAwO/C,IAAI,CAvOC,GAAC,CAAG,GAAC,CAAG,GAAC,EAAI,UAAA,CAAW,CAAC;QAwOhC,CAAC;QACD,UAAU,CAvOC,GAAC,CAAG,MAAC,CAAM,CAAC;IAwOzB,CAAC;IACH;;;;;;;;;OASG;IACH,2BAzOG,GAyOH,UAzOM,SAAW,EAAK,cAAwB;QA0O1C,IAAM,gBAAgB,CAzOhB,GAAA,GAAM,SAAA,CAAU;QA0OtB,IAAM,gBAAgB,CAzOhB,UAAA,GAAa,IAAA,CAAK,GAAC,CAAG,GAAC,CAAG,GAAC,CAAG,CAAC;QA0OrC,MAAM,CAzOC,UAAA,GAAa,UAAA,CAAW,GAAC,CAAG,SAAC,EAAU,cAAA,CAAe,GAAG,IAAA,CAAK;IA0OvE,CAAC;IACH;;;;;;OAMG;IACH,8BA1OG,GA0OH,UA1OS,MAAgC;QA2OrC,IAAM,gBAAgB,CA1OhB,GAAA,GAAM,MAAA,CAAO,SAAC,CAAS;QA2O7B,IAAM,gBAAgB,CA1OhB,UAAA,GAAwC,CAAA,CAAE,IAAA,CAAK,GAAC,CAAG,GAAC,CAAG,GAAC,CAAG,CAAA,CAAA,CAAG;QA2OpE,mDAAmD;QACnD,EAAE,CAAC,CAAC,UA1OC,CAAU,MAAC,CAAM,MAAC,CAAM,CAAC,CAAC,CAAA;YA2O7B,IAAI,CA1OC,GAAC,CAAG,MAAC,CAAM,GAAC,CAAG,CAAC;QA2OvB,CAAC;QACD,MAAM,CA1OC,MAAA,CAAO;IA2OhB,CAAC;IAIH,sBA5OM,kCAAA;QAyON;;WAEG;aACH,cA5O2B,MAAA,CAAO,IAAA,CAAK,GAAC,CAAG,IAAC,KAAQ,CAAA,CAAE,CAAC,CAAA;;;OAAA;IA6OvD;;OAEG;IACH,6BA9OG,GA8OH,cA9OY,IAAA,CAAK,GAAC,CAAG,KAAC,EAAK,CAAE,CAAC,CAAA;IA+O9B;;OAEG;IACH,gCAhPG,GAgPH,cAhPuB,MAAA,CAAO,gBAAA,GAAmB,SAAA,CAAU,IAAC,CAAI,GAAC,CAAG,GAAG,GAAA,CAAI,CAAC,CAAA;IAiP5E,oBAhPC;AAgPD,CA3DA,AArLC,IAAA;AAkPD;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC;AAC5B,CAAC;AAED;;;;;GAKG;AACH,0BACI,IA3PM,EAAK,eAAiB,EAAQ,WAAwB;IA4P9D,IAAM,gBAAgB,CA3PhB,aAAA,GAAgB,IAAA,CAAK,aAAC,CAAa;IA4PzC,EAAE,CAAC,CAAC,aA3PC,KAAiB,IAAA,CAAK;QAAC,MAAA,CAAO,aAAA,CAAc;IA4PjD,IAAI,gBAAgB,CA3PhB,UAAA,GAAa,CAAA,CAAE;IA4PnB,EAAE,CAAC,CAAC,WA3PC,IAAc,aAAA,GAAgB,WAAA,CAAY,MAAC,CAAM,CAAC,CAAA;QA4PrD,UAAU,GA3PG,WAAA,CAAY,aAAC,CAAa,CAAC;IA4P1C,CAAC;IACD,MAAM,CA3PC,aAAA,GAAgB,eAAA,GAAkB,UAAA,CAAW;AA4PtD,CAAC","file":"default_iterable_differ.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {looseIdentical, stringify} from '../../util';\nimport {isListLikeIterable, iterateListLike} from '../change_detection_util';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: Object|null|undefined): boolean { return isListLikeIterable(obj); }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V>;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @template V\n * @param {?=} cdRefOrTrackBy\n * @param {?=} trackByFn\n * @return {?}\n */\ncreate<V>(cdRefOrTrackBy?: ChangeDetectorRef|TrackByFunction<V>, trackByFn?: TrackByFunction<V>):\n      DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn || /** @type {?} */(( <TrackByFunction<any>>cdRefOrTrackBy)));\n  }\n}\n\nconst /** @type {?} */ trackByIdentity = (index: number, item: any) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\nprivate _length: number = 0;\nprivate _collection: NgIterable<V>|null = null;\nprivate _linkedRecords: _DuplicateMap<V>|null = null;\nprivate _unlinkedRecords: _DuplicateMap<V>|null = null;\nprivate _previousItHead: IterableChangeRecord_<V>|null = null;\nprivate _itHead: IterableChangeRecord_<V>|null = null;\nprivate _itTail: IterableChangeRecord_<V>|null = null;\nprivate _additionsHead: IterableChangeRecord_<V>|null = null;\nprivate _additionsTail: IterableChangeRecord_<V>|null = null;\nprivate _movesHead: IterableChangeRecord_<V>|null = null;\nprivate _movesTail: IterableChangeRecord_<V>|null = null;\nprivate _removalsHead: IterableChangeRecord_<V>|null = null;\nprivate _removalsTail: IterableChangeRecord_<V>|null = null;\nprivate _identityChangesHead: IterableChangeRecord_<V>|null = null;\nprivate _identityChangesTail: IterableChangeRecord_<V>|null = null;\nprivate _trackByFn: TrackByFunction<V>;\n/**\n * @param {?=} trackByFn\n */\nconstructor(trackByFn?: TrackByFunction<V>) { this._trackByFn = trackByFn || trackByIdentity; }\n/**\n * @return {?}\n */\nget collection() { return this._collection; }\n/**\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let /** @type {?} */ nextIt = this._itHead;\n    let /** @type {?} */ nextRemove = this._removalsHead;\n    let /** @type {?} */ addRemoveOffset = 0;\n    let /** @type {?} */ moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const /** @type {?} */ record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt && /** @type {?} */((\n                  nextIt.currentIndex)) <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */((\n          nextIt)) :\n          nextRemove;\n      const /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const /** @type {?} */ currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = /** @type {?} */(( nextIt))._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const /** @type {?} */ localCurrentIndex = /** @type {?} */(( currentIndex)) - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n              const /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const /** @type {?} */ index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const /** @type {?} */ previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} collection\n * @return {?}\n */\ndiff(collection: NgIterable<V>): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * @param {?} collection\n * @return {?}\n */\ncheck(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null = this._itHead;\n    let /** @type {?} */ mayBeDirty: boolean = false;\n    let /** @type {?} */ index: number;\n    let /** @type {?} */ item: V;\n    let /** @type {?} */ itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      this._length = collection.length;\n\n      for (let /** @type {?} */ index = 0; index < this._length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this._length = index;\n    }\n\n    this._truncate(record);\n    this._collection = collection;\n    return this.isDirty;\n  }\n/**\n * @return {?}\n */\nget isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n/**\n * Reset the state of the change objects to show no changes. This means set previousKey to\n * currentKey, and clear all of the queues (additions, moves, removals).\n * Set the previousIndexes of moved and added items to their currentIndexes\n * Reset the list of additions, moves and removals\n * \n * \\@internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n      let /** @type {?} */ nextRecord: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // todo(vicb) when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n/**\n * This is the core function which handles differences between collections.\n * \n * - `record` is the record which we saw at this position last time. If null then it is a new\n *   item.\n * - `item` is the current item in the collection\n * - `index` is the position of the item in the collection\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let /** @type {?} */ previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n/**\n * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n * \n * Use case: `[a, a]` => `[b, a, a]`\n * \n * If we did not have this check then the insertion of `b` would:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) leave `a` at index `1` as is. <-- this is wrong!\n *   3) reinsert `a` at index 2. <-- this is wrong!\n * \n * The correct behavior is:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) reinsert `a` at index 1.\n *   3) move `a` at from `1` to `2`.\n * \n * \n * Double check that we have not evicted a duplicate item. We need to check if the item type may\n * have already been removed:\n * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n * at the end.\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let /** @type {?} */ reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, /** @type {?} */(( record._prev)), index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n/**\n * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n * \n * - `record` The first excess {\\@link IterableChangeRecord_}.\n * \n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const /** @type {?} */ nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const /** @type {?} */ prev = record._prevRemoved;\n    const /** @type {?} */ next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // todo(vicb)\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const /** @type {?} */ next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // todo(vicb)\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const /** @type {?} */ prev = record._prev;\n    const /** @type {?} */ next = record._next;\n\n    // todo(vicb)\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} toIndex\n * @return {?}\n */\n_addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // todo(vicb)\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n/**\n * @param {?} record\n * @return {?}\n */\n\nprivate _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // todo(vicb)\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // todo(vicb)\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} item\n * @return {?}\n */\n_addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ list: IterableChangeRecord_<V>[] = [];\n    this.forEachItem((record: IterableChangeRecord_<V>) => list.push(record));\n\n    const /** @type {?} */ previous: IterableChangeRecord_<V>[] = [];\n    this.forEachPreviousItem((record: IterableChangeRecord_<V>) => previous.push(record));\n\n    const /** @type {?} */ additions: IterableChangeRecord_<V>[] = [];\n    this.forEachAddedItem((record: IterableChangeRecord_<V>) => additions.push(record));\n\n    const /** @type {?} */ moves: IterableChangeRecord_<V>[] = [];\n    this.forEachMovedItem((record: IterableChangeRecord_<V>) => moves.push(record));\n\n    const /** @type {?} */ removals: IterableChangeRecord_<V>[] = [];\n    this.forEachRemovedItem((record: IterableChangeRecord_<V>) => removals.push(record));\n\n    const /** @type {?} */ identityChanges: IterableChangeRecord_<V>[] = [];\n    this.forEachIdentityChange((record: IterableChangeRecord_<V>) => identityChanges.push(record));\n\n    return 'collection: ' + list.join(', ') + '\\n' +\n        'previous: ' + previous.join(', ') + '\\n' +\n        'additions: ' + additions.join(', ') + '\\n' +\n        'moves: ' + moves.join(', ') + '\\n' +\n        'removals: ' + removals.join(', ') + '\\n' +\n        'identityChanges: ' + identityChanges.join(', ') + '\\n';\n  }\n}\n\nfunction DefaultIterableDiffer_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultIterableDiffer.prototype._length;\n/** @type {?} */\nDefaultIterableDiffer.prototype._collection;\n/** @type {?} */\nDefaultIterableDiffer.prototype._linkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._unlinkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._previousItHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._trackByFn;\n}\n\n/**\n * \\@stable\n */\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n/**\n * \\@internal\n */\n_nextPrevious: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_prev: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_next: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_prevDup: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextDup: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_prevRemoved: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextRemoved: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextAdded: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextMoved: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextIdentityChange: IterableChangeRecord_<V>|null = null;\n/**\n * @param {?} item\n * @param {?} trackById\n */\nconstructor(public item: V,\npublic trackById: any) {}\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                                                      stringify(this.item) + '[' +\n            stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n  }\n}\n\nfunction IterableChangeRecord__tsickle_Closure_declarations() {\n/** @type {?} */\nIterableChangeRecord_.prototype.currentIndex;\n/** @type {?} */\nIterableChangeRecord_.prototype.previousIndex;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextPrevious;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prev;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._next;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextAdded;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextMoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextIdentityChange;\n/** @type {?} */\nIterableChangeRecord_.prototype.item;\n/** @type {?} */\nIterableChangeRecord_.prototype.trackById;\n}\n\nclass _DuplicateItemRecordList<V> {\n/**\n * \\@internal\n */\n_head: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_tail: IterableChangeRecord_<V>|null = null;\n/**\n * Append the record to the list of duplicates.\n * \n * Note: by design all records in the list of duplicates hold the same value in record.item.\n * @param {?} record\n * @return {?}\n */\nadd(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else { /** @type {?} */((\n      // todo(vicb)\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail))._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n/**\n * @param {?} trackById\n * @param {?} atOrAfterIndex\n * @return {?}\n */\nget(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */(( record.currentIndex))) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n/**\n * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * Returns whether the list of duplicates is empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): boolean {\n    // todo(vicb)\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const /** @type {?} */ prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const /** @type {?} */ next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nfunction _DuplicateItemRecordList_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._head;\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._tail;\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n/**\n * @param {?} record\n * @return {?}\n */\nput(record: IterableChangeRecord_<V>) {\n    const /** @type {?} */ key = record.trackById;\n\n    let /** @type {?} */ duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n/**\n * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n * \n * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n * have any more `a`s needs to return the second `a`.\n * @param {?} trackById\n * @param {?} atOrAfterIndex\n * @return {?}\n */\nget(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const /** @type {?} */ key = trackById;\n    const /** @type {?} */ recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n/**\n * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * The list of duplicates also is removed from the map if it gets empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const /** @type {?} */ key = record.trackById;\n    const /** @type {?} */ recordList: _DuplicateItemRecordList<V> = /** @type {?} */(( this.map.get(key)));\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\nget isEmpty(): boolean { return this.map.size === 0; }\n/**\n * @return {?}\n */\nclear() { this.map.clear(); }\n/**\n * @return {?}\n */\ntoString(): string { return '_DuplicateMap(' + stringify(this.map) + ')'; }\n}\n\nfunction _DuplicateMap_tsickle_Closure_declarations() {\n/** @type {?} */\n_DuplicateMap.prototype.map;\n}\n\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(\n    item: any, addRemoveOffset: number, moveOffsets: number[] | null): number {\n  const /** @type {?} */ previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let /** @type {?} */ moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n"]}