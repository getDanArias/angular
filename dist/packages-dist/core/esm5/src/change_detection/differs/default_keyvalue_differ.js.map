{"version":3,"sources":["../../../../../../../packages/core/src/change_detection/differs/default_keyvalue_differ.ts"],"names":[],"mappings":"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","file":"default_keyvalue_differ.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {looseIdentical, stringify} from '../../util';\nimport {isJsObject} from '../change_detection_util';\nimport {ChangeDetectorRef} from '../change_detector_ref';\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: any): boolean { return obj instanceof Map || isJsObject(obj); }\n\n  create<K, V>(): DefaultKeyValueDiffer<K, V>;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @template K, V\n * @param {?=} cd\n * @return {?}\n */\ncreate<K, V>(cd?: ChangeDetectorRef): KeyValueDiffer<K, V> {\n    return new DefaultKeyValueDiffer<K, V>();\n  }\n}\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\nprivate _records = new Map<K, KeyValueChangeRecord_<K, V>>();\nprivate _mapHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _appendAfter: KeyValueChangeRecord_<K, V>|null = null;\nprivate _previousMapHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _changesHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _changesTail: KeyValueChangeRecord_<K, V>|null = null;\nprivate _additionsHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _additionsTail: KeyValueChangeRecord_<K, V>|null = null;\nprivate _removalsHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _removalsTail: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * @return {?}\n */\nget isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n        this._removalsHead !== null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?=} map\n * @return {?}\n */\ndiff(map?: Map<any, any>|{[k: string]: any}|null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new Error(\n          `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n\n    return this.check(map) ? this : null;\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * Check the current state of the map vs the previous.\n * The algorithm is optimised for when the keys do no change.\n * @param {?} map\n * @return {?}\n */\ncheck(map: Map<any, any>|{[k: string]: any}): boolean {\n    this._reset();\n\n    let /** @type {?} */ insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const /** @type {?} */ record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null = insertBefore; record !== null;\n           record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n/**\n * Inserts a record before `before` or append at the end of the list when `before` is null.\n * \n * Notes:\n * - This method appends at `this._appendAfter`,\n * - This method updates `this._appendAfter`,\n * - The return value is the new value for the insertion pointer.\n * @param {?} before\n * @param {?} record\n * @return {?}\n */\n\nprivate _insertBeforeOrAppend(\n      before: KeyValueChangeRecord_<K, V>|null,\n      record: KeyValueChangeRecord_<K, V>): KeyValueChangeRecord_<K, V>|null {\n    if (before) {\n      const /** @type {?} */ prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\n\nprivate _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const /** @type {?} */ record = /** @type {?} */(( this._records.get(key)));\n      this._maybeAddToChanges(record, value);\n      const /** @type {?} */ prev = record._prev;\n      const /** @type {?} */ next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const /** @type {?} */ record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n/**\n * @param {?} record\n * @param {?} newValue\n * @return {?}\n */\n\nprivate _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!looseIdentical(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n/**\n * @param {?} record\n * @return {?}\n */\n\nprivate _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else { /** @type {?} */((\n      this._additionsTail))._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n/**\n * @param {?} record\n * @return {?}\n */\n\nprivate _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else { /** @type {?} */((\n      this._changesTail))._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n/**\n * \\@internal\n * @template K, V\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\n\nprivate _forEach<K, V>(obj: Map<K, V>|{[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n\nfunction DefaultKeyValueDiffer_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._records;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._mapHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._appendAfter;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._previousMapHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._changesHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._changesTail;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._additionsHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._additionsTail;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._removalsHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._removalsTail;\n}\n\n/**\n * \\@stable\n */\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V|null = null;\n  currentValue: V|null = null;\n/**\n * \\@internal\n */\n_nextPrevious: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_next: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_prev: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_nextAdded: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_nextRemoved: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_nextChanged: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * @param {?} key\n */\nconstructor(public key: K) {}\n}\n\nfunction KeyValueChangeRecord__tsickle_Closure_declarations() {\n/** @type {?} */\nKeyValueChangeRecord_.prototype.previousValue;\n/** @type {?} */\nKeyValueChangeRecord_.prototype.currentValue;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextPrevious;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._next;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._prev;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextAdded;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextChanged;\n/** @type {?} */\nKeyValueChangeRecord_.prototype.key;\n}\n\n"]}