{"version":3,"sources":["../../../../../../../packages/core/src/change_detection/differs/iterable_differs.ts"],"names":[],"mappings":"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","file":"iterable_differs.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider} from '../../di';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\n\n/**\n * A type describing supported iterable types.\n *\n * @stable\n */\nexport type NgIterable<T> = Array<T>| Iterable<T>;\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgFor} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n * \n * \\@stable\n * @record\n */\nexport function IterableDiffer() {}\n\n\nfunction IterableDiffer_tsickle_Closure_declarations() {\n/**\n * Compute a difference between the previous state and the new `object` state.\n * \n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nIterableDiffer.prototype.diff;\n}\n\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgFor} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @stable\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V>): IterableChanges<V>|null;\n}\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n * \n * \\@stable\n * @record\n */\nexport function IterableChanges() {}\n\n\nfunction IterableChanges_tsickle_Closure_declarations() {\n/**\n * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nIterableChanges.prototype.forEachItem;\n/**\n * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n * new `Iterable`.\n * \n * NOTE: These are not necessarily the actual operations which were applied to the original\n * `Iterable`, rather these are a set of computed operations which may not be the same as the\n * ones applied.\n * \n * \\@param record A change which needs to be applied\n * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n *        original `Iterable` location, where as `previousIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n *        original `Iterable` location, where as `currentIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * @type {?}\n */\nIterableChanges.prototype.forEachOperation;\n/**\n * Iterate over changes in the order of original `Iterable` showing where the original items\n * have moved.\n * @type {?}\n */\nIterableChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nIterableChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all moved items.\n * @type {?}\n */\nIterableChanges.prototype.forEachMovedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nIterableChanges.prototype.forEachRemovedItem;\n/**\n * Iterate over all items which had their identity (as computed by the `trackByFn`) changed.\n * @type {?}\n */\nIterableChanges.prototype.forEachIdentityChange;\n}\n\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @stable\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n      fn: (record: IterableChangeRecord<V>, previousIndex: number, currentIndex: number) => void):\n      void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all items which had their identity (as computed by the `trackByFn`) changed. */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n/**\n * Record representing the item change information.\n * \n * \\@stable\n * @record\n */\nexport function IterableChangeRecord() {}\n\n\nfunction IterableChangeRecord_tsickle_Closure_declarations() {\n/**\n * Current index of the item in `Iterable` or null if removed.\n * @type {?}\n */\nIterableChangeRecord.prototype.currentIndex;\n/**\n * Previous index of the item in `Iterable` or null if added.\n * @type {?}\n */\nIterableChangeRecord.prototype.previousIndex;\n/**\n * The item.\n * @type {?}\n */\nIterableChangeRecord.prototype.item;\n/**\n * Track by identity as computed by the `trackByFn`.\n * @type {?}\n */\nIterableChangeRecord.prototype.trackById;\n}\n\n\n/**\n * Record representing the item change information.\n *\n * @stable\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number|null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number|null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `trackByFn`. */\n  readonly trackById: any;\n}\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @record\n */\nexport function CollectionChangeRecord() {}\n\n\nfunction CollectionChangeRecord_tsickle_Closure_declarations() {\n}\n\n\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n */\nexport interface CollectionChangeRecord<V> extends IterableChangeRecord<V> {}\n/**\n * Nolonger used.\n * \n * @deprecated v4.0.0 - Use TrackByFunction instead\n * @record\n */\nexport function TrackByFn() {}\n\n\nfunction TrackByFn_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(index: number, item: any): any;\n*/\n}\n\n\n\n/**\n * Nolonger used.\n *\n * @deprecated v4.0.0 - Use TrackByFunction instead\n */\nexport interface TrackByFn { (index: number, item: any): any; }\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n * \n * \\@stable\n * @record\n */\nexport function TrackByFunction() {}\n\n\nfunction TrackByFunction_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(index: number, item: T): any;\n*/\n}\n\n\n/**\n * An optional function passed into {@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * @stable\n */\nexport interface TrackByFunction<T> { (index: number, item: T): any; }\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n * \n * \\@stable\n * @record\n */\nexport function IterableDifferFactory() {}\n\n\nfunction IterableDifferFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nIterableDifferFactory.prototype.supports;\n/** @type {?} */\nIterableDifferFactory.prototype.create;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @type {?}\n */\nIterableDifferFactory.prototype.create;\n}\n\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @stable\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n\n  /**\n   * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n   */\n  create<V>(_cdr?: ChangeDetectorRef|TrackByFunction<V>, trackByFn?: TrackByFunction<V>):\n      IterableDiffer<V>;\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n * \\@stable\n */\nexport class IterableDiffers {\n/**\n * @deprecated v4.0.0 - Should be private\n */\nfactories: IterableDifferFactory[];\n/**\n * @param {?} factories\n */\nconstructor(factories: IterableDifferFactory[]) { this.factories = factories; }\n/**\n * @param {?} factories\n * @param {?=} parent\n * @return {?}\n */\nstatic create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const /** @type {?} */ copied = parent.factories.slice();\n      factories = factories.concat(copied);\n      return new IterableDiffers(factories);\n    } else {\n      return new IterableDiffers(factories);\n    }\n  }\n/**\n * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n * {\\@link IterableDiffers} instance.\n * \n * The following example shows how to extend an existing list of factories,\n * which will only be applied to the injector for this component and its children.\n * This step is all that's required to make a new {\\@link IterableDiffer} available.\n * \n * ### Example\n * \n * ```\n * \\@Component({ \n *   viewProviders: [\n *     IterableDiffers.extend([new ImmutableListDiffer()])\n *   ]\n * })\n * ```\n * @param {?} factories\n * @return {?}\n */\nstatic extend(factories: IterableDifferFactory[]): StaticProvider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n          // to\n          // bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend IterableDiffers without a parent injector');\n        }\n        return IterableDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n/**\n * @param {?} iterable\n * @return {?}\n */\nfind(iterable: any): IterableDifferFactory {\n    const /** @type {?} */ factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new Error(\n          `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n\nfunction IterableDiffers_tsickle_Closure_declarations() {\n/**\n * @deprecated v4.0.0 - Should be private\n * @type {?}\n */\nIterableDiffers.prototype.factories;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n"]}