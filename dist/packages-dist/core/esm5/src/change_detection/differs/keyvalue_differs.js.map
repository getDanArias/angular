{"version":3,"sources":["../../../../../../../packages/core/src/change_detection/differs/keyvalue_differs.ts"],"names":[],"mappings":"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","file":"keyvalue_differs.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider} from '../../di';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n/**\n * A differ that tracks changes made to an object over time.\n * \n * \\@stable\n * @record\n */\nexport function KeyValueDiffer() {}\n\n\nfunction KeyValueDiffer_tsickle_Closure_declarations() {\n/**\n * Compute a difference between the previous state and the new `object` state.\n * \n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * Compute a difference between the previous state and the new `object` state.\n * \n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n}\n\n\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @stable\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n * \n * \\@stable\n * @record\n */\nexport function KeyValueChanges() {}\n\n\nfunction KeyValueChanges_tsickle_Closure_declarations() {\n/**\n * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachItem;\n/**\n * Iterate over changes in the order of original Map showing where the original items\n * have moved.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all keys for which values have changed.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachChangedItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachRemovedItem;\n}\n\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @stable\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n/**\n * Record representing the item change information.\n * \n * \\@stable\n * @record\n */\nexport function KeyValueChangeRecord() {}\n\n\nfunction KeyValueChangeRecord_tsickle_Closure_declarations() {\n/**\n * Current key in the Map.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.key;\n/**\n * Current value for the key or `null` if removed.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.currentValue;\n/**\n * Previous value for the key or `null` if added.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.previousValue;\n}\n\n\n/**\n * Record representing the item change information.\n *\n * @stable\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n * \n * \\@stable\n * @record\n */\nexport function KeyValueDifferFactory() {}\n\n\nfunction KeyValueDifferFactory_tsickle_Closure_declarations() {\n/**\n * Test to see if the differ knows how to diff this kind of object.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.supports;\n/**\n * Create a `KeyValueDiffer`.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.create;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @type {?}\n */\nKeyValueDifferFactory.prototype.create;\n}\n\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @stable\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n\n  /**\n   * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n   */\n  create<K, V>(_cdr?: ChangeDetectorRef): KeyValueDiffer<K, V>;\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * \\@stable\n */\nexport class KeyValueDiffers {\n/**\n * @deprecated v4.0.0 - Should be private.\n */\nfactories: KeyValueDifferFactory[];\n/**\n * @param {?} factories\n */\nconstructor(factories: KeyValueDifferFactory[]) { this.factories = factories; }\n/**\n * @template S\n * @param {?} factories\n * @param {?=} parent\n * @return {?}\n */\nstatic create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const /** @type {?} */ copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n/**\n * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n * {\\@link KeyValueDiffers} instance.\n * \n * The following example shows how to extend an existing list of factories,\n * which will only be applied to the injector for this component and its children.\n * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n * \n * ### Example\n * \n * ```\n * \\@Component({ \n *   viewProviders: [\n *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n *   ]\n * })\n * ```\n * @template S\n * @param {?} factories\n * @return {?}\n */\nstatic extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n          // to bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n        }\n        return KeyValueDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n/**\n * @param {?} kv\n * @return {?}\n */\nfind(kv: any): KeyValueDifferFactory {\n    const /** @type {?} */ factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n\nfunction KeyValueDiffers_tsickle_Closure_declarations() {\n/**\n * @deprecated v4.0.0 - Should be private.\n * @type {?}\n */\nKeyValueDiffers.prototype.factories;\n}\n\n"]}