{"version":3,"sources":["../../../../../../packages/core/src/di/metadata.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,aAAE,EAAc,kBAAA,EAAmB,MAAA,oBAAA,CAAA;AAM1C;;;;;GAKG;AACH,MAAM,8BAA6B,CAAC;AAGpC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AA8CD;;;;;GAKG;AACH,MAtBC,CAAM,IAAA,gBAAA,CAAM,MAAA,GAA0B,kBAAA,CAAmB,QAAC,EAAS,UAAA,KAAQ,IAAQ,OAAA,CAAA,EAAE,KAAC,OAAA,EAAK,CAAC,EAAT,CAAS,CAAC,CAAC;AAuB/F;;;;;GAKG;AACH,MAAM,gCAA+B,CAAC;AAGtC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAwCD;;;;;GAKG;AACH,MAvCC,CAAM,IAAA,gBAAA,CAAM,QAAA,GAA8B,kBAAA,CAAmB,UAAC,CAAU,CAAC;AAwC1E;;;;;GAKG;AACH,MAAM,kCAAiC,CAAC;AAGxC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAyCD;;;;;GAKG;AACH,MAxDC,CAAM,IAAA,gBAAA,CAAM,UAAA,GAAkC,aAAA,CAAc,YAAC,CAAY,CAAC;AAyD3E;;;;;GAKG;AACH,MAAM,4BAA2B,CAAC;AAGlC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAsCD;;;;;GAKG;AACH,MAzEC,CAAM,IAAA,gBAAA,CAAM,IAAA,GAAsB,kBAAA,CAAmB,MAAC,CAAM,CAAC;AA0E9D;;;;;GAKG;AACH,MAAM,gCAA+B,CAAC;AAGtC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAuCD;;;;;GAKG;AACH,MA1FC,CAAM,IAAA,gBAAA,CAAM,QAAA,GAA8B,kBAAA,CAAmB,UAAC,CAAU,CAAC;AA2F1E;;;;;GAKG;AACH,MAAM,4BAA2B,CAAC;AAGlC;IACA;;MAEE;IACF;;MAEE;AACF,CAAC;AAuCD;;;;;GAKG;AACH,MA3GC,CAAM,IAAA,gBAAA,CAAM,IAAA,GAAsB,kBAAA,CAAmB,MAAC,CAAM,CAAC","file":"metadata.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\n/**\n * Type of the Inject decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function InjectDecorator() {}\n\n\nfunction InjectDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(token: any): any;\n*/\n/* TODO: handle strange member:\nnew (token: any): Inject;\n*/\n}\n\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @stable\n */\nexport interface InjectDecorator {\n  /**\n   * @whatItDoes A parameter decorator that specifies a dependency.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Inject(\"MyEngine\") public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Inject'}\n   *\n   * When `@Inject()` is not present, {@link Injector} will use the type annotation of the\n   * parameter.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n   *\n   * @stable\n   */\n  (token: any): any;\n  new (token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @stable\n */\nexport interface Inject { token: any; }\n/**\n * Inject decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ Inject: InjectDecorator = makeParamDecorator('Inject', (token: any) => ({token}));\n/**\n * Type of the Optional decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function OptionalDecorator() {}\n\n\nfunction OptionalDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(): any;\n*/\n/* TODO: handle strange member:\nnew (): Optional;\n*/\n}\n\n\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @stable\n */\nexport interface OptionalDecorator {\n  /**\n   * @whatItDoes A parameter metadata that marks a dependency as optional.\n   * {@link Injector} provides `null` if the dependency is not found.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Optional() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Optional'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @stable\n */\nexport interface Optional {}\n/**\n * Optional decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ Optional: OptionalDecorator = makeParamDecorator('Optional');\n/**\n * Type of the Injectable decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function InjectableDecorator() {}\n\n\nfunction InjectableDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(): any;\n*/\n/* TODO: handle strange member:\nnew (): Injectable;\n*/\n}\n\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @stable\n */\nexport interface InjectableDecorator {\n  /**\n   * @whatItDoes A marker metadata that marks a class as available to {@link Injector} for creation.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {}\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n   *\n   * {@link Injector} will throw an error when trying to instantiate a class that\n   * does not have `@Injectable` marker, as shown in the example below.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @stable\n */\nexport interface Injectable {}\n/**\n * Injectable decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ Injectable: InjectableDecorator = makeDecorator('Injectable');\n/**\n * Type of the Self decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function SelfDecorator() {}\n\n\nfunction SelfDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(): any;\n*/\n/* TODO: handle strange member:\nnew (): Self;\n*/\n}\n\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @stable\n */\nexport interface SelfDecorator {\n  /**\n   * @whatItDoes Specifies that an {@link Injector} should retrieve a dependency only from itself.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Self() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Self'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @stable\n */\nexport interface Self {}\n/**\n * Self decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ Self: SelfDecorator = makeParamDecorator('Self');\n/**\n * Type of the SkipSelf decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function SkipSelfDecorator() {}\n\n\nfunction SkipSelfDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(): any;\n*/\n/* TODO: handle strange member:\nnew (): SkipSelf;\n*/\n}\n\n\n\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * @stable\n */\nexport interface SkipSelfDecorator {\n  /**\n   * @whatItDoes Specifies that the dependency resolution should start from the parent injector.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@SkipSelf() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): SkipSelf;\n}\n\n/**\n * Type of the SkipSelf metadata.\n *\n * @stable\n */\nexport interface SkipSelf {}\n/**\n * SkipSelf decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ SkipSelf: SkipSelfDecorator = makeParamDecorator('SkipSelf');\n/**\n * Type of the Host decorator / constructor function.\n * \n * \\@stable\n * @record\n */\nexport function HostDecorator() {}\n\n\nfunction HostDecorator_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(): any;\n*/\n/* TODO: handle strange member:\nnew (): Host;\n*/\n}\n\n\n/**\n * Type of the Host decorator / constructor function.\n *\n * @stable\n */\nexport interface HostDecorator {\n  /**\n   * @whatItDoes Specifies that an injector should retrieve a dependency from any injector until\n   * reaching the host element of the current component.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Host() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Host'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @stable\n */\nexport interface Host {}\n/**\n * Host decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const /** @type {?} */ Host: HostDecorator = makeParamDecorator('Host');\n"]}