{"version":3,"sources":["../../../../../../packages/core/src/di/provider.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,4BAA2B,CAAC;AAGlC;IACA;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC;;;;;;;;OAQG;IACH,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,CAAC;AAwCD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,kCAAiC,CAAC;AAGxC;IACA;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC;IACtC;;;;;OAKG;IACH,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACvC;;;;OAIG;IACH,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC;IACnC;;;;;;;;OAQG;IACH,mBAAmB,CAAC,SAAS,CAAC,KAAK,CAAC;AACpC,CAAC;AAsDD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,kCAAiC,CAAC;AAGxC;IACA;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC;IACtC;;;;OAIG;IACH,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC;IACnC;;;;;;;;OAQG;IACH,mBAAmB,CAAC,SAAS,CAAC,KAAK,CAAC;AACpC,CAAC;AA4CD;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,+BAA8B,CAAC;AAGrC;IACA;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;IACnC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC;IACvC;;;;;;;;OAQG;IACH,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC;AACjC,CAAC;AAwCD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,8BAA6B,CAAC;AAGpC;IACA;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;IAClC;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC;IACrC;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;IAC/B;;;;;;;;OAQG;IACH,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC;AAChC,CAAC;AAmED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,2BAA0B,CAAC;AAGjC;AACA,CAAC;AA6BD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,4BAA2B,CAAC;AAGlC;IACA;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC;;;;;;;;OAQG;IACH,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,CAAC","file":"provider.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return a value for a token.\n * \\@howToUse \n * ```\n * const provider: ValueProvider = {provide: 'someToken', useValue: 'someValue'};\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='ValueProvider'}\n * \n * \\@stable\n * @record\n */\nexport function ValueProvider() {}\n\n\nfunction ValueProvider_tsickle_Closure_declarations() {\n/**\n * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n * @type {?}\n */\nValueProvider.prototype.provide;\n/**\n * The value to inject.\n * @type {?}\n */\nValueProvider.prototype.useValue;\n/**\n * If true, then injector returns an array of instances. This is useful to allow multiple\n * providers spread across many files to provide configuration information to a common token.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n * @type {?|undefined}\n */\nValueProvider.prototype.multi;\n}\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return a value for a token.\n * @howToUse\n * ```\n * const provider: ValueProvider = {provide: 'someToken', useValue: 'someValue'};\n * ```\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * @stable\n */\nexport interface ValueProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * The value to inject.\n   */\n  useValue: any;\n\n  /**\n   * If true, then injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n   */\n  multi?: boolean;\n}\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return an instance of `useClass` for a token.\n * \\@howToUse \n * ```\n * \\@Injectable() \n * class MyService {}\n * \n * const provider: ClassProvider = {provide: 'someToken', useClass: MyService, deps: []};\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n * \n * Note that following two providers are not equal:\n * {\\@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n * \n * \\@stable\n * @record\n */\nexport function StaticClassProvider() {}\n\n\nfunction StaticClassProvider_tsickle_Closure_declarations() {\n/**\n * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n * @type {?}\n */\nStaticClassProvider.prototype.provide;\n/**\n * An optional class to instantiate for the `token`. (If not provided `provide` is assumed to be a\n * class to\n * instantiate)\n * @type {?}\n */\nStaticClassProvider.prototype.useClass;\n/**\n * A list of `token`s which need to be resolved by the injector. The list of values is then\n * used as arguments to the `useClass` constructor.\n * @type {?}\n */\nStaticClassProvider.prototype.deps;\n/**\n * If true, then injector returns an array of instances. This is useful to allow multiple\n * providers spread across many files to provide configuration information to a common token.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n * @type {?|undefined}\n */\nStaticClassProvider.prototype.multi;\n}\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return an instance of `useClass` for a token.\n * @howToUse\n * ```\n * @Injectable()\n * class MyService {}\n *\n * const provider: ClassProvider = {provide: 'someToken', useClass: MyService, deps: []};\n * ```\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * @stable\n */\nexport interface StaticClassProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * An optional class to instantiate for the `token`. (If not provided `provide` is assumed to be a\n   * class to\n   * instantiate)\n   */\n  useClass: Type<any>;\n\n  /**\n   * A list of `token`s which need to be resolved by the injector. The list of values is then\n   * used as arguments to the `useClass` constructor.\n   */\n  deps: any[];\n\n  /**\n   * If true, then injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n   */\n  multi?: boolean;\n}\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return an instance of a token.\n * \\@howToUse \n * ```\n * \\@Injectable() \n * class MyService {}\n * \n * const provider: ClassProvider = {provide: MyClass, deps: []};\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n * \n * \\@stable\n * @record\n */\nexport function ConstructorProvider() {}\n\n\nfunction ConstructorProvider_tsickle_Closure_declarations() {\n/**\n * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n * @type {?}\n */\nConstructorProvider.prototype.provide;\n/**\n * A list of `token`s which need to be resolved by the injector. The list of values is then\n * used as arguments to the `useClass` constructor.\n * @type {?}\n */\nConstructorProvider.prototype.deps;\n/**\n * If true, then injector returns an array of instances. This is useful to allow multiple\n * providers spread across many files to provide configuration information to a common token.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n * @type {?|undefined}\n */\nConstructorProvider.prototype.multi;\n}\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return an instance of a token.\n * @howToUse\n * ```\n * @Injectable()\n * class MyService {}\n *\n * const provider: ClassProvider = {provide: MyClass, deps: []};\n * ```\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * @stable\n */\nexport interface ConstructorProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: Type<any>;\n\n  /**\n   * A list of `token`s which need to be resolved by the injector. The list of values is then\n   * used as arguments to the `useClass` constructor.\n   */\n  deps: any[];\n\n  /**\n   * If true, then injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n   */\n  multi?: boolean;\n}\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return a value of another `useExisting` token.\n * \\@howToUse \n * ```\n * const provider: ExistingProvider = {provide: 'someToken', useExisting: 'someOtherToken'};\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n * \n * \\@stable\n * @record\n */\nexport function ExistingProvider() {}\n\n\nfunction ExistingProvider_tsickle_Closure_declarations() {\n/**\n * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n * @type {?}\n */\nExistingProvider.prototype.provide;\n/**\n * Existing `token` to return. (equivalent to `injector.get(useExisting)`)\n * @type {?}\n */\nExistingProvider.prototype.useExisting;\n/**\n * If true, then injector returns an array of instances. This is useful to allow multiple\n * providers spread across many files to provide configuration information to a common token.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n * @type {?|undefined}\n */\nExistingProvider.prototype.multi;\n}\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return a value of another `useExisting` token.\n * @howToUse\n * ```\n * const provider: ExistingProvider = {provide: 'someToken', useExisting: 'someOtherToken'};\n * ```\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * @stable\n */\nexport interface ExistingProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * Existing `token` to return. (equivalent to `injector.get(useExisting)`)\n   */\n  useExisting: any;\n\n  /**\n   * If true, then injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n   */\n  multi?: boolean;\n}\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return a value by invoking a `useFactory`\n * function.\n * \\@howToUse \n * ```\n * function serviceFactory() { ... }\n * \n * const provider: FactoryProvider = {provide: 'someToken', useFactory: serviceFactory, deps: []};\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n * \n * Dependencies can also be marked as optional:\n * {\\@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n * \n * \\@stable\n * @record\n */\nexport function FactoryProvider() {}\n\n\nfunction FactoryProvider_tsickle_Closure_declarations() {\n/**\n * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n * @type {?}\n */\nFactoryProvider.prototype.provide;\n/**\n * A function to invoke to create a value for this `token`. The function is invoked with\n * resolved values of `token`s in the `deps` field.\n * @type {?}\n */\nFactoryProvider.prototype.useFactory;\n/**\n * A list of `token`s which need to be resolved by the injector. The list of values is then\n * used as arguments to the `useFactory` function.\n * @type {?|undefined}\n */\nFactoryProvider.prototype.deps;\n/**\n * If true, then injector returns an array of instances. This is useful to allow multiple\n * providers spread across many files to provide configuration information to a common token.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n * @type {?|undefined}\n */\nFactoryProvider.prototype.multi;\n}\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return a value by invoking a `useFactory`\n * function.\n * @howToUse\n * ```\n * function serviceFactory() { ... }\n *\n * const provider: FactoryProvider = {provide: 'someToken', useFactory: serviceFactory, deps: []};\n * ```\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * @stable\n */\nexport interface FactoryProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * A function to invoke to create a value for this `token`. The function is invoked with\n   * resolved values of `token`s in the `deps` field.\n   */\n  useFactory: Function;\n\n  /**\n   * A list of `token`s which need to be resolved by the injector. The list of values is then\n   * used as arguments to the `useFactory` function.\n   */\n  deps?: any[];\n\n  /**\n   * If true, then injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n   */\n  multi?: boolean;\n}\n\n/**\n * @whatItDoes Describes how the {@link Injector} should be configured in a static way (Without\n * reflection).\n * @howToUse\n * See {@link ValueProvider}, {@link ExistingProvider}, {@link FactoryProvider}.\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * @stable\n */\nexport type StaticProvider = ValueProvider | ExistingProvider | StaticClassProvider |\n    ConstructorProvider | FactoryProvider | any[];\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return an instance of `Type` when `Type' is used\n * as token.\n * \\@howToUse \n * ```\n * \\@Injectable() \n * class MyService {}\n * \n * const provider: TypeProvider = MyService;\n * ```\n * \n * \\@description \n * \n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n * \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='TypeProvider'}\n * \n * \\@stable\n * @record\n */\nexport function TypeProvider() {}\n\n\nfunction TypeProvider_tsickle_Closure_declarations() {\n}\n\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return an instance of `Type` when `Type' is used\n * as token.\n * @howToUse\n * ```\n * @Injectable()\n * class MyService {}\n *\n * const provider: TypeProvider = MyService;\n * ```\n *\n * @description\n *\n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n *\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n *\n * @stable\n */\nexport interface TypeProvider extends Type<any> {}\n/**\n * \\@whatItDoes Configures the {\\@link Injector} to return an instance of `useClass` for a token.\n * \\@howToUse \n * ```\n * \\@Injectable() \n * class MyService {}\n * \n * const provider: ClassProvider = {provide: 'someToken', useClass: MyService};\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='ClassProvider'}\n * \n * Note that following two providers are not equal:\n * {\\@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n * \n * \\@stable\n * @record\n */\nexport function ClassProvider() {}\n\n\nfunction ClassProvider_tsickle_Closure_declarations() {\n/**\n * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n * @type {?}\n */\nClassProvider.prototype.provide;\n/**\n * Class to instantiate for the `token`.\n * @type {?}\n */\nClassProvider.prototype.useClass;\n/**\n * If true, then injector returns an array of instances. This is useful to allow multiple\n * providers spread across many files to provide configuration information to a common token.\n * \n * ### Example\n * \n * {\\@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n * @type {?|undefined}\n */\nClassProvider.prototype.multi;\n}\n\n\n/**\n * @whatItDoes Configures the {@link Injector} to return an instance of `useClass` for a token.\n * @howToUse\n * ```\n * @Injectable()\n * class MyService {}\n *\n * const provider: ClassProvider = {provide: 'someToken', useClass: MyService};\n * ```\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * @stable\n */\nexport interface ClassProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * Class to instantiate for the `token`.\n   */\n  useClass: Type<any>;\n\n  /**\n   * If true, then injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n   */\n  multi?: boolean;\n}\n\n/**\n * @whatItDoes Describes how the {@link Injector} should be configured.\n * @howToUse\n * See {@link TypeProvider}, {@link ClassProvider}, {@link StaticProvider}.\n *\n * @description\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * @stable\n */\nexport type Provider =\n    TypeProvider | ValueProvider | ClassProvider | ExistingProvider | FactoryProvider | any[];\n"]}