{"version":3,"sources":["../../../../../../packages/core/testing/src/test_bed.ts"],"names":[],"mappings":"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","file":"test_bed.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationInitStatus, CompilerOptions, Component, Directive, InjectionToken, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, NgModuleRef, NgZone, Optional, Pipe, PlatformRef, Provider, SchemaMetadata, SkipSelf, Type, ɵDepFlags as DepFlags, ɵERROR_COMPONENT_TYPE, ɵNodeFlags as NodeFlags, ɵclearProviderOverrides as clearProviderOverrides, ɵoverrideProvider as overrideProvider, ɵstringify as stringify} from '@angular/core';\n\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\nconst UNDEFINED = new Object();\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\nlet _nextRootElementId = 0;\n\n/**\n * @experimental\n */\nexport const ComponentFixtureAutoDetect =\n    new InjectionToken<boolean[]>('ComponentFixtureAutoDetect');\n\n/**\n * @experimental\n */\nexport const ComponentFixtureNoNgZone = new InjectionToken<boolean[]>('ComponentFixtureNoNgZone');\n\n/**\n * @experimental\n */\nexport type TestModuleMetadata = {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  schemas?: Array<SchemaMetadata|any[]>,\n};\n\n/**\n * @whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * @description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @stable\n */\nexport class TestBed implements Injector {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed {\n    const testBed = getTestBed();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  static resetTestEnvironment() { getTestBed().resetTestEnvironment(); }\n\n  static resetTestingModule(): typeof TestBed {\n    getTestBed().resetTestingModule();\n    return TestBed;\n  }\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): typeof TestBed {\n    getTestBed().configureCompiler(config);\n    return TestBed;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): typeof TestBed {\n    getTestBed().configureTestingModule(moduleDef);\n    return TestBed;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return getTestBed().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): typeof TestBed {\n    getTestBed().overrideModule(ngModule, override);\n    return TestBed;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      typeof TestBed {\n    getTestBed().overrideComponent(component, override);\n    return TestBed;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      typeof TestBed {\n    getTestBed().overrideDirective(directive, override);\n    return TestBed;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): typeof TestBed {\n    getTestBed().overridePipe(pipe, override);\n    return TestBed;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): typeof TestBed {\n    getTestBed().overrideComponent(component, {set: {template, templateUrl: null !}});\n    return TestBed;\n  }\n\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  static overrideProvider(token: any, provider: {useValue: any;}): void;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): typeof TestBed {\n    getTestBed().overrideProvider(token, provider as any);\n    return TestBed;\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    return getTestBed().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return getTestBed().createComponent(component);\n  }\n\n  private _instantiated: boolean = false;\n\n  private _compiler: TestingCompiler = null !;\n  private _moduleRef: NgModuleRef<any> = null !;\n  private _moduleFactory: NgModuleFactory<any> = null !;\n\n  private _compilerOptions: CompilerOptions[] = [];\n\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _aotSummaries: () => any[] = () => [];\n\n  platform: PlatformRef = null !;\n\n  ngModule: Type<any>|Type<any>[] = null !;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n    if (aotSummaries) {\n      this._aotSummaries = aotSummaries;\n    }\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this.platform = null !;\n    this.ngModule = null !;\n    this._aotSummaries = () => [];\n  }\n\n  resetTestingModule() {\n    clearProviderOverrides();\n    this._compiler = null !;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._moduleRef = null !;\n    this._moduleFactory = null !;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', fixture.componentInstance);\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata) {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    if (this._moduleFactory || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n  }\n\n  private _initIfNeeded() {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleFactory) {\n      try {\n        const moduleType = this._createCompilerAndModule();\n        this._moduleFactory =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n      } catch (e) {\n        if (getComponentType(e)) {\n          throw new Error(\n              `This test module uses the component ${stringify(getComponentType(e))} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const ngZoneInjector =\n        Injector.create([{provide: NgZone, useValue: ngZone}], this.platform.injector);\n    this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n    // before accessing it.\n    (this._moduleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n    this._instantiated = true;\n  }\n\n  private _createCompilerAndModule(): Type<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations = this._declarations;\n    const imports = [this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    \n    class DynamicTestModule {\n    static decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{providers, declarations, imports, schemas}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\n    const compilerFactory: TestingCompilerFactory =\n        this.platform.injector.get(TestingCompilerFactory);\n    this._compiler =\n        compilerFactory.createTestingCompiler(this._compilerOptions.concat([{useDebug: true}]));\n    this._compiler.loadAotSummaries(this._aotSummaries);\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): void {\n    let flags: NodeFlags = 0;\n    let value: any;\n    if (provider.useFactory) {\n      flags |= NodeFlags.TypeFactoryProvider;\n      value = provider.useFactory;\n    } else {\n      flags |= NodeFlags.TypeValueProvider;\n      value = provider.useValue;\n    }\n    const deps = (provider.deps || []).map((dep) => {\n      let depFlags: DepFlags = DepFlags.None;\n      let depToken: any;\n      if (Array.isArray(dep)) {\n        dep.forEach((entry: any) => {\n          if (entry instanceof Optional) {\n            depFlags |= DepFlags.Optional;\n          } else if (entry instanceof SkipSelf) {\n            depFlags |= DepFlags.SkipSelf;\n          } else {\n            depToken = entry;\n          }\n        });\n      } else {\n        depToken = dep;\n      }\n      return [depFlags, depToken];\n    });\n    overrideProvider({token, flags, deps, value});\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const componentFactory = this._compiler.getComponentFactory(component);\n\n    if (!componentFactory) {\n      throw new Error(\n          `Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n    }\n\n    const noNgZone = this.get(ComponentFixtureNoNgZone, false);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n}\n\nlet _testBed: TestBed = null !;\n\n/**\n * @experimental\n */\nexport function getTestBed() {\n  return _testBed = _testBed || new TestBed();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(() => {\n        const completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn, this);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function() { return testBed.execute(tokens, fn, this); };\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => TestModuleMetadata) {}\n\n  private _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\nexport function withModule(moduleDef: TestModuleMetadata, fn?: Function | null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      const testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}\n\nfunction getComponentType(error: Error): Function {\n  return (error as any)[ɵERROR_COMPONENT_TYPE];\n}\n"]}