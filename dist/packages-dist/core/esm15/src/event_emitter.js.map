{"version":3,"sources":["../../../../packages/core/src/event_emitter.ts"],"names":[],"mappings":"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","file":"event_emitter.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Use by directives and components to emit custom Events.\n * \n * ### Examples\n * \n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n * \n * ```\n * \\@Component({ \n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n * \n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n * \n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n * \n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n * \n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n * \n * Once a reference implementation of the spec is available, switch to it.\n * \\@stable\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  // tslint:disable-next-line\n  __isAsync: boolean;\n/**\n * Creates an instance of {\\@link EventEmitter}, which depending on `isAsync`,\n * delivers events synchronously or asynchronously.\n * \n * @param {?=} isAsync By default, events are delivered synchronously (default value: `false`).\n * Set to `true` for asynchronous event delivery.\n */\nconstructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n/**\n * @param {?=} value\n * @return {?}\n */\nemit(value?: T) { super.next(value); }\n/**\n * @param {?=} generatorOrNext\n * @param {?=} error\n * @param {?=} complete\n * @return {?}\n */\nsubscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    let /** @type {?} */ schedulerFn: (t: any) => any;\n    let /** @type {?} */ errorFn = (err: any): any => null;\n    let /** @type {?} */ completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    return super.subscribe(schedulerFn, errorFn, completeFn);\n  }\n}\n\nfunction EventEmitter_tsickle_Closure_declarations() {\n/** @type {?} */\nEventEmitter.prototype.__isAsync;\n}\n\n"]}