{"version":3,"sources":["../../../../../packages/core/src/metadata/lifecycle_hooks.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH;;;;;GAKG;AACH,MAAM,4BAA2B,CAAC;AAGlC;IACA;;MAEE;AACF,CAAC;AAUD;;;;;;;;;;;;;;GAcG;AACH,MAAM,wBAAuB,CAAC;AAG9B;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC;AAChC,CAAC;AAkBD;;;;;;;;;;;;;;;GAeG;AACH,MAAM,qBAAoB,CAAC;AAG3B;IACA,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC1B,CAAC;AAmBD;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,sBAAqB,CAAC;AAG5B;IACA,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;AAC5B,CAAC;AAyBD;;;;;;;;;;;;;GAaG;AACH,MAAM,wBAAuB,CAAC;AAG9B;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC;AAChC,CAAC;AAiBD;;;;;;;;;;;;GAYG;AACH,MAAM,+BAA8B,CAAC;AAGrC;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC9C,CAAC;AAgBD;;;;;;;;;;GAUG;AACH,MAAM,kCAAiC,CAAC;AAGxC;IACA,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,qBAAqB,CAAC;AACpD,CAAC;AAcD;;;;;;;;;;;GAWG;AACH,MAAM,4BAA2B,CAAC;AAGlC;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,eAAe,CAAC;AACxC,CAAC;AAeD;;;;;;;;;;GAUG;AACH,MAAM,+BAA8B,CAAC;AAGrC;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC9C,CAAC","file":"lifecycle_hooks.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SimpleChange} from '../change_detection/change_detection_util';\n/**\n * A `changes` object whose keys are property names and\n * values are instances of {\\@link SimpleChange}. See {\\@link OnChanges}\n * \\@stable\n * @record\n */\nexport function SimpleChanges() {}\n\n\nfunction SimpleChanges_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n[propName: string]: SimpleChange;\n*/\n}\n\n\n\n/**\n * A `changes` object whose keys are property names and\n * values are instances of {@link SimpleChange}. See {@link OnChanges}\n * @stable\n */\nexport interface SimpleChanges { [propName: string]: SimpleChange; }\n/**\n * \\@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n * \n * \\@description \n * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n * and content children are checked if at least one of them has changed.\n * The `changes` parameter contains the changed properties.\n * \n * See {\\@linkDocs guide/lifecycle-hooks#onchanges \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function OnChanges() {}\n\n\nfunction OnChanges_tsickle_Closure_declarations() {\n/** @type {?} */\nOnChanges.prototype.ngOnChanges;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n *\n * @description\n * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n * and content children are checked if at least one of them has changed.\n * The `changes` parameter contains the changed properties.\n *\n * See {@linkDocs guide/lifecycle-hooks#onchanges \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface OnChanges { ngOnChanges(changes: SimpleChanges): void; }\n/**\n * \\@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are\n * initialized.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n * \n * \\@description \n * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n * first time, and before any of its children have been checked. It is invoked only once when the\n * directive is instantiated.\n * \n * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function OnInit() {}\n\n\nfunction OnInit_tsickle_Closure_declarations() {\n/** @type {?} */\nOnInit.prototype.ngOnInit;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called after data-bound properties of a directive are\n * initialized.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n *\n * @description\n * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n * first time, and before any of its children have been checked. It is invoked only once when the\n * directive is instantiated.\n *\n * See {@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface OnInit { ngOnInit(): void; }\n/**\n * \\@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n * \n * \\@description \n * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n * algorithm. The default change detection algorithm looks for differences by comparing\n * bound-property values by reference across change detection runs.\n * \n * Note that a directive typically should not use both `DoCheck` and {\\@link OnChanges} to respond to\n * changes on the same input, as `ngOnChanges` will continue to be called when the default change\n * detector detects changes.\n * \n * See {\\@link KeyValueDiffers} and {\\@link IterableDiffers} for implementing custom dirty checking\n * for collections.\n * \n * See {\\@linkDocs guide/lifecycle-hooks#docheck \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function DoCheck() {}\n\n\nfunction DoCheck_tsickle_Closure_declarations() {\n/** @type {?} */\nDoCheck.prototype.ngDoCheck;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n *\n * @description\n * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n * algorithm. The default change detection algorithm looks for differences by comparing\n * bound-property values by reference across change detection runs.\n *\n * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to\n * changes on the same input, as `ngOnChanges` will continue to be called when the default change\n * detector detects changes.\n *\n * See {@link KeyValueDiffers} and {@link IterableDiffers} for implementing custom dirty checking\n * for collections.\n *\n * See {@linkDocs guide/lifecycle-hooks#docheck \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface DoCheck { ngDoCheck(): void; }\n/**\n * \\@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n * \n * \\@description \n * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n * instance is destroyed.\n * \n * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function OnDestroy() {}\n\n\nfunction OnDestroy_tsickle_Closure_declarations() {\n/** @type {?} */\nOnDestroy.prototype.ngOnDestroy;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n *\n * @description\n * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n * instance is destroyed.\n *\n * See {@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface OnDestroy { ngOnDestroy(): void; }\n/**\n *\n * \\@whatItDoes Lifecycle hook that is called after a directive's content has been fully\n * initialized.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n * \n * \\@description \n * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function AfterContentInit() {}\n\n\nfunction AfterContentInit_tsickle_Closure_declarations() {\n/** @type {?} */\nAfterContentInit.prototype.ngAfterContentInit;\n}\n\n\n/**\n *\n * @whatItDoes Lifecycle hook that is called after a directive's content has been fully\n * initialized.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n *\n * @description\n * See {@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface AfterContentInit { ngAfterContentInit(): void; }\n/**\n * \\@whatItDoes Lifecycle hook that is called after every check of a directive's content.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n * \n * \\@description \n * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function AfterContentChecked() {}\n\n\nfunction AfterContentChecked_tsickle_Closure_declarations() {\n/** @type {?} */\nAfterContentChecked.prototype.ngAfterContentChecked;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called after every check of a directive's content.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n *\n * @description\n * See {@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface AfterContentChecked { ngAfterContentChecked(): void; }\n/**\n * \\@whatItDoes Lifecycle hook that is called after a component's view has been fully\n * initialized.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n * \n * \\@description \n * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function AfterViewInit() {}\n\n\nfunction AfterViewInit_tsickle_Closure_declarations() {\n/** @type {?} */\nAfterViewInit.prototype.ngAfterViewInit;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called after a component's view has been fully\n * initialized.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n *\n * @description\n * See {@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface AfterViewInit { ngAfterViewInit(): void; }\n/**\n * \\@whatItDoes Lifecycle hook that is called after every check of a component's view.\n * \\@howToUse \n * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n * \n * \\@description \n * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n * \n * \\@stable\n * @record\n */\nexport function AfterViewChecked() {}\n\n\nfunction AfterViewChecked_tsickle_Closure_declarations() {\n/** @type {?} */\nAfterViewChecked.prototype.ngAfterViewChecked;\n}\n\n\n/**\n * @whatItDoes Lifecycle hook that is called after every check of a component's view.\n * @howToUse\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n *\n * @description\n * See {@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n *\n * @stable\n */\nexport interface AfterViewChecked { ngAfterViewChecked(): void; }\n"]}