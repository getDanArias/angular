{"version":3,"sources":["../../../../../packages/core/src/di/reflective_errors.ts"],"names":[],"mappings":"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","file":"reflective_errors.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {wrappedError} from '../error_handler';\nimport {ERROR_ORIGINAL_ERROR, getOriginalError} from '../errors';\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {ReflectiveInjector} from './reflective_injector';\nimport {ReflectiveKey} from './reflective_key';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys: any[]): any[] {\n  const /** @type {?} */ res: any[] = [];\n  for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys: any[]): string {\n  if (keys.length > 1) {\n    const /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n    const /** @type {?} */ tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n\n  return '';\n}\n/**\n * @record\n */\nexport function InjectionError() {}\n\n\nfunction InjectionError_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectionError.prototype.keys;\n/** @type {?} */\nInjectionError.prototype.injectors;\n/** @type {?} */\nInjectionError.prototype.constructResolvingMessage;\n/** @type {?} */\nInjectionError.prototype.addKey;\n}\n\n\nexport interface InjectionError extends Error {\n  keys: ReflectiveKey[];\n  injectors: ReflectiveInjector[];\n  constructResolvingMessage: (keys: ReflectiveKey[]) => string;\n  addKey(injector: ReflectiveInjector, key: ReflectiveKey): void;\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(\n    injector: ReflectiveInjector, key: ReflectiveKey,\n    constructResolvingMessage: (keys: ReflectiveKey[]) => string,\n    originalError?: Error): InjectionError {\n  const /** @type {?} */ keys = [key];\n  const /** @type {?} */ errMsg = constructResolvingMessage(keys);\n  const /** @type {?} */ error = /** @type {?} */((\n      (originalError ? wrappedError(errMsg, originalError) : Error(errMsg)) as InjectionError));\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(this: InjectionError, injector: ReflectiveInjector, key: ReflectiveKey): void {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  // Note: This updated message won't be reflected in the `.stack` property\n  this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n * \n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    const /** @type {?} */ first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n * \n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n * \n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n * \n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n * \n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(\n    injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n * \n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(\n    injector: ReflectiveInjector, originalException: any, originalStack: any,\n    key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    const /** @type {?} */ first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n * \n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider: any) {\n  return Error(\n      `Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n * \n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n * \n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * \n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n * \n * ```typescript\n * class B {}\n * \n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n * \n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n * \\@stable\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc: Type<any>| Function, params: any[][]): Error {\n  const /** @type {?} */ signature: string[] = [];\n  for (let /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n    const /** @type {?} */ parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error(\n      'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n      signature.join(', ') + '). ' +\n      'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n      stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n * \n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n * \n * ```typescript\n * class A {}\n * \n * var injector = Injector.resolveAndCreate([A]);\n * \n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n * \\@stable\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index: number) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n * \n * ### Example\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(\n    provider1: any, provider2: any): Error {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n"]}