{"version":3,"sources":["../../../../../packages/core/src/debug/debug_node.ts"],"names":[],"mappings":"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","file":"debug_node.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di';\nimport {DebugContext} from '../view/index';\nexport class EventListener {\n/**\n * @param {?} name\n * @param {?} callback\n */\nconstructor(public name: string,\npublic callback: Function){}; }\n\nfunction EventListener_tsickle_Closure_declarations() {\n/** @type {?} */\nEventListener.prototype.name;\n/** @type {?} */\nEventListener.prototype.callback;\n}\n\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport class DebugNode {\n  nativeNode: any;\n  listeners: EventListener[];\n  parent: DebugElement|null;\n/**\n * @param {?} nativeNode\n * @param {?} parent\n * @param {?} _debugContext\n */\nconstructor(nativeNode: any, parent: DebugNode|null,\nprivate _debugContext: DebugContext) {\n    this.nativeNode = nativeNode;\n    if (parent && parent instanceof DebugElement) {\n      parent.addChild(this);\n    } else {\n      this.parent = null;\n    }\n    this.listeners = [];\n  }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._debugContext.injector; }\n/**\n * @return {?}\n */\nget componentInstance(): any { return this._debugContext.component; }\n/**\n * @return {?}\n */\nget context(): any { return this._debugContext.context; }\n/**\n * @return {?}\n */\nget references(): {[key: string]: any} { return this._debugContext.references; }\n/**\n * @return {?}\n */\nget providerTokens(): any[] { return this._debugContext.providerTokens; }\n/**\n * @deprecated since v4\n * @return {?}\n */\nget source(): string { return 'Deprecated since v4'; }\n}\n\nfunction DebugNode_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugNode.prototype.nativeNode;\n/** @type {?} */\nDebugNode.prototype.listeners;\n/** @type {?} */\nDebugNode.prototype.parent;\n/** @type {?} */\nDebugNode.prototype._debugContext;\n}\n\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport class DebugElement extends DebugNode {\n  name: string;\n  properties: {[key: string]: any};\n  attributes: {[key: string]: string | null};\n  classes: {[key: string]: boolean};\n  styles: {[key: string]: string | null};\n  childNodes: DebugNode[];\n  nativeElement: any;\n/**\n * @param {?} nativeNode\n * @param {?} parent\n * @param {?} _debugContext\n */\nconstructor(nativeNode: any, parent: any, _debugContext: DebugContext) {\n    super(nativeNode, parent, _debugContext);\n    this.properties = {};\n    this.attributes = {};\n    this.classes = {};\n    this.styles = {};\n    this.childNodes = [];\n    this.nativeElement = nativeNode;\n  }\n/**\n * @param {?} child\n * @return {?}\n */\naddChild(child: DebugNode) {\n    if (child) {\n      this.childNodes.push(child);\n      child.parent = this;\n    }\n  }\n/**\n * @param {?} child\n * @return {?}\n */\nremoveChild(child: DebugNode) {\n    const /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n    if (childIndex !== -1) {\n      child.parent = null;\n      this.childNodes.splice(childIndex, 1);\n    }\n  }\n/**\n * @param {?} child\n * @param {?} newChildren\n * @return {?}\n */\ninsertChildrenAfter(child: DebugNode, newChildren: DebugNode[]) {\n    const /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n    if (siblingIndex !== -1) {\n      this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n      newChildren.forEach(c => {\n        if (c.parent) {\n          c.parent.removeChild(c);\n        }\n        c.parent = this;\n      });\n    }\n  }\n/**\n * @param {?} refChild\n * @param {?} newChild\n * @return {?}\n */\ninsertBefore(refChild: DebugNode, newChild: DebugNode): void {\n    const /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\n    if (refIndex === -1) {\n      this.addChild(newChild);\n    } else {\n      if (newChild.parent) {\n        newChild.parent.removeChild(newChild);\n      }\n      newChild.parent = this;\n      this.childNodes.splice(refIndex, 0, newChild);\n    }\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\nquery(predicate: Predicate<DebugElement>): DebugElement {\n    const /** @type {?} */ results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\nqueryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const /** @type {?} */ matches: DebugElement[] = [];\n    _queryElementChildren(this, predicate, matches);\n    return matches;\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\nqueryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const /** @type {?} */ matches: DebugNode[] = [];\n    _queryNodeChildren(this, predicate, matches);\n    return matches;\n  }\n/**\n * @return {?}\n */\nget children(): DebugElement[] {\n    return /** @type {?} */(( this.childNodes.filter((node) => node instanceof DebugElement) as DebugElement[]));\n  }\n/**\n * @param {?} eventName\n * @param {?} eventObj\n * @return {?}\n */\ntriggerEventHandler(eventName: string, eventObj: any) {\n    this.listeners.forEach((listener) => {\n      if (listener.name == eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n\nfunction DebugElement_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugElement.prototype.name;\n/** @type {?} */\nDebugElement.prototype.properties;\n/** @type {?} */\nDebugElement.prototype.attributes;\n/** @type {?} */\nDebugElement.prototype.classes;\n/** @type {?} */\nDebugElement.prototype.styles;\n/** @type {?} */\nDebugElement.prototype.childNodes;\n/** @type {?} */\nDebugElement.prototype.nativeElement;\n}\n\n/**\n * \\@experimental\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls: DebugElement[]): any {\n  return debugEls.map((el) => el.nativeElement);\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(\n    element: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[]) {\n  element.childNodes.forEach(node => {\n    if (node instanceof DebugElement) {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      _queryElementChildren(node, predicate, matches);\n    }\n  });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(\n    parentNode: DebugNode, predicate: Predicate<DebugNode>, matches: DebugNode[]) {\n  if (parentNode instanceof DebugElement) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement) {\n        _queryNodeChildren(node, predicate, matches);\n      }\n    });\n  }\n}\n\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst /** @type {?} */ _nativeNodeToDebugNode = new Map<any, DebugNode>();\n/**\n * \\@experimental\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode: any): DebugNode|null {\n  return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes(): DebugNode[] {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node: DebugNode) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node: DebugNode) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n * \n * \\@experimental All debugging apis are currently experimental.\n * @record\n */\nexport function Predicate() {}\n\n\nfunction Predicate_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(value: T): boolean;\n*/\n}\n\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport interface Predicate<T> { (value: T): boolean; }\n"]}