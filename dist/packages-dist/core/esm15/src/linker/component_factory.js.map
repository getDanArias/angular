{"version":3,"sources":["../../../../../packages/core/src/linker/component_factory.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAiBH;;;;;;;;GAQG;AACH,MALC;CAwCA;AAOD;IAEA;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEhD;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEhD;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEhD;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEhD;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,iBAAiB,GAAG,cAAY,CAAC,CAAC;IAEzD;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,aAAa,GAAG,cAAY,CAAC,CAAC;IAErD;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAE/C;;;;;OAKG;IACH,YAAY,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;AACzD,CAAC;AAED;;;GAGG;AACH,MAlEC;CAqBA;AAoED;IAEA;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAEpD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,aAAa,GAAG,cAAY,CAAC,CAAC;IAEzD;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,GAAG,cAAY,CAAC,CAAC;IAE9D;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,cAAY,CAAC,CAAC;IAElD;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAEnD;;;;;;;;OAQG;IACH,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,QAAQ,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,QAAQ,IAAG,CAAC,CAAC;AAC1G,CAAC","file":"component_factory.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\n\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {ViewRef} from './view_ref';\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n * \n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n * \\@stable\n * @abstract\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * Location of the Host Element of this Component Instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The injector on which the component instance exists.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * The instance of the Component.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The {@link ViewRef} of the Host View of this Component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The {@link ChangeDetectorRef} of the Component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The component type.\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Allows to register a callback that will be called when the component is destroyed.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\nfunction ComponentRef_tsickle_Closure_declarations() {\n\n/**\n * Location of the Host Element of this Component Instance.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.location = function() {};\n\n/**\n * The injector on which the component instance exists.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.injector = function() {};\n\n/**\n * The instance of the Component.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.instance = function() {};\n\n/**\n * The {\\@link ViewRef} of the Host View of this Component instance.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.hostView = function() {};\n\n/**\n * The {\\@link ChangeDetectorRef} of the Component instance.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.changeDetectorRef = function() {};\n\n/**\n * The component type.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.componentType = function() {};\n\n/**\n * Destroys the component instance and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\nComponentRef.prototype.destroy = function() {};\n\n/**\n * Allows to register a callback that will be called when the component is destroyed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nComponentRef.prototype.onDestroy = function(callback) {};\n}\n\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ComponentFactory<C> {\n  abstract get selector(): string;\n  abstract get componentType(): Type<any>;\n  /**\n   * selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * the inputs of the component.\n   */\n  abstract get inputs(): {propName: string, templateName: string}[];\n  /**\n   * the outputs of the component.\n   */\n  abstract get outputs(): {propName: string, templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n\nfunction ComponentFactory_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @return {?}\n */\nComponentFactory.prototype.selector = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nComponentFactory.prototype.componentType = function() {};\n\n/**\n * selector for all <ng-content> elements in the component.\n * @abstract\n * @return {?}\n */\nComponentFactory.prototype.ngContentSelectors = function() {};\n\n/**\n * the inputs of the component.\n * @abstract\n * @return {?}\n */\nComponentFactory.prototype.inputs = function() {};\n\n/**\n * the outputs of the component.\n * @abstract\n * @return {?}\n */\nComponentFactory.prototype.outputs = function() {};\n\n/**\n * Creates a new component.\n * @abstract\n * @param {?} injector\n * @param {?=} projectableNodes\n * @param {?=} rootSelectorOrNode\n * @param {?=} ngModule\n * @return {?}\n */\nComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode, ngModule) {};\n}\n\n"]}