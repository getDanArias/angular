"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@angular/compiler/src/util");
var digest_1 = require("../../../src/i18n/digest");
var message_bundle_1 = require("../../../src/i18n/message_bundle");
var xliff2_1 = require("../../../src/i18n/serializers/xliff2");
var html_parser_1 = require("../../../src/ml_parser/html_parser");
var interpolation_config_1 = require("../../../src/ml_parser/interpolation_config");
var HTML = "\n<p i18n-title title=\"translatable attribute\">not translatable</p>\n<p i18n>translatable element <b>with placeholders</b> {{ interpolation}}</p>\n<!-- i18n -->{ count, plural, =0 {<p>test</p>}}<!-- /i18n -->\n<p i18n=\"m|d@@i\">foo</p>\n<p i18n=\"nested\"><b><u>{{interpolation}} Text</u></b></p>\n<p i18n=\"ph names\"><br><img src=\"1.jpg\"><img src=\"2.jpg\"></p>\n<p i18n=\"empty element\">hello <span></span></p>\n<p i18n=\"@@baz\">{ count, plural, =0 { { sex, select, other {<p>deeply nested</p>}} }}</p>\n<p i18n>Test: { count, plural, =0 { { sex, select, other {<p>deeply nested</p>}} } =other {a lot}}</p>\n<p i18n>multi\nlines</p>\n";
var WRITE_XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit id=\"1933478729560469763\">\n      <notes>\n        <note category=\"location\">file.ts:2</note>\n      </notes>\n      <segment>\n        <source>translatable attribute</source>\n      </segment>\n    </unit>\n    <unit id=\"7056919470098446707\">\n      <notes>\n        <note category=\"location\">file.ts:3</note>\n      </notes>\n      <segment>\n        <source>translatable element <pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\">with placeholders</pc> <ph id=\"1\" equiv=\"INTERPOLATION\" disp=\"{{ interpolation}}\"/></source>\n      </segment>\n    </unit>\n    <unit id=\"2981514368455622387\">\n      <notes>\n        <note category=\"location\">file.ts:4</note>\n      </notes>\n      <segment>\n        <source>{VAR_PLURAL, plural, =0 {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">test</pc>} }</source>\n      </segment>\n    </unit>\n    <unit id=\"i\">\n      <notes>\n        <note category=\"description\">d</note>\n        <note category=\"meaning\">m</note>\n        <note category=\"location\">file.ts:5</note>\n      </notes>\n      <segment>\n        <source>foo</source>\n      </segment>\n    </unit>\n    <unit id=\"6440235004920703622\">\n      <notes>\n        <note category=\"description\">nested</note>\n        <note category=\"location\">file.ts:6</note>\n      </notes>\n      <segment>\n        <source><pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\"><pc id=\"1\" equivStart=\"START_UNDERLINED_TEXT\" equivEnd=\"CLOSE_UNDERLINED_TEXT\" type=\"fmt\" dispStart=\"&lt;u&gt;\" dispEnd=\"&lt;/u&gt;\"><ph id=\"2\" equiv=\"INTERPOLATION\" disp=\"{{interpolation}}\"/> Text</pc></pc></source>\n      </segment>\n    </unit>\n    <unit id=\"8779402634269838862\">\n      <notes>\n        <note category=\"description\">ph names</note>\n        <note category=\"location\">file.ts:7</note>\n      </notes>\n      <segment>\n        <source><ph id=\"0\" equiv=\"LINE_BREAK\" type=\"fmt\" disp=\"&lt;br/&gt;\"/><ph id=\"1\" equiv=\"TAG_IMG\" type=\"image\" disp=\"&lt;img/&gt;\"/><ph id=\"2\" equiv=\"TAG_IMG_1\" type=\"image\" disp=\"&lt;img/&gt;\"/></source>\n      </segment>\n    </unit>\n    <unit id=\"6536355551500405293\">\n      <notes>\n        <note category=\"description\">empty element</note>\n        <note category=\"location\">file.ts:8</note>\n      </notes>\n      <segment>\n        <source>hello <pc id=\"0\" equivStart=\"START_TAG_SPAN\" equivEnd=\"CLOSE_TAG_SPAN\" type=\"other\" dispStart=\"&lt;span&gt;\" dispEnd=\"&lt;/span&gt;\"></pc></source>\n      </segment>\n    </unit>\n    <unit id=\"baz\">\n      <notes>\n        <note category=\"location\">file.ts:9</note>\n      </notes>\n      <segment>\n        <source>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">deeply nested</pc>} } } }</source>\n      </segment>\n    </unit>\n    <unit id=\"6997386649824869937\">\n      <notes>\n        <note category=\"location\">file.ts:10</note>\n      </notes>\n      <segment>\n        <source>Test: <ph id=\"0\" equiv=\"ICU\" disp=\"{ count, plural, =0 {...} =other {...}}\"/></source>\n      </segment>\n    </unit>\n    <unit id=\"5229984852258993423\">\n      <notes>\n        <note category=\"location\">file.ts:10</note>\n      </notes>\n      <segment>\n        <source>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">deeply nested</pc>} } } =other {a lot} }</source>\n      </segment>\n    </unit>\n    <unit id=\"2340165783990709777\">\n      <notes>\n        <note category=\"location\">file.ts:11,12</note>\n      </notes>\n      <segment>\n        <source>multi\nlines</source>\n      </segment>\n    </unit>\n  </file>\n</xliff>\n";
var LOAD_XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\" trgLang=\"fr\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit id=\"1933478729560469763\">\n      <notes>\n        <note category=\"location\">file.ts:2</note>\n      </notes>\n      <segment>\n        <source>translatable attribute</source>\n        <target>etubirtta elbatalsnart</target>\n      </segment>\n    </unit>\n    <unit id=\"7056919470098446707\">\n      <notes>\n        <note category=\"location\">file.ts:3</note>\n      </notes>\n      <segment>\n        <source>translatable element <pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\">with placeholders</pc> <ph id=\"1\" equiv=\"INTERPOLATION\" disp=\"{{ interpolation}}\"/></source>\n        <target><ph id=\"1\" equiv=\"INTERPOLATION\" disp=\"{{ interpolation}}\"/> <pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\">sredlohecalp htiw</pc> tnemele elbatalsnart</target>\n      </segment>\n    </unit>\n    <unit id=\"2981514368455622387\">\n      <notes>\n        <note category=\"location\">file.ts:4</note>\n      </notes>\n      <segment>\n        <source>{VAR_PLURAL, plural, =0 {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">test</pc>} }</source>\n        <target>{VAR_PLURAL, plural, =0 {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">TEST</pc>} }</target>\n      </segment>\n    </unit>\n    <unit id=\"i\">\n      <notes>\n        <note category=\"description\">d</note>\n        <note category=\"meaning\">m</note>\n        <note category=\"location\">file.ts:5</note>\n      </notes>\n      <segment>\n        <source>foo</source>\n        <target>oof</target>\n      </segment>\n    </unit>\n    <unit id=\"6440235004920703622\">\n      <notes>\n        <note category=\"description\">nested</note>\n        <note category=\"location\">file.ts:6</note>\n      </notes>\n      <segment>\n        <source><pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\"><pc id=\"1\" equivStart=\"START_UNDERLINED_TEXT\" equivEnd=\"CLOSE_UNDERLINED_TEXT\" type=\"fmt\" dispStart=\"&lt;u&gt;\" dispEnd=\"&lt;/u&gt;\"><ph id=\"2\" equiv=\"INTERPOLATION\" disp=\"{{interpolation}}\"/> Text</pc></pc></source>\n        <target><pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\"><pc id=\"1\" equivStart=\"START_UNDERLINED_TEXT\" equivEnd=\"CLOSE_UNDERLINED_TEXT\" type=\"fmt\" dispStart=\"&lt;u&gt;\" dispEnd=\"&lt;/u&gt;\">txeT <ph id=\"2\" equiv=\"INTERPOLATION\" disp=\"{{interpolation}}\"/></pc></pc></target>\n      </segment>\n    </unit>\n    <unit id=\"8779402634269838862\">\n      <notes>\n        <note category=\"description\">ph names</note>\n        <note category=\"location\">file.ts:7</note>\n      </notes>\n      <segment>\n        <source><ph id=\"0\" equiv=\"LINE_BREAK\" type=\"fmt\" disp=\"&lt;br/&gt;\"/><ph id=\"1\" equiv=\"TAG_IMG\" type=\"image\" disp=\"&lt;img/&gt;\"/><ph id=\"2\" equiv=\"TAG_IMG_1\" type=\"image\" disp=\"&lt;img/&gt;\"/></source>\n        <target><ph id=\"2\" equiv=\"TAG_IMG_1\" type=\"image\" disp=\"&lt;img/&gt;\"/><ph id=\"1\" equiv=\"TAG_IMG\" type=\"image\" disp=\"&lt;img/&gt;\"/><ph id=\"0\" equiv=\"LINE_BREAK\" type=\"fmt\" disp=\"&lt;br/&gt;\"/></target>\n      </segment>\n    </unit>\n    <unit id=\"6536355551500405293\">\n      <notes>\n        <note category=\"description\">empty element</note>\n        <note category=\"location\">file.ts:8</note>\n      </notes>\n      <segment>\n        <source>hello <pc id=\"0\" equivStart=\"START_TAG_SPAN\" equivEnd=\"CLOSE_TAG_SPAN\" type=\"other\" dispStart=\"&lt;span&gt;\" dispEnd=\"&lt;/span&gt;\"></pc></source>\n        <target><pc id=\"0\" equivStart=\"START_TAG_SPAN\" equivEnd=\"CLOSE_TAG_SPAN\" type=\"other\" dispStart=\"&lt;span&gt;\" dispEnd=\"&lt;/span&gt;\"></pc> olleh</target>\n      </segment>\n    </unit>\n    <unit id=\"baz\">\n      <notes>\n        <note category=\"location\">file.ts:9</note>\n      </notes>\n      <segment>\n        <source>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">deeply nested</pc>} } } }</source>\n        <target>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">profond\u00E9ment imbriqu\u00E9</pc>} } } }</target>\n      </segment>\n    </unit>\n    <unit id=\"6997386649824869937\">\n      <notes>\n        <note category=\"location\">file.ts:10</note>\n      </notes>\n      <segment>\n        <source>Test: <ph id=\"0\" equiv=\"ICU\" disp=\"{ count, plural, =0 {...} =other {...}}\"/></source>\n        <target>Test: <ph id=\"0\" equiv=\"ICU\" disp=\"{ count, plural, =0 {...} =other {...}}\"/></target>\n      </segment>\n    </unit>\n    <unit id=\"5229984852258993423\">\n      <notes>\n        <note category=\"location\">file.ts:10</note>\n      </notes>\n      <segment>\n        <source>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">deeply nested</pc>} } } =other {a lot} }</source>\n        <target>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id=\"0\" equivStart=\"START_PARAGRAPH\" equivEnd=\"CLOSE_PARAGRAPH\" type=\"other\" dispStart=\"&lt;p&gt;\" dispEnd=\"&lt;/p&gt;\">profond\u00E9ment imbriqu\u00E9</pc>} } } =other {beaucoup} }</target>\n      </segment>\n    </unit>\n    <unit id=\"2340165783990709777\">\n      <notes>\n        <note category=\"location\">file.ts:11,12</note>\n      </notes>\n      <segment>\n        <source>multi\nlines</source>\n        <target>multi\nlignes</target>\n      </segment>\n    </unit>\n  </file>\n</xliff>\n";
function main() {
    var serializer = new xliff2_1.Xliff2();
    function toXliff(html, locale) {
        if (locale === void 0) { locale = null; }
        var catalog = new message_bundle_1.MessageBundle(new html_parser_1.HtmlParser, [], {}, locale);
        catalog.updateFromTemplate(html, 'file.ts', interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG);
        return catalog.write(serializer);
    }
    function loadAsMap(xliff) {
        var i18nNodesByMsgId = serializer.load(xliff, 'url').i18nNodesByMsgId;
        var msgMap = {};
        Object.keys(i18nNodesByMsgId)
            .forEach(function (id) { return msgMap[id] = digest_1.serializeNodes(i18nNodesByMsgId[id]).join(''); });
        return msgMap;
    }
    describe('XLIFF 2.0 serializer', function () {
        describe('write', function () {
            it('should write a valid xliff 2.0 file', function () { expect(toXliff(HTML)).toEqual(WRITE_XLIFF); });
            it('should write a valid xliff 2.0 file with a source language', function () { expect(toXliff(HTML, 'fr')).toContain('srcLang="fr"'); });
        });
        describe('load', function () {
            it('should load XLIFF files', function () {
                expect(loadAsMap(LOAD_XLIFF)).toEqual({
                    '1933478729560469763': 'etubirtta elbatalsnart',
                    '7056919470098446707': '<ph name="INTERPOLATION"/> <ph name="START_BOLD_TEXT"/>sredlohecalp htiw<ph name="CLOSE_BOLD_TEXT"/> tnemele elbatalsnart',
                    '2981514368455622387': '{VAR_PLURAL, plural, =0 {[<ph name="START_PARAGRAPH"/>, TEST, <ph name="CLOSE_PARAGRAPH"/>]}}',
                    'i': 'oof',
                    '6440235004920703622': '<ph name="START_BOLD_TEXT"/><ph name="START_UNDERLINED_TEXT"/>txeT <ph name="INTERPOLATION"/><ph name="CLOSE_UNDERLINED_TEXT"/><ph name="CLOSE_BOLD_TEXT"/>',
                    '8779402634269838862': '<ph name="TAG_IMG_1"/><ph name="TAG_IMG"/><ph name="LINE_BREAK"/>',
                    '6536355551500405293': '<ph name="START_TAG_SPAN"/><ph name="CLOSE_TAG_SPAN"/> olleh',
                    'baz': '{VAR_PLURAL, plural, =0 {[{VAR_SELECT, select, other {[<ph name="START_PARAGRAPH"/>, profondément imbriqué, <ph name="CLOSE_PARAGRAPH"/>]}},  ]}}',
                    '6997386649824869937': 'Test: <ph name="ICU"/>',
                    '5229984852258993423': '{VAR_PLURAL, plural, =0 {[{VAR_SELECT, select, other {[<ph' +
                        ' name="START_PARAGRAPH"/>, profondément imbriqué, <ph name="CLOSE_PARAGRAPH"/>]}},  ]}, =other {[beaucoup]}}',
                    '2340165783990709777': "multi\nlignes"
                });
            });
            it('should return the target locale', function () { expect(serializer.load(LOAD_XLIFF, 'url').locale).toEqual('fr'); });
        });
        describe('structure errors', function () {
            it('should throw when a wrong xliff version is used', function () {
                var XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"deadbeef\">\n        <source/>\n        <target/>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>";
                expect(function () {
                    loadAsMap(XLIFF);
                }).toThrowError(/The XLIFF file version 1.2 is not compatible with XLIFF 2.0 serializer/);
            });
            it('should throw when an unit has no translation', function () {
                var XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit id=\"missingtarget\">\n      <segment>\n        <source/>\n      </segment>\n    </unit>\n  </file>\n</xliff>";
                expect(function () {
                    loadAsMap(XLIFF);
                }).toThrowError(/Message missingtarget misses a translation/);
            });
            it('should throw when an unit has no id attribute', function () {
                var XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit>\n      <segment>\n        <source/>\n        <target/>\n      </segment>\n    </unit>\n  </file>\n</xliff>";
                expect(function () { loadAsMap(XLIFF); }).toThrowError(/<unit> misses the "id" attribute/);
            });
            it('should throw on duplicate unit id', function () {
                var XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit id=\"deadbeef\">\n      <segment>\n        <source/>\n        <target/>\n      </segment>\n    </unit>\n    <unit id=\"deadbeef\">\n      <segment>\n        <source/>\n        <target/>\n      </segment>\n    </unit>\n  </file>\n</xliff>";
                expect(function () {
                    loadAsMap(XLIFF);
                }).toThrowError(/Duplicated translations for msg deadbeef/);
            });
        });
        describe('message errors', function () {
            it('should throw on unknown message tags', function () {
                var XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit id=\"deadbeef\">\n      <segment>\n        <source/>\n        <target><b>msg should contain only ph and pc tags</b></target>\n      </segment>\n    </unit>\n  </file>\n</xliff>";
                expect(function () { loadAsMap(XLIFF); })
                    .toThrowError(new RegExp(util_1.escapeRegExp("[ERROR ->]<b>msg should contain only ph and pc tags</b>")));
            });
            it('should throw when a placeholder misses an id attribute', function () {
                var XLIFF = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"2.0\" xmlns=\"urn:oasis:names:tc:xliff:document:2.0\" srcLang=\"en\">\n  <file original=\"ng.template\" id=\"ngi18n\">\n    <unit id=\"deadbeef\">\n      <segment>\n        <source/>\n        <target><ph/></target>\n      </segment>\n    </unit>\n  </file>\n</xliff>";
                expect(function () {
                    loadAsMap(XLIFF);
                }).toThrowError(new RegExp(util_1.escapeRegExp("<ph> misses the \"equiv\" attribute")));
            });
        });
    });
}
exports.main = main;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGxpZmYyX3NwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21waWxlci90ZXN0L2kxOG4vc2VyaWFsaXplcnMveGxpZmYyX3NwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCxtREFBd0Q7QUFFeEQsbURBQXdEO0FBQ3hELG1FQUErRDtBQUMvRCwrREFBNEQ7QUFDNUQsa0VBQThEO0FBQzlELG9GQUF5RjtBQUV6RixJQUFNLElBQUksR0FBRyxzb0JBWVosQ0FBQztBQUVGLElBQU0sV0FBVyxHQUFHLG91SUFtR25CLENBQUM7QUFFRixJQUFNLFVBQVUsR0FBRyxpdU1BK0dsQixDQUFDO0FBRUY7SUFDRSxJQUFNLFVBQVUsR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO0lBRWhDLGlCQUFpQixJQUFZLEVBQUUsTUFBNEI7UUFBNUIsdUJBQUEsRUFBQSxhQUE0QjtRQUN6RCxJQUFNLE9BQU8sR0FBRyxJQUFJLDhCQUFhLENBQUMsSUFBSSx3QkFBVSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsbURBQTRCLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsbUJBQW1CLEtBQWE7UUFDdkIsSUFBQSxpRUFBZ0IsQ0FBa0M7UUFFekQsSUFBTSxNQUFNLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2FBQ3hCLE9BQU8sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyx1QkFBYyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVB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