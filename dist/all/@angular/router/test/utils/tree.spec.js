"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tree_1 = require("../../src/utils/tree");
describe('tree', function () {
    it('should return the root of the tree', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, []));
        expect(t.root).toEqual(1);
    });
    it('should return the parent of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.parent(1)).toEqual(null);
        expect(t.parent(2)).toEqual(1);
    });
    it('should return the parent of a node (second child)', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, []), new tree_1.TreeNode(3, [])]));
        expect(t.parent(1)).toEqual(null);
        expect(t.parent(3)).toEqual(1);
    });
    it('should return the children of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.children(1)).toEqual([2]);
        expect(t.children(2)).toEqual([]);
    });
    it('should return the first child of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.firstChild(1)).toEqual(2);
        expect(t.firstChild(2)).toEqual(null);
    });
    it('should return the siblings of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, []), new tree_1.TreeNode(3, [])]));
        expect(t.siblings(2)).toEqual([3]);
        expect(t.siblings(1)).toEqual([]);
    });
    it('should return the path to the root', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.pathFromRoot(2)).toEqual([1, 2]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcm91dGVyL3Rlc3QvdXRpbHMvdHJlZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBRUgsNkNBQW9EO0FBRXBELFFBQVEsQ0FBQyxNQUFNLEVBQUU7SUFDZixFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3RELElBQU0sQ0FBQyxHQUFHLElBQUksV0FBSSxDQUNkLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxDQUFDLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMs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