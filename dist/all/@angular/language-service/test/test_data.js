"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toh = {
    'foo.ts': "export * from './app/app.component.ts';",
    app: {
        'app.component.ts': "import { Component } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n@Component({\n  selector: 'my-app',\n  template: `~{empty}\n    <~{start-tag}h~{start-tag-after-h}1~{start-tag-h1} ~{h1-after-space}>~{h1-content} {{~{sub-start}title~{sub-end}}}</h1>\n    ~{after-h1}<h2>{{~{h2-hero}hero.~{h2-name}name}} details!</h2>\n    <div><label>id: </label>{{~{label-hero}hero.~{label-id}id}}</div>\n    <div ~{div-attributes}>\n      <label>name: </label>\n    </div>\n    &~{entity-amp}amp;\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n  private internal: string;\n}",
        'main.ts': "\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent }   from './app.component';\nimport { CaseIncompleteOpen, CaseMissingClosing, CaseUnknown, Pipes, TemplateReference, NoValueAttribute,\n         AttributeBinding, StringModel,PropertyBinding, EventBinding, TwoWayBinding, EmptyInterpolation,\n         ForOfEmpty, ForLetIEqual, ForOfLetEmpty, ForUsingComponent, References, TestComponent} from './parsing-cases';\nimport { WrongFieldReference, WrongSubFieldReference, PrivateReference, ExpectNumericType, LowercasePipe } from './expression-cases';\nimport { UnknownPeople, UnknownEven, UnknownTrackBy } from './ng-for-cases';\nimport { ShowIf } from './ng-if-cases';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [AppComponent, CaseIncompleteOpen, CaseMissingClosing, CaseUnknown, Pipes, TemplateReference, NoValueAttribute,\n    AttributeBinding, StringModel, PropertyBinding, EventBinding, TwoWayBinding, EmptyInterpolation, ForOfEmpty, ForOfLetEmpty,\n    ForLetIEqual, ForUsingComponent, References, TestComponent, WrongFieldReference, WrongSubFieldReference, PrivateReference,\n    ExpectNumericType, UnknownPeople, UnknownEven, UnknownTrackBy, ShowIf, LowercasePipe]\n})\nexport class AppModule {}\n\ndeclare function bootstrap(v: any): void;\n\nbootstrap(AppComponent);\n",
        'parsing-cases.ts': "\nimport {Component, Directive, Input, Output, EventEmitter} from '@angular/core';\nimport {Hero} from './app.component';\n\n@Component({template: '<h1>Some <~{incomplete-open-lt}a~{incomplete-open-a} ~{incomplete-open-attr} text</h1>'})\nexport class CaseIncompleteOpen {}\n\n@Component({template: '<h1>Some <a> ~{missing-closing} text</h1>'})\nexport class CaseMissingClosing {}\n\n@Component({template: '<h1>Some <unknown ~{unknown-element}> text</h1>'})\nexport class CaseUnknown {}\n\n@Component({template: '<h1>{{data | ~{before-pipe}lowe~{in-pipe}rcase~{after-pipe} }}'})\nexport class Pipes {\n  data = 'Some string';\n}\n\n@Component({template: '<h1 h~{no-value-attribute}></h1>'})\nexport class NoValueAttribute {}\n\n\n@Component({template: '<h1 model=\"~{attribute-binding-model}test\"></h1>'})\nexport class AttributeBinding {\n  test: string;\n}\n\n@Component({template: '<h1 [model]=\"~{property-binding-model}test\"></h1>'})\nexport class PropertyBinding {\n  test: string;\n}\n\n@Component({template: '<h1 (model)=\"~{event-binding-model}modelChanged()\"></h1>'})\nexport class EventBinding {\n  test: string;\n\n  modelChanged() {}\n}\n\n@Component({template: '<h1 [(model)]=\"~{two-way-binding-model}test\"></h1>'})\nexport class TwoWayBinding {\n  test: string;\n}\n\n@Directive({selector: '[string-model]'})\nexport class StringModel {\n  @Input() model: string;\n  @Output() modelChanged: EventEmitter<string>;\n}\n\ninterface Person {\n  name: string;\n  age: number\n}\n\n@Component({template: '<div *ngFor=\"~{for-empty}\"></div>'})\nexport class ForOfEmpty {}\n\n@Component({template: '<div *ngFor=\"let ~{for-let-empty}\"></div>'})\nexport class ForOfLetEmpty {}\n\n@Component({template: '<div *ngFor=\"let i = ~{for-let-i-equal}\"></div>'})\nexport class ForLetIEqual {}\n\n@Component({template: '<div *ngFor=\"~{for-let}let ~{for-person}person ~{for-of}of ~{for-people}people\"> <span>Name: {{~{for-interp-person}person.~{for-interp-name}name}}</span><span>Age: {{person.~{for-interp-age}age}}</span></div>'})\nexport class ForUsingComponent {\n  people: Person[];\n}\n\n@Component({template: '<div #div> <test-comp #test1> {{~{test-comp-content}}} {{test1.~{test-comp-after-test}name}} {{div.~{test-comp-after-div}.innerText}} </test-comp> </div> <test-comp #test2></test-comp>'})\nexport class References {}\n\n@Component({selector: 'test-comp', template: '<div>Testing: {{name}}</div>'})\nexport class TestComponent {\n  \u00AB@Input('\u2206tcName\u2206') name = 'test';\u00BB\n  \u00AB@Output('\u2206test\u2206') testEvent = new EventEmitter();\u00BB\n}\n\n@Component({templateUrl: 'test.ng'})\nexport class TemplateReference {\n  title = 'Some title';\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n  anyValue: any;\n  myClick(event: any) {\n\n  }\n}\n\n@Component({template: '{{~{empty-interpolation}}}'})\nexport class EmptyInterpolation {\n  title = 'Some title';\n  subTitle = 'Some sub title';\n}\n",
        'expression-cases.ts': "\nimport {Component} from '@angular/core';\n\nexport interface Person {\n  name: string;\n  age: number;\n}\n\n@Component({template: '{{~{foo}foo~{foo-end}}}'})\nexport class WrongFieldReference {\n  bar = 'bar';\n}\n\n@Component({template: '{{~{nam}person.nam~{nam-end}}}'})\nexport class WrongSubFieldReference {\n  person: Person = { name: 'Bob', age: 23 };\n}\n\n@Component({template: '{{~{myField}myField~{myField-end}}}'})\nexport class PrivateReference {\n  private myField = 'My Field';\n}\n\n@Component({template: '{{~{mod}\"a\" ~{mod-end}% 2}}'})\nexport class ExpectNumericType {}\n\n@Component({template: '{{ (name | lowercase).~{string-pipe}substring }}'})\nexport class LowercasePipe {\n  name: string;\n}\n",
        'ng-for-cases.ts': "\nimport {Component} from '@angular/core';\n\nexport interface Person {\n  name: string;\n  age: number;\n}\n\n@Component({template: '<div *ngFor=\"let person of ~{people_1}people_1~{people_1-end}\"> <span>{{person.name}}</span> </div>'})\nexport class UnknownPeople {}\n\n@Component({template: '<div ~{even_1}*ngFor=\"let person of people; let e = even_1\"~{even_1-end}><span>{{person.name}}</span> </div>'})\nexport class UnknownEven {\n  people: Person[];\n}\n\n@Component({template: '<div *ngFor=\"let person of people; trackBy ~{trackBy_1}trackBy_1~{trackBy_1-end}\"><span>{{person.name}}</span> </div>'})\nexport class UnknownTrackBy {\n  people: Person[];\n}\n",
        'ng-if-cases.ts': "\nimport {Component} from '@angular/core';\n\n@Component({template: '<div ~{implicit}*ngIf=\"show; let l=unknown\"~{implicit-end}>Showing now!</div>'})\nexport class ShowIf {\n  show = false;\n}\n",
        'test.ng': "~{empty}\n    <~{start-tag}h~{start-tag-after-h}1~{start-tag-h1} ~{h1-after-space}>~{h1-content} {{~{sub-start}title~{sub-end}}}</h1>\n    ~{after-h1}<h2>{{~{h2-hero}hero.~{h2-name}name}} details!</h2>\n    <div><label>id: </label>{{~{label-hero}hero.~{label-id}id}}</div>\n    <div ~{div-attributes}>\n      <label>name: </label>\n    </div>\n    &~{entity-amp}amp;\n    "
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbGFuZ3VhZ2Utc2VydmljZS90ZXN0L3Rlc3RfZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUlVLFFBQUEsR0FBRyxHQUFHO0lBQ2pCLFFBQVEsRUFBRSx5Q0FBeUM7SUFDbkQsR0FBRyxFQUFFO1FBQ0gsa0JBQWtCLEVBQUUsMHFCQTBCdEI7UUFDRSxTQUFTLEVBQUUsMjRDQXdCZDtRQUNHLGtCQUFrQixFQUFFLHc0RkFnR3ZCO1FBQ0cscUJBQXFCLEVBQUUsbXRCQThCMUI7UUFDRyxpQkFBaUIsRUFBRSw2cEJBb0J0QjtRQUNHLGdCQUFnQixFQUFFLHNNQU9yQjtRQUNHLFNBQVMsRUFBRSxzWEFRVjtLQUNGO0NBQ0YsQ0FBQyJ9