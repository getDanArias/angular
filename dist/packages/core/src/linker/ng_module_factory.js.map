{"version":3,"sources":["../../../../../packages/core/src/linker/ng_module_factory.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAcH;;;;;;;;GAQG;AACH,MAJC;CA0BA;AAMD;IAEA;;;;OAIG;IACH,WAAW,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAE/C;;;;;OAKG;IACH,WAAW,CAAC,SAAS,CAAC,wBAAwB,GAAG,cAAY,CAAC,CAAC;IAE/D;;;;OAIG;IACH,WAAW,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAY,CAAC,CAAC;IAE/C;;;;OAIG;IACH,WAAW,CAAC,SAAS,CAAC,OAAO,GAAG,cAAY,CAAC,CAAC;IAE9C;;;;;OAKG;IACH,WAAW,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;AACxD,CAAC;AAED;;GAEG;AACH,MAAM,kCAAiC,CAAC;AAGxC;IACA,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,oBAAoB,CAAC;AACnD,CAAC;AAQD;;;GAGG;AACH,MAxDC;CAGA;AA0DD;IAEA;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,UAAU,GAAG,cAAY,CAAC,CAAC;IAErD;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,cAAc,IAAG,CAAC,CAAC;AAC/D,CAAC","file":"ng_module_factory.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n * \n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class NgModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the NgModule.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * The ComponentFactoryResolver to get hold of the ComponentFactories\n   * declared in the `entryComponents` property of the module.\n   */\n  abstract get componentFactoryResolver(): ComponentFactoryResolver;\n\n  /**\n   * The NgModule instance.\n   */\n  abstract get instance(): T;\n\n  /**\n   * Destroys the module instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Allows to register a callback that will be called when the module is destroyed.\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nfunction NgModuleRef_tsickle_Closure_declarations() {\n\n/**\n * The injector that contains all of the providers of the NgModule.\n * @abstract\n * @return {?}\n */\nNgModuleRef.prototype.injector = function() {};\n\n/**\n * The ComponentFactoryResolver to get hold of the ComponentFactories\n * declared in the `entryComponents` property of the module.\n * @abstract\n * @return {?}\n */\nNgModuleRef.prototype.componentFactoryResolver = function() {};\n\n/**\n * The NgModule instance.\n * @abstract\n * @return {?}\n */\nNgModuleRef.prototype.instance = function() {};\n\n/**\n * Destroys the module instance and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\nNgModuleRef.prototype.destroy = function() {};\n\n/**\n * Allows to register a callback that will be called when the module is destroyed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nNgModuleRef.prototype.onDestroy = function(callback) {};\n}\n\n/**\n * @record\n */\nexport function InternalNgModuleRef() {}\n\n\nfunction InternalNgModuleRef_tsickle_Closure_declarations() {\n/** @type {?} */\nInternalNgModuleRef.prototype._bootstrapComponents;\n}\n\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n}\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgModuleFactory<T> {\n  abstract get moduleType(): Type<T>;\n  abstract create(parentInjector: Injector|null): NgModuleRef<T>;\n}\n\nfunction NgModuleFactory_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @return {?}\n */\nNgModuleFactory.prototype.moduleType = function() {};\n\n/**\n * @abstract\n * @param {?} parentInjector\n * @return {?}\n */\nNgModuleFactory.prototype.create = function(parentInjector) {};\n}\n\n"]}