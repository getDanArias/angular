{"version":3,"sources":["../../../../../packages/core/src/linker/compiler.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,UAAE,EAAW,cAAA,EAA+B,MAAA,OAAA,CAAA;AAYnD;;;;GAIG;AACH,MAHC;IAID;;;OAGG;IACH,YANa,eAAmC,EACnC,kBAA0C;QAD1C,oBAAA,GAAA,eAAA,CAAmC;QACnC,uBAAA,GAAA,kBAAA,CAA0C;IAAG,CAAA;CACzD;AASD;IACA,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,eAAe,CAAC;IACvD,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC1D,CAAC;AAED;;GAEG;AACH;IACE,MAhBM,IAAI,KAAA,CAAM,gCAAC,CAAgC,CAAC;AAiBpD,CAAC;AACD;;;;;;;;;GASG;AACH,MAdC;IAeD;;;;;;OAMG;IACH,iBAjBG,CAAmB,UAAoB,IAAwB,MAAM,WAAA,EAAY,CAAE,CAAC,CAAA;IAkBvF;;;;;OAKG;IACH,kBAnBG,CAAoB,UAAoB,IAAiC,MAAM,WAAA,EAAY,CAAE,CAAC,CAAA;IAoBjG;;;;;OAKG;IACH,iCArBG,CAAmC,UAAoB;QAsBtD,MArBM,WAAA,EAAY,CAAE;IAsBtB,CAAC;IACH;;;;;OAKG;IACH,kCAvBG,CAAoC,UAAoB;QAyBvD,MAvBM,WAAA,EAAY,CAAE;IAwBtB,CAAC;IACH;;;;;;;;;OASG;IACH,qBAxBG,CAAqB,SAAoB,IAAc,MAAM,WAAA,EAAY,CAAE,CAAC,CAAA;IAyB/E;;;OAGG;IACH,UAxBG,KAAkB,CAAA;IAyBrB;;;;OAIG;IACH,aAzBG,CAAa,IAAe,IAAE,CAAA;;AAC1B,mBAAA,GAA+C;IA0BtD,EAzBE,IAAA,EAAM,UAAA,EAhDN;CA0ED,CAzBC;AA0BF,kBAAkB;AAxBX,uBAAA,GAA4F,MAAM,EA0BxG,CAzBC;AA4BF;IACA,gBAAgB;IAChB,QAAQ,CAAC,UAAU,CAAC;IACpB;;;OAHC;IAOD,QAAQ,CAAC,cANE,CAAA;AAOX,CANC;AA2BD;;;;GAIG;AACH,MAnCC,CANM,MAAA,gBAAA,CAAM,gBAAA,GAAmB,IAAI,cAAA,CAAiC,iBAAE,CAAiB,CAAC;AA0CzF;;;;;GAKG;AACH,MAzCC;CAEA;AA2CD;IAEA;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,cAAc,GAAG,UAAS,OAAO,IAAG,CAAC,CAAC;AAChE,CAAC","file":"compiler.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, StaticProvider} from '../di';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n * \n * \\@experimental\n */\nexport class ModuleWithComponentFactories<T> {\n/**\n * @param {?} ngModuleFactory\n * @param {?} componentFactories\n */\nconstructor(\npublic ngModuleFactory: NgModuleFactory<T>,\npublic componentFactories: ComponentFactory<any>[]) {}\n}\n\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n/** @type {?} */\nModuleWithComponentFactories.prototype.ngModuleFactory;\n/** @type {?} */\nModuleWithComponentFactories.prototype.componentFactories;\n}\n\n/**\n * @return {?}\n */\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n * \n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * \\@stable\n */\nexport class Compiler {\n/**\n * Compiles the given NgModule and all of its components. All templates of the components listed\n * in `entryComponents` have to be inlined.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> { throw _throwError(); }\n/**\n * Compiles the given NgModule and all of its components\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> { throw _throwError(); }\n/**\n * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n/**\n * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n/**\n * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n * the template of the given component.\n * This is used by the `upgrade` library to compile the appropriate transclude content\n * in the AngularJS wrapper component.\n * \n * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.\n * @param {?} component\n * @return {?}\n */\ngetNgContentSelectors(component: Type<any>): string[] { throw _throwError(); }\n/**\n * Clears all caches.\n * @return {?}\n */\nclearCache(): void {}\n/**\n * Clears the cache for the given component/ngModule.\n * @param {?} type\n * @return {?}\n */\nclearCacheFor(type: Type<any>) {}\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction Compiler_tsickle_Closure_declarations() {\n/** @type {?} */\nCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompiler.ctorParameters;\n}\n\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  /**\n   * @deprecated since v4 this option has no effect anymore.\n   */\n  useDebug?: boolean,\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  // Whether to support the `<template>` tag and the `template` attribute to define angular\n  // templates. They have been deprecated in 4.x, `<ng-template>` should be used instead.\n  enableLegacyTemplate?: boolean,\n};\n/**\n * Token to provide CompilerOptions in the platform injector.\n * \n * \\@experimental\n */\nexport const /** @type {?} */ COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n/**\n * A factory for creating a Compiler\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n\nfunction CompilerFactory_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?=} options\n * @return {?}\n */\nCompilerFactory.prototype.createCompiler = function(options) {};\n}\n\n"]}