{"version":3,"sources":["../../../../../packages/core/src/linker/ng_module_factory_loader.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH;;;;GAIG;AACH,MALC;CAEA;AAOD;IAEA;;;;OAIG;IACH,qBAAqB,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,IAAI,IAAG,CAAC,CAAC;AACzD,CAAC;AAGD,IAAI,gBAAgB,CAhBhB,eAAA,GAAkB,IAAI,GAAA,EAAiC,CAAG;AAiB9D;;;;;;GAMG;AACH,MAlBC,gCAAqC,EAAI,EAAQ,OAA6B;IAmB7E,MAAM,gBAAgB,CAlBhB,QAAA,GAAW,eAAA,CAAgB,GAAC,CAAG,EAAC,CAAE,CAAC;IAmBzC,EAAE,CAAC,CAAC,QAlBC,CAAQ,CAAC,CAAA;QAmBZ,MAlBM,IAAI,KAAA,CAAM,mCAAC,EAmBD,MAAM,QAlBC,CAAQ,UAAC,CAAU,IAAC,OAAI,OAAO,CAAO,UAAC,CAAU,IAAC,EAAI,CAAE,CAAC;IAmBlF,CAAC;IACD,eAAe,CAlBC,GAAC,CAAG,EAAC,EAAG,OAAA,CAAQ,CAAC;AAmBnC,CAAC;AACD;;GAEG;AACH,MApBC;IAqBC,eAAe,GApBG,IAAI,GAAA,EAAiC,CAAG;AAqB5D,CAAC;AACD;;;;;;;GAOG;AACH,MArBC,2BAAgC,EAAI;IAsBnC,MAAM,gBAAgB,CArBhB,OAAA,GAAU,eAAA,CAAgB,GAAC,CAAG,EAAC,CAAE,CAAC;IAsBxC,EAAE,CAAC,CAAC,CArBC,OAAC,CAAO;QAAC,MAAM,IAAI,KAAA,CAAM,qBAAC,EAAqB,SAAE,CAAS,CAAC;IAsBhE,MAAM,CArBC,OAAA,CAAQ;AAsBjB,CAAC","file":"ng_module_factory_loader.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n * Used to load ng module factories.\n * \\@stable\n * @abstract\n */\nexport abstract class NgModuleFactoryLoader {\n  abstract load(path: string): Promise<NgModuleFactory<any>>;\n}\n\nfunction NgModuleFactoryLoader_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} path\n * @return {?}\n */\nNgModuleFactoryLoader.prototype.load = function(path) {};\n}\n\n\nlet /** @type {?} */ moduleFactories = new Map<string, NgModuleFactory<any>>();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id: string, factory: NgModuleFactory<any>) {\n  const /** @type {?} */ existing = moduleFactories.get(id);\n  if (existing) {\n    throw new Error(`Duplicate module registered for ${id\n                    } - ${existing.moduleType.name} vs ${factory.moduleType.name}`);\n  }\n  moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n  moduleFactories = new Map<string, NgModuleFactory<any>>();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id: string): NgModuleFactory<any> {\n  const /** @type {?} */ factory = moduleFactories.get(id);\n  if (!factory) throw new Error(`No module with ID ${id} loaded`);\n  return factory;\n}\n"]}