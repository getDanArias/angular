{"version":3,"sources":["../../../../packages/core/src/type.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH;;;;;;;;;GASG;AAfH,AAgBA;;;GAbG,CAaH,MAEC,CAAM,MAAA,gBAAA,CAAM,IAAA,GAAO,QAAA,CAAS;AAD7B;;;GAGG;AACH,MADC,iBAAsB,CAAG;IAExB,MAAM,CADC,OAAO,CAAA,KAAM,UAAA,CAAW;AAEjC,CAAC","file":"type.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * \\@whatItDoes Represents a type that a Component or other object is instances of.\n * \n * \\@description \n * \n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n * \n * \\@stable\n */\nexport const /** @type {?} */ Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\nexport interface Type<T> extends Function { new (...args: any[]): T; }\n"]}