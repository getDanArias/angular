{"version":3,"sources":["../../../../../packages/core/src/di/forward_ref.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH,OALO,EAAA,SAAE,EAAS,MAAA,SAAA,CAAA;AAMlB;;;;;;;;GAQG;AACH,MAAM,2BAA0B,CAAC;AAGjC;IACA;;MAEE;AACF,CAAC;AAcD;;;;;;;;;;;;;GAaG;AACH,MAxBC,qBAA0B,YAAc;IAyBvC,CAAkB,CAxBZ,YAAC,CAAA,CAAY,CAAC,eAAC,GAAiB,UAAA,CAAW;IAyBjD,CAAkB,CAxBZ,YAAC,CAAA,CAAY,CAAC,QAAC,GAAU,cAAa,MAAA,CAAO,SAAA,CAAU,IAAC,EAAI,CAAE,CAAC,CAAC,CAAA,CAAE;IAyBxE,MAAM,CAxBC,CAAA,CAAY,CAAK,YAAC,CAAA,CAAA,CAAY,CAAC;AAyBxC,CAAC;AACD;;;;;;;;;;;;;GAaG;AACH,MAzBC,4BAAiC,IAAM;IA0BtC,EAAE,CAAC,CAAC,OAzBO,IAAA,KAAS,UAAA,IAAc,IAAA,CAAK,cAAC,CAAc,iBAAC,CAAiB;QA0BpE,IAAI,CAzBC,eAAC,KAAmB,UAAA,CAAW,CAAC,CAAA;QA0BvC,MAAM,CAzBC,CAAA,CAAe,IAAC,CAAA,CAAI,EAAC,CAAE;IA0BhC,CAAC;IAzBC,IAAA,CAAK,CAAA;QA0BL,MAAM,CAzBC,IAAA,CAAK;IA0Bd,CAAC;AACH,CAAC","file":"forward_ref.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\nimport {stringify} from '../util';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n * \n * ### Example\n * \n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@experimental\n * @record\n */\nexport function ForwardRefFn() {}\n\n\nfunction ForwardRefFn_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(): any;\n*/\n}\n\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @experimental\n */\nexport interface ForwardRefFn { (): any; }\n/**\n * Allows to refer to references which are not yet defined.\n * \n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared,\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\n * yet defined.\n * \n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  ( /** @type {?} */((<any>forwardRefFn))).__forward_ref__ = forwardRef;\n  ( /** @type {?} */((<any>forwardRefFn))).toString = function() { return stringify(this()); };\n  return ( /** @type {?} */((<Type<any>> /** @type {?} */((<any>forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n * \n * Acts as the identity function when given a non-forward-ref value.\n * \n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n * \n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n * \n * See: {\\@link forwardRef}\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type: any): any {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n      type.__forward_ref__ === forwardRef) {\n    return ( /** @type {?} */((<ForwardRefFn>type)))();\n  } else {\n    return type;\n  }\n}\n"]}