{"version":3,"sources":["../../../../../packages/core/src/view/errors.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,mBAAE,EAAoB,YAAA,EAAc,eAAA,EAAgB,MAAA,WAAA,CAAA;AAO3D;;;;;;GAMG;AACH,MAXC,sDAYG,OAXS,EAAc,QAAU,EAAK,SAAW,EAAK,YAAc;IAYtE,IAAI,gBAAgB,CAXhB,GAAA,GAYA,8GAA8G,QAXC,sBAAQ,SAAsB,IAAS,CAAI;IAY9J,EAAE,CAAC,CAAC,YAXC,CAAY,CAAC,CAAA;QAYhB,GAAG;YACC,qGAAqG;gBACrG,mDAAmD,CAXC;IAY1D,CAAC;IACD,MAAM,CAXC,cAAA,CAAe,GAAC,EAAI,OAAA,CAAQ,CAAC;AAYtC,CAAC;AACD;;;;GAIG;AACH,MAfC,gCAAqC,GAAK,EAAK,OAAS;IAgBvD,EAAE,CAAC,CAAC,CAfC,CAAC,GAAC,YAAc,KAAA,CAAM,CAAC,CAAC,CAAA;QAgB3B,0DAA0D;QAC1D,sDAAsD;QACtD,GAAG,GAfG,IAAI,KAAA,CAAM,GAAC,CAAG,QAAC,EAAQ,CAAE,CAAC;IAgBlC,CAAC;IACD,gBAAgB,CAfC,GAAC,EAAI,OAAA,CAAQ,CAAC;IAgB/B,MAAM,CAfC,GAAA,CAAI;AAgBb,CAAC;AACD;;;;GAIG;AACH,MAnBC,yBAA8B,GAAK,EAAQ,OAAS;IAoBnD,MAAM,gBAAgB,CAnBhB,GAAA,GAAM,IAAI,KAAA,CAAM,GAAC,CAAG,CAAC;IAoB3B,gBAAgB,CAnBC,GAAC,EAAI,OAAA,CAAQ,CAAC;IAoB/B,MAAM,CAnBC,GAAA,CAAI;AAoBb,CAAC;AACD;;;;GAIG;AACH,0BAvB0B,GAAK,EAAO,OAAS;IAwB7C,CAAkB,CAAE,GAvBZ,CAAA,CAAI,CAAC,mBAAC,CAAmB,GAAG,OAAA,CAAQ;IAwB5C,CAAkB,CAAE,GAvBZ,CAAA,CAAI,CAAC,YAAC,CAAY,GAAG,OAAA,CAAQ,QAAC,CAAQ,IAAC,CAAI,OAAC,CAAO,CAAC;AAwB9D,CAAC;AACD;;;GAGG;AACH,MA1BC,2BAAgC,GAAK;IA2BpC,MAAM,CA1BC,CAAA,CAAE,eAAC,CAAe,GAAC,CAAG,CAAC;AA2BhC,CAAC;AACD;;;GAGG;AACH,MA7BC,6BAAkC,MAAQ;IA8BzC,MAAM,CA7BC,IAAI,KAAA,CAAM,wDAAC,MAAwD,EAAM,CAAE,CAAC;AA8BrF,CAAC","file":"errors.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext} from '../errors';\nimport {DebugContext, ViewState} from './types';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(\n    context: DebugContext, oldValue: any, currValue: any, isFirstCheck: boolean): Error {\n  let /** @type {?} */ msg =\n      `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook ?`;\n  }\n  return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err: any, context: DebugContext): Error {\n  if (!(err instanceof Error)) {\n    // errors that are not Error instances don't have a stack,\n    // so it is ok to wrap them into a new Error object...\n    err = new Error(err.toString());\n  }\n  _addDebugContext(err, context);\n  return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg: string, context: DebugContext): Error {\n  const /** @type {?} */ err = new Error(msg);\n  _addDebugContext(err, context);\n  return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err: Error, context: DebugContext) {\n  ( /** @type {?} */((err as any)))[ERROR_DEBUG_CONTEXT] = context;\n  ( /** @type {?} */((err as any)))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err: Error): boolean {\n  return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action: string): Error {\n  return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n"]}