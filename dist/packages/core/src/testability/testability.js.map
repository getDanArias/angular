{"version":3,"sources":["../../../../../packages/core/src/testability/testability.ts"],"names":[],"mappings":"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","file":"testability.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @experimental\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nexport class Testability implements PublicTestability {\n/**\n * \\@internal\n */\n_pendingCount: number = 0;\n/**\n * \\@internal\n */\n_isZoneStable: boolean = true;\n/**\n * Whether any work was done since the last 'whenStable' callback. This is\n * useful to detect if this could have potentially destabilized another\n * component while it is stabilizing.\n * \\@internal\n */\n_didWork: boolean = false;\n/**\n * \\@internal\n */\n_callbacks: Function[] = [];\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { this._watchAngularEvents(); }\n/**\n * \\@internal\n * @return {?}\n */\n_watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n/**\n * @return {?}\n */\nincreasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\ndecreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\nisStable(): boolean {\n    return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          ( /** @type {?} */((this._callbacks.pop())))(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Not Ready\n      this._didWork = true;\n    }\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nwhenStable(callback: Function): void {\n    this._callbacks.push(callback);\n    this._runCallbacksIfReady();\n  }\n/**\n * @return {?}\n */\ngetPendingRequestCount(): number { return this._pendingCount; }\n/**\n * @deprecated use findProviders\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindBindings(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n/**\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction Testability_tsickle_Closure_declarations() {\n/** @type {?} */\nTestability.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestability.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._pendingCount;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._isZoneStable;\n/**\n * Whether any work was done since the last 'whenStable' callback. This is\n * useful to detect if this could have potentially destabilized another\n * component while it is stabilizing.\n * \\@internal\n * @type {?}\n */\nTestability.prototype._didWork;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._callbacks;\n/** @type {?} */\nTestability.prototype._ngZone;\n}\n\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nexport class TestabilityRegistry {\n/**\n * \\@internal\n */\n_applications = new Map<any, Testability>();\nconstructor() { _testabilityGetter.addToWindow(this); }\n/**\n * @param {?} token\n * @param {?} testability\n * @return {?}\n */\nregisterApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n/**\n * @param {?} elem\n * @return {?}\n */\ngetTestability(elem: any): Testability|null { return this._applications.get(elem) || null; }\n/**\n * @return {?}\n */\ngetAllTestabilities(): Testability[] { return Array.from(this._applications.values()); }\n/**\n * @return {?}\n */\ngetAllRootElements(): any[] { return Array.from(this._applications.keys()); }\n/**\n * @param {?} elem\n * @param {?=} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction TestabilityRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nTestabilityRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestabilityRegistry.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nTestabilityRegistry.prototype._applications;\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n * \n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n * @record\n */\nexport function GetTestability() {}\n\n\nfunction GetTestability_tsickle_Closure_declarations() {\n/** @type {?} */\nGetTestability.prototype.addToWindow;\n/** @type {?} */\nGetTestability.prototype.findTestabilityInTree;\n}\n\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\nclass _NoopGetTestability implements GetTestability {\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {}\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet /** @type {?} */ _testabilityGetter: GetTestability = new _NoopGetTestability();\n"]}