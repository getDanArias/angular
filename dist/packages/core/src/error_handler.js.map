{"version":3,"sources":["../../../../packages/core/src/error_handler.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,oBAAE,EAAqB,eAAA,EAAiB,cAAA,EAAgB,gBAAA,EAAiB,MAAA,UAAA,CAAA;AAMhF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAFC;IAOD;;OAEG;IACH;QACM;;;WAGG;QACH,mBAJsB;QAR5B;;WAEG;QACH,aAFG,GAAmB,OAAA,CAAQ;IAOO,CAAA;IAKrC;;;OAGG;IACH,WAPG,CAAW,KAAO;QAQjB,MAAM,gBAAgB,CAPhB,aAAA,GAAgB,IAAA,CAAK,kBAAC,CAAkB,KAAC,CAAK,CAAC;QAQrD,MAAM,gBAAgB,CAPhB,OAAA,GAAU,IAAA,CAAK,YAAC,CAAY,KAAC,CAAK,CAAC;QAQzC,6EAA6E;QAC7E,wEAAwE;QACxE,MAAM,gBAAgB,CAPhB,WAAA,GAAc,cAAA,CAAe,KAAC,CAAK,CAAC;QAS1C,WAAW,CAPC,IAAC,CAAI,QAAC,EAAS,OAAA,EAAS,KAAA,CAAM,CAAC;QAQ3C,EAAE,CAAC,CAAC,aAPC,CAAa,CAAC,CAAA;YAQjB,WAAW,CAPC,IAAC,CAAI,QAAC,EAAS,gBAAA,EAAkB,aAAA,CAAc,CAAC;QAQ9D,CAAC;QACD,EAAE,CAAC,CAAC,OAPC,CAAO,CAAC,CAAA;YAQX,WAAW,CAPC,IAAC,CAAI,QAAC,EAAS,eAAA,EAAiB,OAAA,CAAQ,CAAC;QAQvD,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,YAVG,CAAY,KAAO;QAWlB,EAAE,CAAC,CAAC,KAVC,CAAK,CAAC,CAAA;YAWT,MAAM,CAVC,eAAA,CAAgB,KAAC,CAAK,GAAG,eAAA,CAAgB,KAAC,CAAK;gBAWtB,IAAI,CAVC,YAAC,CAAY,gBAAC,CAAgB,KAAC,CAAK,CAAC,CAAC;QAW7E,CAAC;QAED,MAAM,CAVC,IAAA,CAAK;IAWd,CAAC;IACH;;;;OAIG;IACH,kBAbG,CAAkB,KAAO;QAcxB,IAAI,gBAAgB,CAbhB,CAAA,GAAI,gBAAA,CAAiB,KAAC,CAAK,CAAC;QAchC,OAAO,CAbC,IAAI,gBAAA,CAAiB,CAAC,CAAC,EAAE,CAAA;YAc/B,CAAC,GAbG,gBAAA,CAAiB,CAAC,CAAC,CAAC;QAc1B,CAAC;QAED,MAAM,CAbC,CAAA,CAAE;IAcX,CAAC;CAZF;AAeD;IACA;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;AAChC,CAAC;AAED;;;;GAIG;AACH,MA1BC,uBAA4B,OAAS,EAAQ,aAAe;IA2B3D,MAAM,gBAAgB,CA1BhB,GAAA,GA2BF,GAAG,OA1BC,eAAO,aAAe,YAAwB,KAAA,GAAQ,aAAA,CAAc,OAAC,GAAQ,aAAc,EAAA,CAAG;IA2BtG,MAAM,gBAAgB,CA1BhB,KAAA,GAAQ,KAAA,CAAM,GAAC,CAAG,CAAC;IA2BzB,CAAkB,CAAE,KA1BV,CAAA,CAAI,CAAC,oBAAC,CAAoB,GAAG,aAAA,CAAc;IA2BrD,MAAM,CA1BC,KAAA,CAAM;AA2Bf,CAAC","file":"error_handler.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError} from './errors';\n/**\n * \\@whatItDoes Provides a hook for centralized exception handling.\n * \n * \\@description \n * \n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n * \n * ### Example\n * \n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n * \n * \\@NgModule({ \n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n * \n * \\@stable\n */\nexport class ErrorHandler {\n/**\n * \\@internal\n */\n_console: Console = console;\n/**\n * @param {?=} deprecatedParameter\n */\nconstructor(\n      /**\n       * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never\n       * rethrow.\n       */\n      deprecatedParameter?: boolean) {}\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any): void {\n    const /** @type {?} */ originalError = this._findOriginalError(error);\n    const /** @type {?} */ context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const /** @type {?} */ errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findOriginalError(error: Error): any {\n    let /** @type {?} */ e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n}\n\nfunction ErrorHandler_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nErrorHandler.prototype._console;\n}\n\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message: string, originalError: any): Error {\n  const /** @type {?} */ msg =\n      `${message} caused by: ${originalError instanceof Error ? originalError.message: originalError }`;\n  const /** @type {?} */ error = Error(msg);\n  ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n"]}