{"version":3,"file":"perform-compile.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform-compile.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isSyntaxError, syntaxError} from '@angular/compiler';\nimport {createBundleIndexHost} from '@angular/tsc-wrapped';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as api from './transformers/api';\nimport * as ng from './transformers/entry_points';\n\nconst TS_EXT = /\\.ts$/;\n\nexport type Diagnostics = ts.Diagnostic[] | api.Diagnostic[];\n\nfunction isTsDiagnostics(diagnostics: any): diagnostics is ts.Diagnostic[] {\n  return diagnostics && diagnostics[0] && (diagnostics[0].file || diagnostics[0].messageText);\n}\n\nfunction formatDiagnostics(cwd: string, diags: Diagnostics): string {\n  if (diags && diags.length) {\n    if (isTsDiagnostics(diags)) {\n      return ts.formatDiagnostics(diags, {\n        getCurrentDirectory: () => cwd,\n        getCanonicalFileName: fileName => fileName,\n        getNewLine: () => ts.sys.newLine\n      });\n    } else {\n      return diags\n          .map(d => {\n            let res = api.DiagnosticCategory[d.category];\n            if (d.span) {\n              res +=\n                  ` at ${d.span.start.file.url}(${d.span.start.line + 1},${d.span.start.col + 1})`;\n            }\n            if (d.span && d.span.details) {\n              res += `: ${d.span.details}, ${d.message}\\n`;\n            } else {\n              res += `: ${d.message}\\n`;\n            }\n            return res;\n          })\n          .join();\n    }\n  } else\n    return '';\n}\n\n/**\n * Throw a syntax error exception with a message formatted for output\n * if the args parameter contains diagnostics errors.\n *\n * @param cwd   The directory to report error as relative to.\n * @param args  A list of potentially empty diagnostic errors.\n */\nexport function throwOnDiagnostics(cwd: string, ...args: Diagnostics[]) {\n  if (args.some(diags => !!(diags && diags[0]))) {\n    throw syntaxError(args.map(diags => {\n                            if (diags && diags[0]) {\n                              return formatDiagnostics(cwd, diags);\n                            }\n                          })\n                          .filter(message => !!message)\n                          .join(''));\n  }\n}\n\nexport function readConfiguration(\n    project: string, basePath: string,\n    checkFunc: (cwd: string, ...args: any[]) => void = throwOnDiagnostics,\n    existingOptions?: ts.CompilerOptions) {\n  // Allow a directory containing tsconfig.json as the project value\n  // Note, TS@next returns an empty array, while earlier versions throw\n  const projectFile =\n      fs.lstatSync(project).isDirectory() ? path.join(project, 'tsconfig.json') : project;\n  let {config, error} = ts.readConfigFile(projectFile, ts.sys.readFile);\n\n  if (error) checkFunc(basePath, [error]);\n  const parseConfigHost = {\n    useCaseSensitiveFileNames: true,\n    fileExists: fs.existsSync,\n    readDirectory: ts.sys.readDirectory,\n    readFile: ts.sys.readFile\n  };\n  const parsed = ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);\n\n  checkFunc(basePath, parsed.errors);\n\n  // Default codegen goes to the current directory\n  // Parsed options are already converted to absolute paths\n  const ngOptions = config.angularCompilerOptions || {};\n  // Ignore the genDir option\n  ngOptions.genDir = basePath;\n\n  return {parsed, ngOptions};\n}\n\n/**\n * Returns an object with two properties:\n * - `errorCode` is 0 when the compilation was successful,\n * - `result` is an `EmitResult` when the errorCode is 0, `undefined` otherwise.\n */\nexport function performCompilation(\n    basePath: string, files: string[], options: ts.CompilerOptions, ngOptions: api.CompilerOptions,\n    consoleError: (s: string) => void = console.error,\n    checkFunc: (cwd: string, ...args: any[]) => void = throwOnDiagnostics,\n    tsCompilerHost?: ts.CompilerHost): {errorCode: number, result?: api.EmitResult} {\n  const [major, minor] = ts.version.split('.');\n\n  if (+major < 2 || (+major === 2 && +minor < 3)) {\n    throw new Error('Must use TypeScript > 2.3 to have transformer support');\n  }\n\n  try {\n    ngOptions.basePath = basePath;\n    ngOptions.genDir = basePath;\n\n    let host = tsCompilerHost || ts.createCompilerHost(options, true);\n    host.realpath = p => p;\n\n    const rootFileNames = files.map(f => path.normalize(f));\n\n    const addGeneratedFileName = (fileName: string) => {\n      if (fileName.startsWith(basePath) && TS_EXT.exec(fileName)) {\n        rootFileNames.push(fileName);\n      }\n    };\n\n    if (ngOptions.flatModuleOutFile && !ngOptions.skipMetadataEmit) {\n      const {host: bundleHost, indexName, errors} =\n          createBundleIndexHost(ngOptions, rootFileNames, host);\n      if (errors) checkFunc(basePath, errors);\n      if (indexName) addGeneratedFileName(indexName);\n      host = bundleHost;\n    }\n\n    const ngHostOptions = {...options, ...ngOptions};\n    const ngHost = ng.createHost({tsHost: host, options: ngHostOptions});\n\n    const ngProgram =\n        ng.createProgram({rootNames: rootFileNames, host: ngHost, options: ngHostOptions});\n\n    // Check parameter diagnostics\n    checkFunc(basePath, ngProgram.getTsOptionDiagnostics(), ngProgram.getNgOptionDiagnostics());\n\n    // Check syntactic diagnostics\n    checkFunc(basePath, ngProgram.getTsSyntacticDiagnostics());\n\n    // Check TypeScript semantic and Angular structure diagnostics\n    checkFunc(\n        basePath, ngProgram.getTsSemanticDiagnostics(), ngProgram.getNgStructuralDiagnostics());\n\n    // Check Angular semantic diagnostics\n    checkFunc(basePath, ngProgram.getNgSemanticDiagnostics());\n\n    const result = ngProgram.emit({\n      emitFlags: api.EmitFlags.Default |\n          ((ngOptions.skipMetadataEmit || ngOptions.flatModuleOutFile) ? 0 : api.EmitFlags.Metadata)\n    });\n\n    checkFunc(basePath, result.diagnostics);\n\n    return {errorCode: 0, result};\n  } catch (e) {\n    if (isSyntaxError(e)) {\n      consoleError(e.message);\n      return {errorCode: 1};\n    }\n\n    throw e;\n  }\n}"]}