{"version":3,"sources":["../../../../../../packages/common/http/testing/src/backend.ts"],"names":[],"mappings":"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","file":"backend.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {startWith} from 'rxjs/operator/startWith';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n * \n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n * \n * \\@experimental\n */\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n/**\n * List of pending requests which have not yet been expected.\n */\n\nprivate open: TestRequest[] = [];\n/**\n * Handle an incoming request by queueing it in the list of open requests.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const /** @type {?} */ testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next( /** @type {?} */(({ type: HttpEventType.Sent } as HttpEvent<any>)));\n      return () => { testReq._cancelled = true; };\n    });\n  }\n/**\n * Helper function to search for requests in the list of open requests.\n * @param {?} match\n * @return {?}\n */\n\nprivate _match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n/**\n * Search for requests in the list of open requests, and return all that match\n * without asserting anything about the number of matches.\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const /** @type {?} */ results = this._match(match);\n    results.forEach(result => {\n      const /** @type {?} */ index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n/**\n * Expect that a single outstanding request matches the given matcher, and return\n * it.\n * \n * Requests returned through this API will no longer be in the list of open requests,\n * and thus will not match twice.\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectOne(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest {\n    description = description || this.descriptionFromMatcher(match);\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(\n          `Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found none.`);\n    }\n    return matches[0];\n  }\n/**\n * Expect that no outstanding requests match the given matcher, and throw an error\n * if any do.\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectNone(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      void {\n    description = description || this.descriptionFromMatcher(match);\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(\n          `Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n    }\n  }\n/**\n * Validate that there are no outstanding requests.\n * @param {?=} opts\n * @return {?}\n */\nverify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let /** @type {?} */ open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const /** @type {?} */ requests = open.map(testReq => {\n                             const /** @type {?} */ url = testReq.request.urlWithParams.split('?')[0];\n                             const /** @type {?} */ method = testReq.request.method;\n                             return `${method} ${url}`;\n                           })\n                           .join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n/**\n * @param {?} matcher\n * @return {?}\n */\n\nprivate descriptionFromMatcher(matcher: string|RequestMatch|\n                                 ((req: HttpRequest<any>) => boolean)): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const /** @type {?} */ method = matcher.method || '(any)';\n      const /** @type {?} */ url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientTestingBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientTestingBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientTestingBackend.ctorParameters;\n/**\n * List of pending requests which have not yet been expected.\n * @type {?}\n */\nHttpClientTestingBackend.prototype.open;\n}\n\n"]}