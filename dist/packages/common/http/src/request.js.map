{"version":3,"sources":["../../../../../packages/common/http/src/request.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,WAAE,EAAW,MAAA,WAAA,CAAA;AAMpB,OALO,EAAA,UAAE,EAAU,MAAA,UAAA,CAAA;AAMnB;;;;;GAKG;AACH,6BAA4B,CAAC;AAG7B;IACA,0BAA0B;IAC1B,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;IAClC,0BAA0B;IAC1B,eAAe,CAAC,SAAS,CAAC,cAAc,CAAC;IACzC,0BAA0B;IAC1B,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;IACjC,0BAA0B;IAC1B,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC;IACvC,0BAA0B;IAC1B,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC;AAC1C,CAAC;AAeD;;;;GAIG;AACH,uBA5BuB,MAAQ;IA6B7B,MAAM,CAAC,CAAC,MA5BC,CAAM,CAAC,CAAA;QA6Bd,KA5BK,QAAA,CAAS;QA6Bd,KA5BK,KAAA,CAAM;QA6BX,KA5BK,MAAA,CAAO;QA6BZ,KA5BK,SAAA,CAAU;QA6Bf,KA5BK,OAAA;YA6BH,MAAM,CA5BC,KAAA,CAAM;QA6Bf;YACE,MAAM,CA5BC,IAAA,CAAK;IA6BhB,CAAC;AACH,CAAC;AACD;;;;;;GAMG;AACH,uBA7BuB,KAAO;IA8B5B,MAAM,CA7BC,OAAO,WAAA,KAAgB,WAAA,IAAe,KAAA,YAAiB,WAAA,CAAY;AA8B5E,CAAC;AACD;;;;;;GAMG;AACH,gBA9BgB,KAAO;IA+BrB,MAAM,CA9BC,OAAO,IAAA,KAAS,WAAA,IAAe,KAAA,YAAiB,IAAA,CAAK;AA+B9D,CAAC;AACD;;;;;;GAMG;AACH,oBA/BoB,KAAO;IAgCzB,MAAM,CA/BC,OAAO,QAAA,KAAa,WAAA,IAAe,KAAA,YAAiB,QAAA,CAAS;AAgCtE,CAAC;AACD;;;;;;;;;GASG;AACH,MA9BC;IA+GD;;;;;OAKG;IACH,YACM,MA7CQ,EAAiB,GAAK,EAAQ,KAMnC,EA8CH,MAMC;QA1DwB,QAAA,GAAA,GAAA,CAAK;QA1CpC;;;;;;WAMG;QA7BQ,SAAA,GAAe,IAAA,CAAK;QAmC/B;;;;;WAKG;QA3BQ,mBAAA,GAA0B,KAAA,CAAM;QA6B3C;;WAEG;QA1BQ,oBAAA,GAA2B,KAAA,CAAM;QA4B5C;;;;;WAKG;QAzBQ,iBAAA,GAAmD,MAAA,CAAO;QAkGjE,IAAI,CA7CC,MAAC,GAAQ,MAAA,CAAO,WAAC,EAAW,CAAE;QA8CnC,oEAAoE;QACpE,mBAAmB;QACnB,IAAI,gBAAgB,CA7ChB,OAA0B,CAAS;QA+CvC,wEAAwE;QACxE,+DAA+D;QAC/D,EAAE,CAAC,CAAC,aA7CC,CAAa,IAAC,CAAI,MAAC,CAAM,IAAI,CAAA,CAAE,MAAC,CAAM,CAAC,CAAA;YA8C1C,sDAAsD;YACtD,IAAI,CA7CC,IAAC,GAAI,CAAE,KAAS,CAAA,IAAK,IAAA,CAAK;YA8C/B,OAAO,GA7CG,MAAA,CAAO;QA8CnB,CAAC;QA7CC,IAAA,CAAK,CAAA;YA8CL,yEAAyE;YACzE,OAAO,GA7CC,CAAE,KAAS,CAAA,CAAgB;QA8CrC,CAAC;QAED,+CAA+C;QAC/C,EAAE,CAAC,CAAC,OA7CC,CAAO,CAAC,CAAA;YA8CX,gDAAgD;YAChD,IAAI,CA7CC,cAAC,GAAgB,CAAA,CAAE,OAAC,CAAO,cAAC,CAAc;YA8C/C,IAAI,CA7CC,eAAC,GAAiB,CAAA,CAAE,OAAC,CAAO,eAAC,CAAe;YA+CjD,+DAA+D;YAC/D,EAAE,CAAC,CAAC,CA7CC,CAAC,OAAC,CAAO,YAAC,CAAY,CAAC,CAAA;gBA8C1B,IAAI,CA7CC,YAAC,GAAc,OAAA,CAAQ,YAAC,CAAY;YA8C3C,CAAC;YAED,wCAAwC;YACxC,EAAE,CAAC,CAAC,CA7CC,CAAC,OAAC,CAAO,OAAC,CAAO,CAAC,CAAA;gBA8CrB,IAAI,CA7CC,OAAC,GAAS,OAAA,CAAQ,OAAC,CAAO;YA8CjC,CAAC;YAED,EAAE,CAAC,CAAC,CA7CC,CAAC,OAAC,CAAO,MAAC,CAAM,CAAC,CAAA;gBA8CpB,IAAI,CA7CC,MAAC,GAAQ,OAAA,CAAQ,MAAC,CAAM;YA8C/B,CAAC;QACH,CAAC;QAED,2EAA2E;QAC3E,EAAE,CAAC,CAAC,CA7CC,IAAC,CAAI,OAAC,CAAO,CAAC,CAAA;YA8CjB,IAAI,CA7CC,OAAC,GAAS,IAAI,WAAA,EAAY,CAAE;QA8CnC,CAAC;QAED,uFAAuF;QACvF,EAAE,CAAC,CAAC,CA7CC,IAAC,CAAI,MAAC,CAAM,CAAC,CAAA;YA8ChB,IAAI,CA7CC,MAAC,GAAQ,IAAI,UAAA,EAAW,CAAE;YA8C/B,IAAI,CA7CC,aAAC,GAAe,GAAA,CAAI;QA8C3B,CAAC;QA7CC,IAAA,CAAK,CAAA;YA8CL,6EAA6E;YAC7E,MAAM,gBAAgB,CA7ChB,MAAA,GAAS,IAAA,CAAK,MAAC,CAAM,QAAC,EAAQ,CAAE;YA8CtC,EAAE,CAAC,CAAC,MA7CC,CAAM,MAAC,KAAU,CAAA,CAAE,CAAC,CAAA;gBA8CvB,yEAAyE;gBACzE,IAAI,CA7CC,aAAC,GAAe,GAAA,CAAI;YA8C3B,CAAC;YA7CC,IAAA,CAAK,CAAA;gBA8CL,4DAA4D;gBAC5D,MAAM,gBAAgB,CA7ChB,IAAA,GAAO,GAAA,CAAI,OAAC,CAAO,GAAC,CAAG,CAAC;gBA8C9B,+BAA+B;gBAC/B,8DAA8D;gBAC9D,4DAA4D;gBAC5D,oCAAoC;gBACpC,iEAAiE;gBACjE,oEAAoE;gBACpE,wCAAwC;gBACxC,MAAM,gBAAgB,CA7ChB,GAAA,GAAc,IAAA,KAAS,CAAA,CAAE,GAAG,GAAA,GAAM,CAAA,IAAE,GAAM,GAAA,CAAI,MAAC,GAAQ,CAAA,GAAI,GAAA,GAAM,EAAA,CAAG,CAAC;gBA8C3E,IAAI,CA7CC,aAAC,GAAe,GAAA,GAAM,GAAA,GAAM,MAAA,CAAO;YA8C1C,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,aA7CG;QA8CC,kDAAkD;QAClD,EAAE,CAAC,CAAC,IA7CC,CAAI,IAAC,KAAQ,IAAA,CAAK,CAAC,CAAA;YA8CtB,MAAM,CA7CC,IAAA,CAAK;QA8Cd,CAAC;QACD,iEAAiE;QACjE,oCAAoC;QACpC,EAAE,CAAC,CAAC,aA7CC,CAAa,IAAC,CAAI,IAAC,CAAI,IAAI,MAAA,CAAO,IAAC,CAAI,IAAC,CAAI,IAAI,UAAA,CAAW,IAAC,CAAI,IAAC,CAAI;YA8CtE,OA7CO,IAAA,CAAK,IAAC,KAAQ,QAAA,CAAS,CAAC,CAAA;YA8CjC,MAAM,CA7CC,IAAA,CAAK,IAAC,CAAI;QA8CnB,CAAC;QACD,iEAAiE;QACjE,EAAE,CAAC,CAAC,IA7CC,CAAI,IAAC,YAAe,UAAA,CAAW,CAAC,CAAA;YA8CnC,MAAM,CA7CC,IAAA,CAAK,IAAC,CAAI,QAAC,EAAQ,CAAE;QA8C9B,CAAC;QACD,+EAA+E;QAC/E,EAAE,CAAC,CAAC,OA7CO,IAAA,CAAK,IAAC,KAAQ,QAAA,IAAY,OAAO,IAAA,CAAK,IAAC,KAAQ,SAAA;YA8CtD,KAAK,CA7CC,OAAC,CAAO,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;YA8C5B,MAAM,CA7CC,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,IAAC,CAAI,CAAC;QA8CnC,CAAC;QACD,+CAA+C;QAC/C,MAAM,CA7CC,CAAA,CAAA,IAAE,CAAI,IAAQ,CAAA,CAAI,CAAC,QAAC,EAAQ,CAAE;IA8CvC,CAAC;IACH;;;;;;OAMG;IACH,uBA7CG;QA8CC,qCAAqC;QACrC,EAAE,CAAC,CAAC,IA7CC,CAAI,IAAC,KAAQ,IAAA,CAAK,CAAC,CAAA;YA8CtB,MAAM,CA7CC,IAAA,CAAK;QA8Cd,CAAC;QACD,iEAAiE;QACjE,EAAE,CAAC,CAAC,UA7CC,CAAU,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;YA8CzB,MAAM,CA7CC,IAAA,CAAK;QA8Cd,CAAC;QACD,iEAAiE;QACjE,2BAA2B;QAC3B,EAAE,CAAC,CAAC,MA7CC,CAAM,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;YA8CrB,MAAM,CA7CC,IAAA,CAAK,IAAC,CAAI,IAAC,IAAO,IAAA,CAAK;QA8ChC,CAAC;QACD,wEAAwE;QACxE,EAAE,CAAC,CAAC,aA7CC,CAAa,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;YA8C5B,MAAM,CA7CC,IAAA,CAAK;QA8Cd,CAAC;QACD,0EAA0E;QAC1E,mCAAmC;QACnC,EAAE,CAAC,CAAC,OA7CO,IAAA,CAAK,IAAC,KAAQ,QAAA,CAAS,CAAC,CAAA;YA8CjC,MAAM,CA7CC,YAAA,CAAa;QA8CtB,CAAC;QACD,mDAAmD;QACnD,EAAE,CAAC,CAAC,IA7CC,CAAI,IAAC,YAAe,UAAA,CAAW,CAAC,CAAA;YA8CnC,MAAM,CA7CC,iDAAA,CAAkD;QA8C3D,CAAC;QACD,wDAAwD;QACxD,EAAE,CAAC,CAAC,OA7CO,IAAA,CAAK,IAAC,KAAQ,QAAA,IAAY,OAAO,IAAA,CAAK,IAAC,KAAQ,QAAA;YA8CtD,KAAK,CA7CC,OAAC,CAAO,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;YA8C5B,MAAM,CA7CC,kBAAA,CAAmB;QA8C5B,CAAC;QACD,6BAA6B;QAC7B,MAAM,CA7CC,IAAA,CAAK;IA8Cd,CAAC;IA2BH;;;OAGG;IACH,KAjDG,CAAK,SAWF,EAAA;QAkDF,mEAAmE;QACnE,uCAAuC;QACvC,MAAM,gBAAgB,CAjDhB,MAAA,GAAS,MAAA,CAAO,MAAC,IAAS,IAAA,CAAK,MAAC,CAAM;QAkD5C,MAAM,gBAAgB,CAjDhB,GAAA,GAAM,MAAA,CAAO,GAAC,IAAM,IAAA,CAAK,GAAC,CAAG;QAkDnC,MAAM,gBAAgB,CAjDhB,YAAA,GAAe,MAAA,CAAO,YAAC,IAAe,IAAA,CAAK,YAAC,CAAY;QAmD9D,qEAAqE;QACrE,qEAAqE;QACrE,+DAA+D;QAC/D,YAAY;QACZ,MAAM,gBAAgB,CAjDhB,IAAA,GAAO,CAAA,MAAE,CAAM,IAAC,KAAQ,SAAA,CAAU,GAAG,MAAA,CAAO,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI;QAmDnE,gEAAgE;QAChE,8CAA8C;QAC9C,MAAM,gBAAgB,CAjDhB,eAAA,GAkDF,CAAC,MAjDC,CAAM,eAAC,KAAmB,SAAA,CAAU,GAAG,MAAA,CAAO,eAAC,GAAiB,IAAA,CAAK,eAAC,CAAe;QAkD3F,MAAM,gBAAgB,CAjDhB,cAAA,GAkDF,CAAC,MAjDC,CAAM,cAAC,KAAkB,SAAA,CAAU,GAAG,MAAA,CAAO,cAAC,GAAgB,IAAA,CAAK,cAAC,CAAc;QAmDxF,2DAA2D;QAC3D,wBAAwB;QACxB,IAAI,gBAAgB,CAjDhB,OAAA,GAAU,MAAA,CAAO,OAAC,IAAU,IAAA,CAAK,OAAC,CAAO;QAkD7C,IAAI,gBAAgB,CAjDhB,MAAA,GAAS,MAAA,CAAO,MAAC,IAAS,IAAA,CAAK,MAAC,CAAM;QAmD1C,qDAAqD;QACrD,EAAE,CAAC,CAAC,MAjDC,CAAM,UAAC,KAAc,SAAA,CAAU,CAAC,CAAA;YAkDnC,8BAA8B;YAC9B,OAAO;gBACH,MAAM,CAjDC,IAAC,CAAI,MAAC,CAAM,UAAC,CAAU;qBAkDzB,MAjDC,CAAM,CAAC,OAAC,EAAQ,IAAA,KAAS,OAAA,CAAQ,GAAC,CAAG,IAAC,EAAI,gBAAA,CAAA,CAAA,CAAC,MAAA,CAAO,UAAC,CAAA,CAAA,CAAY,IAAC,CAAI,CAAC,EAAE,OAAA,CAAQ,CAAC;QAkD5F,CAAC;QAED,oDAAoD;QACpD,EAAE,CAAC,CAAC,MAjDC,CAAM,SAAC,CAAS,CAAC,CAAA;YAkDpB,6BAA6B;YAC7B,MAAM,GAjDG,MAAA,CAAO,IAAC,CAAI,MAAC,CAAM,SAAC,CAAS;iBAkDxB,MAjDC,CAAM,CAAC,MAAC,EAAO,KAAA,KAAU,MAAA,CAAO,GAAC,CAAG,KAAC,EAAK,gBAAA,CAAA,CAAA,CAAC,MAAA,CAAO,SAAC,CAAA,CAAA,CAAW,KAAC,CAAK,CAAC,EAAE,MAAA,CAAO,CAAC;QAkDhG,CAAC;QAED,sEAAsE;QACtE,MAAM,CAjDC,IAAI,WAAA,CAkDP,MAAM,EAjDE,GAAA,EAAK,IAAA,EAAM;YAkDI,MAAM,EAjDE,OAAA,EAAS,cAAA,EAAgB,YAAA,EAAc,eAAA;SAkDlD,CAjDC,CAAC;IAkD5B,CAAC;CAhDF;AAmDD;IACA;;;;;;;OAOG;IACH,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;IAC3B;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;IAC9B;;;;;;OAMG;IACH,WAAW,CAAC,SAAS,CAAC,cAAc,CAAC;IACrC;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,eAAe,CAAC;IACtC;;;;;;OAMG;IACH,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC;IACnC;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;IAC7B;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;IAC7B;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC;AACpC,CAAC","file":"request.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n/**\n * Construction interface for `HttpRequest`s.\n * \n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() {}\n\n\nfunction HttpRequestInit_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nHttpRequestInit.prototype.headers;\n/** @type {?|undefined} */\nHttpRequestInit.prototype.reportProgress;\n/** @type {?|undefined} */\nHttpRequestInit.prototype.params;\n/** @type {?|undefined} */\nHttpRequestInit.prototype.responseType;\n/** @type {?|undefined} */\nHttpRequestInit.prototype.withCredentials;\n}\n\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n * \n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n * \n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n * \n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n * \n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n * \n * \\@experimental\n */\nexport class HttpRequest<T> {\n/**\n * The request body, or `null` if one isn't set.\n * \n * Bodies are not enforced to be immutable, as they can include a reference to any\n * user-defined data type. However, interceptors should take care to preserve\n * idempotence by treating them as such.\n */\nreadonly body: T|null = null;\n/**\n * Outgoing headers for this request.\n */\nreadonly headers: HttpHeaders;\n/**\n * Whether this request should be made in a way that exposes progress events.\n * \n * Progress events are expensive (change detection runs on each event) and so\n * they should only be requested if the consumer intends to monitor them.\n */\nreadonly reportProgress: boolean = false;\n/**\n * Whether this request should be sent with outgoing credentials (cookies).\n */\nreadonly withCredentials: boolean = false;\n/**\n * The expected response type of the server.\n * \n * This is used to parse the response appropriately before returning it to\n * the requestee.\n */\nreadonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n/**\n * The outgoing HTTP request method.\n */\nreadonly method: string;\n/**\n * Outgoing URL parameters.\n */\nreadonly params: HttpParams;\n/**\n * The outgoing URL with all URL parameters set.\n */\nreadonly urlWithParams: string;\n/**\n * @param {?} method\n * @param {?} url\n * @param {?=} init\n */\nconstructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n/**\n * @param {?} method\n * @param {?} url\n * @param {?} body\n * @param {?=} init\n */\nconstructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n/**\n * @param {?} method\n * @param {?} url\n * @param {?} body\n * @param {?=} init\n */\nconstructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n/**\n * @param {?} method\n * @param {?} url\n * @param {?=} third\n * @param {?=} fourth\n */\nconstructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let /** @type {?} */ options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = /** @type {?} */(( third as T)) || null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = /** @type {?} */(( third as HttpRequestInit));\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const /** @type {?} */ params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const /** @type {?} */ qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const /** @type {?} */ sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n/**\n * Transform the free-form body into a serialized format suitable for\n * transmission to the server.\n * @return {?}\n */\nserializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return ( /** @type {?} */((this.body as any))).toString();\n  }\n/**\n * Examine the body and attempt to infer an appropriate MIME type\n * for it.\n * \n * If no such type can be inferred, this method will return `null`.\n * @return {?}\n */\ndetectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n/**\n * @param {?=} update\n * @return {?}\n */\nclone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const /** @type {?} */ method = update.method || this.method;\n    const /** @type {?} */ url = update.url || this.url;\n    const /** @type {?} */ responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const /** @type {?} */ withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const /** @type {?} */ reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let /** @type {?} */ headers = update.headers || this.headers;\n    let /** @type {?} */ params = update.params || this.params;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, /** @type {?} */(( update.setHeaders))[name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, /** @type {?} */(( update.setParams))[param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(\n        method, url, body, {\n                               params, headers, reportProgress, responseType, withCredentials,\n                           });\n  }\n}\n\nfunction HttpRequest_tsickle_Closure_declarations() {\n/**\n * The request body, or `null` if one isn't set.\n * \n * Bodies are not enforced to be immutable, as they can include a reference to any\n * user-defined data type. However, interceptors should take care to preserve\n * idempotence by treating them as such.\n * @type {?}\n */\nHttpRequest.prototype.body;\n/**\n * Outgoing headers for this request.\n * @type {?}\n */\nHttpRequest.prototype.headers;\n/**\n * Whether this request should be made in a way that exposes progress events.\n * \n * Progress events are expensive (change detection runs on each event) and so\n * they should only be requested if the consumer intends to monitor them.\n * @type {?}\n */\nHttpRequest.prototype.reportProgress;\n/**\n * Whether this request should be sent with outgoing credentials (cookies).\n * @type {?}\n */\nHttpRequest.prototype.withCredentials;\n/**\n * The expected response type of the server.\n * \n * This is used to parse the response appropriately before returning it to\n * the requestee.\n * @type {?}\n */\nHttpRequest.prototype.responseType;\n/**\n * The outgoing HTTP request method.\n * @type {?}\n */\nHttpRequest.prototype.method;\n/**\n * Outgoing URL parameters.\n * @type {?}\n */\nHttpRequest.prototype.params;\n/**\n * The outgoing URL with all URL parameters set.\n * @type {?}\n */\nHttpRequest.prototype.urlWithParams;\n}\n\n"]}