{"version":3,"sources":["../../../../../packages/common/http/src/headers.ts"],"names":[],"mappings":"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","file":"headers.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @record\n */\nfunction Update() {}\n\n\nfunction Update_tsickle_Closure_declarations() {\n/** @type {?} */\nUpdate.prototype.name;\n/** @type {?|undefined} */\nUpdate.prototype.value;\n/** @type {?} */\nUpdate.prototype.op;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@experimental\n */\nexport class HttpHeaders {\n/**\n * Internal map of lowercase header names to values.\n */\n\nprivate headers: Map<string, string[]>;\n/**\n * Internal map of lowercased header names to the normalized\n * form of the name (the form seen first).\n */\n\nprivate normalizedNames: Map<string, string> = new Map();\n/**\n * Complete the lazy initialization of this object (needed before reading).\n */\n\nprivate lazyInit: HttpHeaders|Function|null;\n/**\n * Queued updates to be materialized the next initialization.\n */\n\nprivate lazyUpdate: Update[]|null = null;\n/**\n * @param {?=} headers\n */\nconstructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const /** @type {?} */ index = line.indexOf(':');\n          if (index > 0) {\n            const /** @type {?} */ name = line.slice(0, index);\n            const /** @type {?} */ key = name.toLowerCase();\n            const /** @type {?} */ value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) { /** @type {?} */((\n              this.headers.get(key))).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let /** @type {?} */ values: string|string[] = headers[name];\n          const /** @type {?} */ key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    this.init();\n\n    const /** @type {?} */ values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n/**\n * @param {?} name\n * @param {?=} value\n * @return {?}\n */\ndelete (name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n/**\n * @param {?} name\n * @param {?} lcName\n * @return {?}\n */\n\nprivate maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n/**\n * @param {?} other\n * @return {?}\n */\n\nprivate copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, /** @type {?} */(( other.headers.get(key))));\n      this.normalizedNames.set(key, /** @type {?} */(( other.normalizedNames.get(key))));\n    });\n  }\n/**\n * @param {?} update\n * @return {?}\n */\n\nprivate clone(update: Update): HttpHeaders {\n    const /** @type {?} */ clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n/**\n * @param {?} update\n * @return {?}\n */\n\nprivate applyUpdate(update: Update): void {\n    const /** @type {?} */ key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let /** @type {?} */ value = /** @type {?} */(( update.value));\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const /** @type {?} */ toDelete = /** @type {?} */(( update.value as string | undefined));\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let /** @type {?} */ existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n/**\n * \\@internal\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn( /** @type {?} */((this.normalizedNames.get(key))), /** @type {?} */(( this.headers.get(key)))));\n  }\n}\n\nfunction HttpHeaders_tsickle_Closure_declarations() {\n/**\n * Internal map of lowercase header names to values.\n * @type {?}\n */\nHttpHeaders.prototype.headers;\n/**\n * Internal map of lowercased header names to the normalized\n * form of the name (the form seen first).\n * @type {?}\n */\nHttpHeaders.prototype.normalizedNames;\n/**\n * Complete the lazy initialization of this object (needed before reading).\n * @type {?}\n */\nHttpHeaders.prototype.lazyInit;\n/**\n * Queued updates to be materialized the next initialization.\n * @type {?}\n */\nHttpHeaders.prototype.lazyUpdate;\n}\n\n"]}