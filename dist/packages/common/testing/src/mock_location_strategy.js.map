{"version":3,"sources":["../../../../../packages/common/testing/src/mock_location_strategy.ts"],"names":[],"mappings":"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","file":"mock_location_strategy.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n/**\n * A mock implementation of {\\@link LocationStrategy} that allows tests to fire simulated\n * location events.\n * \n * \\@stable\n */\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n/**\n * \\@internal\n */\n_subject: EventEmitter<any> = new EventEmitter();\nconstructor() { super(); }\n/**\n * @param {?} url\n * @return {?}\n */\nsimulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string { return this.internalPath; }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n/**\n * @param {?} ctx\n * @param {?} title\n * @param {?} path\n * @param {?} query\n * @return {?}\n */\npushState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const /** @type {?} */ url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n/**\n * @param {?} ctx\n * @param {?} title\n * @param {?} path\n * @param {?} query\n * @return {?}\n */\nreplaceState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const /** @type {?} */ url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: (value: any) => void): void { this._subject.subscribe({next: fn}); }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this.internalBaseHref; }\n/**\n * @return {?}\n */\nback(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      const /** @type {?} */ nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n/**\n * @return {?}\n */\nforward(): void { throw 'not implemented'; }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction MockLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nMockLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMockLocationStrategy.ctorParameters;\n/** @type {?} */\nMockLocationStrategy.prototype.internalBaseHref;\n/** @type {?} */\nMockLocationStrategy.prototype.internalPath;\n/** @type {?} */\nMockLocationStrategy.prototype.internalTitle;\n/** @type {?} */\nMockLocationStrategy.prototype.urlChanges;\n/**\n * \\@internal\n * @type {?}\n */\nMockLocationStrategy.prototype._subject;\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n/**\n * @param {?} newUrl\n */\nconstructor(public newUrl: string) {}\n}\n\nfunction _MockPopStateEvent_tsickle_Closure_declarations() {\n/** @type {?} */\n_MockPopStateEvent.prototype.pop;\n/** @type {?} */\n_MockPopStateEvent.prototype.type;\n/** @type {?} */\n_MockPopStateEvent.prototype.newUrl;\n}\n\n"]}