{"version":3,"sources":["../../../../../packages/common/src/directives/ng_plural.ts"],"names":[],"mappings":"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","file":"ng_plural.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../localization';\n\nimport {SwitchView} from './ng_switch';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n * \n * \\@description \n * \n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n * \n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n * \n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n * \n * \\@experimental\n */\nexport class NgPlural {\nprivate _switchValue: number;\nprivate _activeView: SwitchView;\nprivate _caseViews: {[k: string]: SwitchView} = {};\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n/**\n * @param {?} value\n * @param {?} switchView\n * @return {?}\n */\naddCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n/**\n * @return {?}\n */\n\nprivate _updateView(): void {\n    this._clearViews();\n\n    const /** @type {?} */ cases = Object.keys(this._caseViews);\n    const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n/**\n * @return {?}\n */\n\nprivate _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n/**\n * @param {?} view\n * @return {?}\n */\n\nprivate _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngPlural]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgLocalization, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngPlural\": [{ type: Input },],\n};\n}\n\nfunction NgPlural_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPlural.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPlural.ctorParameters;\n/** @type {?} */\nNgPlural.propDecorators;\n/** @type {?} */\nNgPlural.prototype._switchValue;\n/** @type {?} */\nNgPlural.prototype._activeView;\n/** @type {?} */\nNgPlural.prototype._caseViews;\n/** @type {?} */\nNgPlural.prototype._localization;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n *             given expression matches the plural expression according to CLDR rules.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n * \n * See {\\@link NgPlural} for more details and example.\n * \n * \\@experimental\n */\nexport class NgPluralCase {\n/**\n * @param {?} value\n * @param {?} template\n * @param {?} viewContainer\n * @param {?} ngPlural\n */\nconstructor(\npublic value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef,  ngPlural: NgPlural) {\n    const /** @type {?} */ isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngPluralCase]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase', ] }, ]},\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: NgPlural, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgPluralCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPluralCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPluralCase.ctorParameters;\n/** @type {?} */\nNgPluralCase.prototype.value;\n}\n\n"]}