{"version":3,"sources":["../../../../../packages/common/src/directives/ng_template_outlet.ts"],"names":[],"mappings":"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","file":"ng_template_outlet.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * ## Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@experimental\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n * @param {?} context\n * @return {?}\n */\nset ngOutletContext(context: Object) { this.ngTemplateOutletContext = context; }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ recreateView = this._shouldRecreateView(changes);\n\n    if (recreateView) {\n      if (this._viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n\n      if (this.ngTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n            this.ngTemplateOutlet, this.ngTemplateOutletContext);\n      }\n    } else {\n      if (this._viewRef && this.ngTemplateOutletContext) {\n        this._updateExistingContext(this.ngTemplateOutletContext);\n      }\n    }\n  }\n/**\n * We need to re-create existing embedded view if:\n * - templateRef has changed\n * - context has changes\n * \n * To mark context object as changed when the corresponding object\n * shape changes (new properties are added or existing properties are removed).\n * In other words we consider context with the same properties as \"the same\" even\n * if object reference changes (see https://github.com/angular/angular/issues/13407).\n * @param {?} changes\n * @return {?}\n */\n\nprivate _shouldRecreateView(changes: SimpleChanges): boolean {\n    const /** @type {?} */ ctxChange = changes['ngTemplateOutletContext'];\n    return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n/**\n * @param {?} ctxChange\n * @return {?}\n */\n\nprivate _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (let /** @type {?} */ propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n/**\n * @param {?} ctx\n * @return {?}\n */\n\nprivate _updateExistingContext(ctx: Object): void {\n    for (let /** @type {?} */ propName of Object.keys(ctx)) {\n      ( /** @type {?} */((<any>this._viewRef.context)))[propName] = ( /** @type {?} */((<any>this.ngTemplateOutletContext)))[propName];\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngTemplateOutletContext\": [{ type: Input },],\n\"ngTemplateOutlet\": [{ type: Input },],\n\"ngOutletContext\": [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n"]}