{"version":3,"sources":["../../../../../packages/common/src/directives/ng_for_of.ts"],"names":[],"mappings":"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","file":"ng_for_of.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n/**\n * \\@stable\n */\nexport class NgForOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngForOf\n * @param {?} index\n * @param {?} count\n */\nconstructor(\npublic $implicit: T,\npublic ngForOf: NgIterable<T>,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfContext.prototype.$implicit;\n/** @type {?} */\nNgForOfContext.prototype.ngForOf;\n/** @type {?} */\nNgForOfContext.prototype.index;\n/** @type {?} */\nNgForOfContext.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n * \n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; index as i; trackBy: trackByFn\">...</li>`\n * \n * With `<ng-template>` element:\n * \n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck, OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T>|null = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfContext<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>( /** @type {?} */((null)), this.ngForOf, -1, -1), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = /** @type {?} */(( this._viewContainer.get(adjustedPreviousIndex)));\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */((\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\n\nprivate _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngForOf\": [{ type: Input },],\n\"ngForTrackBy\": [{ type: Input },],\n\"ngForTemplate\": [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n\n/**\n * @deprecated from v4.0.0 - Use NgForOf<any> instead.\n */\nexport type NgFor = NgForOf<any>;\n/**\n * @deprecated from v4.0.0 - Use NgForOf instead.\n */\nexport const /** @type {?} */ NgFor = NgForOf;\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n"]}