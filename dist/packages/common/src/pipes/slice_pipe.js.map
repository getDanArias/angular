{"version":3,"sources":["../../../../../packages/common/src/pipes/slice_pipe.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,IAAE,EAAmB,MAAA,eAAA,CAAA;AAM5B,OALO,EAAA,wBAAE,EAAwB,MAAA,+BAAA,CAAA;AAMjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAFC;IAGD;;;;;OAKG;IACH,SARG,CAAS,KAAO,EAAK,KAAO,EAAQ,GAAM;QASzC,EAAE,CAAC,CAAC,KARC,IAAQ,IAAA,CAAK;YAAC,MAAA,CAAO,KAAA,CAAM;QAUhC,EAAE,CAAC,CAAC,CARC,IAAC,CAAI,QAAC,CAAQ,KAAC,CAAK,CAAC,CAAC,CAAA;YASzB,MARM,wBAAA,CAAyB,SAAC,EAAU,KAAA,CAAM,CAAC;QASnD,CAAC;QAED,MAAM,CARC,KAAA,CAAM,KAAC,CAAK,KAAC,EAAM,GAAA,CAAI,CAAC;IASjC,CAAC;IACH;;;OAGG;IAVO,QAAA,CAAS,GAAK,IAAgB,MAAA,CAAO,OAAO,GAAA,KAAQ,QAAA,IAAY,KAAA,CAAM,OAAC,CAAO,GAAC,CAAG,CAAC,CAAC,CAAA;;AACvF,oBAAA,GAA+C;IAatD,EAZE,IAAA,EAAM,IAAA,EAdN,IAAA,EAAA,CAAA,EAAK,IAAC,EAAK,OAAA,EAAS,IAAA,EAAM,KAAA,EAAM,EAAA,EAAA;CA2BjC,CAZC;AAaF,kBAAkB;AAXX,wBAAA,GAA4F,MAAM,EAaxG,CAZC;AAeF;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;AACzB,CAAC","file":"slice_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\n * \\@description \n * \n * Where the input expression is a `List` or `String`, and:\n * - `start`: The starting index of the subset to return.\n *   - **a positive integer**: return the item at `start` index and all items after\n *     in the list or string expression.\n *   - **a negative integer**: return the item at `start` index from the end and all items after\n *     in the list or string expression.\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\n *   - **if negative and greater than the size of the expression**: return entire list or string.\n * - `end`: The ending index of the subset to return.\n *   - **omitted**: return all items until the end.\n *   - **if positive**: return all items before `end` index of the list or string.\n *   - **if negative**: return all items before `end` index from the end of the list or string.\n * \n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n * \n * When operating on a [List], the returned list is always a copy even when all\n * the elements are being returned.\n * \n * When operating on a blank value, the pipe returns the blank value.\n * \n * ## List Example\n * \n * This `ngFor` example:\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n * \n * produces the following:\n * \n *     <li>b</li>\n *     <li>c</li>\n * \n * ## String Examples\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n * \n * \\@stable\n */\nexport class SlicePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} start\n * @param {?=} end\n * @return {?}\n */\ntransform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction SlicePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSlicePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlicePipe.ctorParameters;\n}\n\n"]}