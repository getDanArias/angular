{"version":3,"sources":["../../../../packages/platform-server/src/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, NgModuleFactory, NgModuleRef, PlatformRef, StaticProvider, Type} from '@angular/core';\nimport {ɵTRANSITION_ID} from '@angular/platform-browser';\nimport {filter} from 'rxjs/operator/filter';\nimport {first} from 'rxjs/operator/first';\nimport {toPromise} from 'rxjs/operator/toPromise';\n\nimport {PlatformState} from './platform_state';\nimport {platformDynamicServer, platformServer} from './server';\nimport {INITIAL_CONFIG} from './tokens';\n\nconst /** @type {?} */ parse5 = require('parse5');\n/**\n * @record\n */\nfunction PlatformOptions() {}\n\n\nfunction PlatformOptions_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nPlatformOptions.prototype.document;\n/** @type {?|undefined} */\nPlatformOptions.prototype.url;\n/** @type {?|undefined} */\nPlatformOptions.prototype.extraProviders;\n}\n\n\ninterface PlatformOptions {\n  document?: string;\n  url?: string;\n  extraProviders?: StaticProvider[];\n}\n/**\n * @param {?} platformFactory\n * @param {?} options\n * @return {?}\n */\nfunction _getPlatform(\n    platformFactory: (extraProviders: StaticProvider[]) => PlatformRef,\n    options: PlatformOptions): PlatformRef {\n  const /** @type {?} */ extraProviders = options.extraProviders ? options.extraProviders : [];\n  return platformFactory([\n    {provide: INITIAL_CONFIG, useValue: {document: options.document, url: options.url}},\n    extraProviders\n  ]);\n}\n/**\n * @template T\n * @param {?} platform\n * @param {?} moduleRefPromise\n * @return {?}\n */\nfunction _render<T>(\n    platform: PlatformRef, moduleRefPromise: Promise<NgModuleRef<T>>): Promise<string> {\n  return moduleRefPromise.then((moduleRef) => {\n    const /** @type {?} */ transitionId = moduleRef.injector.get(ɵTRANSITION_ID, null);\n    if (!transitionId) {\n      throw new Error(\n          `renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\nthe server-rendered app can be properly bootstrapped into a client app.`);\n    }\n    const /** @type {?} */ applicationRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n    return toPromise\n        .call(first.call(filter.call(applicationRef.isStable, (isStable: boolean) => isStable)))\n        .then(() => {\n          const /** @type {?} */ output = platform.injector.get(PlatformState).renderToString();\n          platform.destroy();\n          return output;\n        });\n  });\n}\n/**\n * Renders a Module to string.\n * \n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n * \n * Do not use this in a production server environment. Use pre-compiled {\\@link NgModuleFactory} with\n * {\\@link renderModuleFactory} instead.\n * \n * \\@experimental\n * @template T\n * @param {?} module\n * @param {?} options\n * @return {?}\n */\nexport function renderModule<T>(\n    module: Type<T>, options: {document?: string, url?: string, extraProviders?: StaticProvider[]}):\n    Promise<string> {\n  const /** @type {?} */ platform = _getPlatform(platformDynamicServer, options);\n  return _render(platform, platform.bootstrapModule(module));\n}\n/**\n * Renders a {\\@link NgModuleFactory} to string.\n * \n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n * \n * \\@experimental\n * @template T\n * @param {?} moduleFactory\n * @param {?} options\n * @return {?}\n */\nexport function renderModuleFactory<T>(\n    moduleFactory: NgModuleFactory<T>,\n    options: {document?: string, url?: string, extraProviders?: StaticProvider[]}):\n    Promise<string> {\n  const /** @type {?} */ platform = _getPlatform(platformServer, options);\n  return _render(platform, platform.bootstrapModuleFactory(moduleFactory));\n}\n"]}