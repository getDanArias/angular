{"version":3,"sources":["../../../../../packages/compiler/src/view_compiler/provider_compiler.ts"],"names":[],"mappings":"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","file":"provider_compiler.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDepFlags as DepFlags, ɵNodeFlags as NodeFlags} from '@angular/core';\n\nimport {CompileDiDependencyMetadata, CompileEntryComponentMetadata, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {Identifiers, createTokenForExternalReference} from '../identifiers';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ProviderAst, ProviderAstType} from '../template_parser/template_ast';\nimport {OutputContext} from '../util';\n/**\n * @param {?} ctx\n * @param {?} providerAst\n * @return {?}\n */\nexport function providerDef(ctx: OutputContext, providerAst: ProviderAst): {\n  providerExpr: o.Expression,\n  flags: NodeFlags,\n  depsExpr: o.Expression,\n  tokenExpr: o.Expression\n} {\n  let /** @type {?} */ flags = NodeFlags.None;\n  if (!providerAst.eager) {\n    flags |= NodeFlags.LazyProvider;\n  }\n  if (providerAst.providerType === ProviderAstType.PrivateService) {\n    flags |= NodeFlags.PrivateProvider;\n  }\n  providerAst.lifecycleHooks.forEach((lifecycleHook) => {\n    // for regular providers, we only support ngOnDestroy\n    if (lifecycleHook === LifecycleHooks.OnDestroy ||\n        providerAst.providerType === ProviderAstType.Directive ||\n        providerAst.providerType === ProviderAstType.Component) {\n      flags |= lifecycleHookToNodeFlag(lifecycleHook);\n    }\n  });\n  const {providerExpr, flags: providerFlags, depsExpr} = providerAst.multiProvider ?\n      multiProviderDef(ctx, flags, providerAst.providers) :\n      singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]);\n  return {\n    providerExpr,\n    flags: providerFlags, depsExpr,\n    tokenExpr: tokenExpr(ctx, providerAst.token),\n  };\n}\n/**\n * @param {?} ctx\n * @param {?} flags\n * @param {?} providers\n * @return {?}\n */\nfunction multiProviderDef(\n    ctx: OutputContext, flags: NodeFlags, providers: CompileProviderMetadata[]):\n    {providerExpr: o.Expression, flags: NodeFlags, depsExpr: o.Expression} {\n  const /** @type {?} */ allDepDefs: o.Expression[] = [];\n  const /** @type {?} */ allParams: o.FnParam[] = [];\n  const /** @type {?} */ exprs = providers.map((provider, providerIndex) => {\n    let /** @type {?} */ expr: o.Expression;\n    if (provider.useClass) {\n      const /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\n      expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);\n    } else if (provider.useFactory) {\n      const /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\n      expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);\n    } else if (provider.useExisting) {\n      const /** @type {?} */ depExprs = convertDeps(providerIndex, [{token: provider.useExisting}]);\n      expr = depExprs[0];\n    } else {\n      expr = convertValueToOutputAst(ctx, provider.useValue);\n    }\n    return expr;\n  });\n  const /** @type {?} */ providerExpr =\n      o.fn(allParams, [new o.ReturnStatement(o.literalArr(exprs))], o.INFERRED_TYPE);\n  return {\n    providerExpr,\n    flags: flags | NodeFlags.TypeFactoryProvider,\n    depsExpr: o.literalArr(allDepDefs)\n  };\n/**\n * @param {?} providerIndex\n * @param {?} deps\n * @return {?}\n */\nfunction convertDeps(providerIndex: number, deps: CompileDiDependencyMetadata[]) {\n    return deps.map((dep, depIndex) => {\n      const /** @type {?} */ paramName = `p${providerIndex}_${depIndex}`;\n      allParams.push(new o.FnParam(paramName, o.DYNAMIC_TYPE));\n      allDepDefs.push(depDef(ctx, dep));\n      return o.variable(paramName);\n    });\n  }\n}\n/**\n * @param {?} ctx\n * @param {?} flags\n * @param {?} providerType\n * @param {?} providerMeta\n * @return {?}\n */\nfunction singleProviderDef(\n    ctx: OutputContext, flags: NodeFlags, providerType: ProviderAstType,\n    providerMeta: CompileProviderMetadata):\n    {providerExpr: o.Expression, flags: NodeFlags, depsExpr: o.Expression} {\n  let /** @type {?} */ providerExpr: o.Expression;\n  let /** @type {?} */ deps: CompileDiDependencyMetadata[];\n  if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {\n    providerExpr = ctx.importExpr( /** @type {?} */((providerMeta.useClass)).reference);\n    flags |= NodeFlags.TypeDirective;\n    deps = providerMeta.deps || /** @type {?} */(( providerMeta.useClass)).diDeps;\n  } else {\n    if (providerMeta.useClass) {\n      providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n      flags |= NodeFlags.TypeClassProvider;\n      deps = providerMeta.deps || providerMeta.useClass.diDeps;\n    } else if (providerMeta.useFactory) {\n      providerExpr = ctx.importExpr(providerMeta.useFactory.reference);\n      flags |= NodeFlags.TypeFactoryProvider;\n      deps = providerMeta.deps || providerMeta.useFactory.diDeps;\n    } else if (providerMeta.useExisting) {\n      providerExpr = o.NULL_EXPR;\n      flags |= NodeFlags.TypeUseExistingProvider;\n      deps = [{token: providerMeta.useExisting}];\n    } else {\n      providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);\n      flags |= NodeFlags.TypeValueProvider;\n      deps = [];\n    }\n  }\n  const /** @type {?} */ depsExpr = o.literalArr(deps.map(dep => depDef(ctx, dep)));\n  return {providerExpr, flags, depsExpr};\n}\n/**\n * @param {?} ctx\n * @param {?} tokenMeta\n * @return {?}\n */\nfunction tokenExpr(ctx: OutputContext, tokenMeta: CompileTokenMetadata): o.Expression {\n  return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :\n                                o.literal(tokenMeta.value);\n}\n/**\n * @param {?} ctx\n * @param {?} dep\n * @return {?}\n */\nexport function depDef(ctx: OutputContext, dep: CompileDiDependencyMetadata): o.Expression {\n  // Note: the following fields have already been normalized out by provider_analyzer:\n  // - isAttribute, isSelf, isHost\n  const /** @type {?} */ expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, /** @type {?} */(( dep.token)));\n  let /** @type {?} */ flags = DepFlags.None;\n  if (dep.isSkipSelf) {\n    flags |= DepFlags.SkipSelf;\n  }\n  if (dep.isOptional) {\n    flags |= DepFlags.Optional;\n  }\n  if (dep.isValue) {\n    flags |= DepFlags.Value;\n  }\n  return flags === DepFlags.None ? expr : o.literalArr([o.literal(flags), expr]);\n}\n/**\n * @param {?} lifecycleHook\n * @return {?}\n */\nexport function lifecycleHookToNodeFlag(lifecycleHook: LifecycleHooks): NodeFlags {\n  let /** @type {?} */ nodeFlag = NodeFlags.None;\n  switch (lifecycleHook) {\n    case LifecycleHooks.AfterContentChecked:\n      nodeFlag = NodeFlags.AfterContentChecked;\n      break;\n    case LifecycleHooks.AfterContentInit:\n      nodeFlag = NodeFlags.AfterContentInit;\n      break;\n    case LifecycleHooks.AfterViewChecked:\n      nodeFlag = NodeFlags.AfterViewChecked;\n      break;\n    case LifecycleHooks.AfterViewInit:\n      nodeFlag = NodeFlags.AfterViewInit;\n      break;\n    case LifecycleHooks.DoCheck:\n      nodeFlag = NodeFlags.DoCheck;\n      break;\n    case LifecycleHooks.OnChanges:\n      nodeFlag = NodeFlags.OnChanges;\n      break;\n    case LifecycleHooks.OnDestroy:\n      nodeFlag = NodeFlags.OnDestroy;\n      break;\n    case LifecycleHooks.OnInit:\n      nodeFlag = NodeFlags.OnInit;\n      break;\n  }\n  return nodeFlag;\n}\n/**\n * @param {?} reflector\n * @param {?} ctx\n * @param {?} flags\n * @param {?} entryComponents\n * @return {?}\n */\nexport function componentFactoryResolverProviderDef(\n    reflector: CompileReflector, ctx: OutputContext, flags: NodeFlags,\n    entryComponents: CompileEntryComponentMetadata[]): {\n  providerExpr: o.Expression,\n  flags: NodeFlags,\n  depsExpr: o.Expression,\n  tokenExpr: o.Expression\n} {\n  const /** @type {?} */ entryComponentFactories =\n      entryComponents.map((entryComponent) => ctx.importExpr(entryComponent.componentFactory));\n  const /** @type {?} */ token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);\n  const /** @type {?} */ classMeta = {\n    diDeps: [\n      {isValue: true, value: o.literalArr(entryComponentFactories)},\n      {token: token, isSkipSelf: true, isOptional: true},\n      {token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef)},\n    ],\n    lifecycleHooks: [],\n    reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)\n  };\n  const {providerExpr, flags: providerFlags, depsExpr} =\n      singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {\n        token,\n        multi: false,\n        useClass: classMeta,\n      });\n  return {providerExpr, flags: providerFlags, depsExpr, tokenExpr: tokenExpr(ctx, token)};\n}\n"]}