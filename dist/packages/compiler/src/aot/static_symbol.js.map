{"version":3,"sources":["../../../../../packages/compiler/src/aot/static_symbol.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH;;;;GAIG;AAVH,AAWA;;;GARG,CAQH,MAEC;IADD;;;;OAIG;IACH,YAHqB,QAAU,EAAe,IAAM,EAAe,OAAgB;QAA9D,aAAA,GAAA,QAAA,CAAU;QAAe,SAAA,GAAA,IAAA,CAAM;QAAe,YAAA,GAAA,OAAA,CAAgB;IAAG,CAAA;IAMtF;;OAEG;IACH,eAPG;QAQC,EAAE,CAAC,CAAC,IAPC,CAAI,OAAC,CAAO,MAAC,CAAM,CAAC,CAAA;YAQvB,MAPM,IAAI,KAAA,CAQN,2DAA2D,IAPC,CAAI,SAAC,CAAS,IAAC,CAAI,GAAC,CAAG,CAAC;QAQ1F,CAAC;IACH,CAAC;CANF;AASD;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;IAChC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;AAC/B,CAAC;AAED;;;GAGG;AACH,MAhBC;IAgBD;QAfU,UAAA,GAAQ,IAAI,GAAA,EAAyB,CAAG;IAkClD,CArBC;IAID;;;;;OAKG;IACH,GArBG,CAAG,eAAiB,EAAQ,IAAM,EAAQ,OAAiB;QAsB1D,OAAO,GArBG,OAAA,IAAW,EAAA,CAAG;QAsBxB,MAAM,gBAAgB,CArBhB,YAAA,GAAe,OAAA,CAAQ,MAAC,GAAQ,IAAK,OAAA,CAAQ,IAAC,CAAI,GAAC,CAAG,EAAC,GAAI,EAAA,CAAG;QAsBpE,MAAM,gBAAgB,CArBhB,GAAA,GAAM,IAAA,eAAK,KAAe,IAAK,GAAI,YAAG,EAAY,CAAE;QAsB1D,IAAI,gBAAgB,CArBhB,MAAA,GAAS,IAAA,CAAK,KAAC,CAAK,GAAC,CAAG,GAAC,CAAG,CAAC;QAsBjC,EAAE,CAAC,CAAC,CArBC,MAAC,CAAM,CAAC,CAAA;YAsBX,MAAM,GArBG,IAAI,YAAA,CAAa,eAAC,EAAgB,IAAA,EAAM,OAAA,CAAQ,CAAC;YAsB1D,IAAI,CArBC,KAAC,CAAK,GAAC,CAAG,GAAC,EAAI,MAAA,CAAO,CAAC;QAsB9B,CAAC;QACD,MAAM,CArBC,MAAA,CAAO;IAsBhB,CAAC;CApBF;AAuBD;IACA,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC;AAClC,CAAC","file":"static_symbol.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * A token representing the a reference to a static type.\n * \n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nexport class StaticSymbol {\n/**\n * @param {?} filePath\n * @param {?} name\n * @param {?} members\n */\nconstructor(public filePath: string,\npublic name: string,\npublic members: string[]) {}\n/**\n * @return {?}\n */\nassertNoMembers() {\n    if (this.members.length) {\n      throw new Error(\n          `Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);\n    }\n  }\n}\n\nfunction StaticSymbol_tsickle_Closure_declarations() {\n/** @type {?} */\nStaticSymbol.prototype.filePath;\n/** @type {?} */\nStaticSymbol.prototype.name;\n/** @type {?} */\nStaticSymbol.prototype.members;\n}\n\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nexport class StaticSymbolCache {\nprivate cache = new Map<string, StaticSymbol>();\n/**\n * @param {?} declarationFile\n * @param {?} name\n * @param {?=} members\n * @return {?}\n */\nget(declarationFile: string, name: string, members?: string[]): StaticSymbol {\n    members = members || [];\n    const /** @type {?} */ memberSuffix = members.length ? `.${ members.join('.')}` : '';\n    const /** @type {?} */ key = `\"${declarationFile}\".${name}${memberSuffix}`;\n    let /** @type {?} */ result = this.cache.get(key);\n    if (!result) {\n      result = new StaticSymbol(declarationFile, name, members);\n      this.cache.set(key, result);\n    }\n    return result;\n  }\n}\n\nfunction StaticSymbolCache_tsickle_Closure_declarations() {\n/** @type {?} */\nStaticSymbolCache.prototype.cache;\n}\n"]}