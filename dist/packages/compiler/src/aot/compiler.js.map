{"version":3,"sources":["../../../../../packages/compiler/src/aot/compiler.ts"],"names":[],"mappings":"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","file":"compiler.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileDirectiveSummary, CompileIdentifierMetadata, CompileNgModuleMetadata, CompileNgModuleSummary, CompilePipeMetadata, CompileProviderMetadata, CompileStylesheetMetadata, CompileSummaryKind, CompileTypeMetadata, CompileTypeSummary, componentFactoryName, createHostComponentMeta, flatten, identifierName, sourceUrl, templateSourceUrl} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {Identifiers, createTokenForExternalReference} from '../identifiers';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {OutputEmitter} from '../output/abstract_emitter';\nimport * as o from '../output/output_ast';\nimport {CompiledStylesheet, StyleCompiler} from '../style_compiler';\nimport {SummaryResolver} from '../summary_resolver';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {OutputContext, syntaxError} from '../util';\nimport {ViewCompileResult, ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompilerHost} from './compiler_host';\nimport {GeneratedFile} from './generated_file';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol} from './static_symbol';\nimport {ResolvedStaticSymbol, StaticSymbolResolver} from './static_symbol_resolver';\nimport {createForJitStub, serializeSummaries} from './summary_serializer';\nimport {ngfactoryFilePath, splitTypescriptSuffix, summaryFileName, summaryForJitFileName, summaryForJitName} from './util';\nexport class AotCompiler {\n/**\n * @param {?} _config\n * @param {?} _host\n * @param {?} _reflector\n * @param {?} _metadataResolver\n * @param {?} _templateParser\n * @param {?} _styleCompiler\n * @param {?} _viewCompiler\n * @param {?} _ngModuleCompiler\n * @param {?} _outputEmitter\n * @param {?} _summaryResolver\n * @param {?} _localeId\n * @param {?} _translationFormat\n * @param {?} _enableSummariesForJit\n * @param {?} _symbolResolver\n */\nconstructor(\nprivate _config: CompilerConfig,\nprivate _host: AotCompilerHost,\nprivate _reflector: StaticReflector,\nprivate _metadataResolver: CompileMetadataResolver,\nprivate _templateParser: TemplateParser,\nprivate _styleCompiler: StyleCompiler,\nprivate _viewCompiler: ViewCompiler,\nprivate _ngModuleCompiler: NgModuleCompiler,\nprivate _outputEmitter: OutputEmitter,\nprivate _summaryResolver: SummaryResolver<StaticSymbol>,\nprivate _localeId: string|null,\nprivate _translationFormat: string|null,\nprivate _enableSummariesForJit: boolean|null,\nprivate _symbolResolver: StaticSymbolResolver) {}\n/**\n * @return {?}\n */\nclearCache() { this._metadataResolver.clearCache(); }\n/**\n * @param {?} rootFiles\n * @return {?}\n */\nanalyzeModulesSync(rootFiles: string[]): NgAnalyzedModules {\n    const /** @type {?} */ programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);\n    const /** @type {?} */ analyzeResult =\n        analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver);\n    analyzeResult.ngModules.forEach(\n        ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n            ngModule.type.reference, true));\n    return analyzeResult;\n  }\n/**\n * @param {?} rootFiles\n * @return {?}\n */\nanalyzeModulesAsync(rootFiles: string[]): Promise<NgAnalyzedModules> {\n    const /** @type {?} */ programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);\n    const /** @type {?} */ analyzeResult =\n        analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver);\n    return Promise\n        .all(analyzeResult.ngModules.map(\n            ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => analyzeResult);\n  }\n/**\n * @param {?} analyzeResult\n * @return {?}\n */\nemitAllStubs(analyzeResult: NgAnalyzedModules): GeneratedFile[] {\n    const {files} = analyzeResult;\n    const /** @type {?} */ sourceModules = files.map(\n        file =>\n            this._compileStubFile(file.srcUrl, file.directives, file.pipes, file.ngModules, false));\n    return flatten(sourceModules);\n  }\n/**\n * @param {?} analyzeResult\n * @return {?}\n */\nemitPartialStubs(analyzeResult: NgAnalyzedModules): GeneratedFile[] {\n    const {files} = analyzeResult;\n    const /** @type {?} */ sourceModules = files.map(\n        file =>\n            this._compileStubFile(file.srcUrl, file.directives, file.pipes, file.ngModules, true));\n    return flatten(sourceModules);\n  }\n/**\n * @param {?} analyzeResult\n * @return {?}\n */\nemitAllImpls(analyzeResult: NgAnalyzedModules): GeneratedFile[] {\n    const {ngModuleByPipeOrDirective, files} = analyzeResult;\n    const /** @type {?} */ sourceModules = files.map(\n        file => this._compileImplFile(\n            file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules,\n            file.injectables));\n    return flatten(sourceModules);\n  }\n/**\n * @param {?} srcFileUrl\n * @param {?} directives\n * @param {?} pipes\n * @param {?} ngModules\n * @param {?} partial\n * @return {?}\n */\n\nprivate _compileStubFile(\n      srcFileUrl: string, directives: StaticSymbol[], pipes: StaticSymbol[],\n      ngModules: StaticSymbol[], partial: boolean): GeneratedFile[] {\n    // partial is true when we only need the files we are certain will produce a factory and/or\n    // summary.\n    // This is the normal case for `ngc` but if we assume libraryies are generating their own\n    // factories\n    // then we might need a factory for a file that re-exports a module or factory which we cannot\n    // know\n    // ahead of time so we need a stub generate for all non-.d.ts files. The .d.ts files do not need\n    // to\n    // be excluded here because they are excluded when the modules are analyzed. If a factory ends\n    // up\n    // not being needed, the factory file is not written in writeFile callback.\n    const /** @type {?} */ fileSuffix = splitTypescriptSuffix(srcFileUrl, true)[1];\n    const /** @type {?} */ generatedFiles: GeneratedFile[] = [];\n\n    const /** @type {?} */ ngFactoryOutputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n    const /** @type {?} */ jitSummaryOutputCtx = this._createOutputContext(summaryForJitFileName(srcFileUrl, true));\n\n    // create exports that user code can reference\n    ngModules.forEach((ngModuleReference) => {\n      this._ngModuleCompiler.createStub(ngFactoryOutputCtx, ngModuleReference);\n      createForJitStub(jitSummaryOutputCtx, ngModuleReference);\n    });\n\n    let /** @type {?} */ partialJitStubRequired = false;\n    let /** @type {?} */ partialFactoryStubRequired = false;\n\n    // create stubs for external stylesheets (always empty, as users should not import anything from\n    // the generated code)\n    directives.forEach((dirType) => {\n      const /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata( /** @type {?} */((<any>dirType)));\n\n      partialJitStubRequired = true;\n\n      if (!compMeta.isComponent) {\n        return;\n      } /** @type {?} */((\n      // Note: compMeta is a component and therefore template is non null.\n      compMeta.template)).externalStylesheets.forEach((stylesheetMeta) => {\n        const /** @type {?} */ styleContext = this._createOutputContext(_stylesModuleUrl( /** @type {?} */((\n            stylesheetMeta.moduleUrl)), this._styleCompiler.needsStyleShim(compMeta), fileSuffix));\n        _createTypeReferenceStub(styleContext, Identifiers.ComponentFactory);\n        generatedFiles.push(this._codegenSourceModule( /** @type {?} */((stylesheetMeta.moduleUrl)), styleContext));\n      });\n\n      partialFactoryStubRequired = true;\n    });\n\n    // If we need all the stubs to be generated then insert an arbitrary reference into the stub\n    if ((partialFactoryStubRequired || !partial) && ngFactoryOutputCtx.statements.length <= 0) {\n      _createTypeReferenceStub(ngFactoryOutputCtx, Identifiers.ComponentFactory);\n    }\n    if ((partialJitStubRequired || !partial || (pipes && pipes.length > 0)) &&\n        jitSummaryOutputCtx.statements.length <= 0) {\n      _createTypeReferenceStub(jitSummaryOutputCtx, Identifiers.ComponentFactory);\n    }\n\n    // Note: we are creating stub ngfactory/ngsummary for all source files,\n    // as the real calculation requires almost the same logic as producing the real content for\n    // them. Our pipeline will filter out empty ones at the end. Because of this filter, however,\n    // stub references to the reference type needs to be generated even if the user cannot\n    // refer to type from the `.d.ts` file to prevent the file being elided from the emit.\n    generatedFiles.push(this._codegenSourceModule(srcFileUrl, ngFactoryOutputCtx));\n    if (this._enableSummariesForJit) {\n      generatedFiles.push(this._codegenSourceModule(srcFileUrl, jitSummaryOutputCtx));\n    }\n\n    return generatedFiles;\n  }\n/**\n * @param {?} srcFileUrl\n * @param {?} ngModuleByPipeOrDirective\n * @param {?} directives\n * @param {?} pipes\n * @param {?} ngModules\n * @param {?} injectables\n * @return {?}\n */\n\nprivate _compileImplFile(\n      srcFileUrl: string, ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>,\n      directives: StaticSymbol[], pipes: StaticSymbol[], ngModules: StaticSymbol[],\n      injectables: StaticSymbol[]): GeneratedFile[] {\n    const /** @type {?} */ fileSuffix = splitTypescriptSuffix(srcFileUrl, true)[1];\n    const /** @type {?} */ generatedFiles: GeneratedFile[] = [];\n\n    const /** @type {?} */ outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n\n    generatedFiles.push(\n        ...this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx));\n\n    // compile all ng modules\n    ngModules.forEach((ngModuleType) => this._compileModule(outputCtx, ngModuleType));\n\n    // compile components\n    directives.forEach((dirType) => {\n      const /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata( /** @type {?} */((<any>dirType)));\n      if (!compMeta.isComponent) {\n        return;\n      }\n      const /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);\n      if (!ngModule) {\n        throw new Error(\n            `Internal Error: cannot determine the module for component ${identifierName(compMeta.type)}!`);\n      }\n\n      // compile styles\n      const /** @type {?} */ componentStylesheet = this._styleCompiler.compileComponent(outputCtx, compMeta); /** @type {?} */((\n      // Note: compMeta is a component and therefore template is non null.\n      compMeta.template)).externalStylesheets.forEach((stylesheetMeta) => {\n        generatedFiles.push(\n            this._codegenStyles( /** @type {?} */((stylesheetMeta.moduleUrl)), compMeta, stylesheetMeta, fileSuffix));\n      });\n\n      // compile components\n      const /** @type {?} */ compViewVars = this._compileComponent(\n          outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet,\n          fileSuffix);\n      this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\n    });\n    if (outputCtx.statements.length > 0) {\n      const /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\n      generatedFiles.unshift(srcModule);\n    }\n    return generatedFiles;\n  }\n/**\n * @param {?} srcFileUrl\n * @param {?} directives\n * @param {?} pipes\n * @param {?} ngModules\n * @param {?} injectables\n * @param {?} ngFactoryCtx\n * @return {?}\n */\n\nprivate _createSummary(\n      srcFileUrl: string, directives: StaticSymbol[], pipes: StaticSymbol[],\n      ngModules: StaticSymbol[], injectables: StaticSymbol[],\n      ngFactoryCtx: OutputContext): GeneratedFile[] {\n    const /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)\n                                .map(symbol => this._symbolResolver.resolveSymbol(symbol));\n    const /** @type {?} */ typeData: {\n      summary: CompileTypeSummary,\n      metadata: CompileNgModuleMetadata | CompileDirectiveMetadata | CompilePipeMetadata |\n          CompileTypeMetadata\n    }[] =\n        [\n          ...ngModules.map(ref => ({\n                             summary: /** @type {?} */(( this._metadataResolver.getNgModuleSummary(ref))),\n                             metadata: /** @type {?} */(( this._metadataResolver.getNgModuleMetadata(ref)))\n                           })),\n          ...directives.map(ref => ({\n                              summary: /** @type {?} */(( this._metadataResolver.getDirectiveSummary(ref))),\n                              metadata: /** @type {?} */(( this._metadataResolver.getDirectiveMetadata(ref)))\n                            })),\n          ...pipes.map(ref => ({\n                         summary: /** @type {?} */(( this._metadataResolver.getPipeSummary(ref))),\n                         metadata: /** @type {?} */(( this._metadataResolver.getPipeMetadata(ref)))\n                       })),\n          ...injectables.map(ref => ({\n                               summary: /** @type {?} */(( this._metadataResolver.getInjectableSummary(ref))),\n                               metadata: /** @type {?} */(( this._metadataResolver.getInjectableSummary(ref))).type\n                             }))\n        ];\n    const /** @type {?} */ forJitOutputCtx = this._createOutputContext(summaryForJitFileName(srcFileUrl, true));\n    const {json, exportAs} = serializeSummaries(\n        forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData);\n    exportAs.forEach((entry) => {\n      ngFactoryCtx.statements.push(\n          o.variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [\n            o.StmtModifier.Exported\n          ]));\n    });\n    const /** @type {?} */ summaryJson = new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);\n    if (this._enableSummariesForJit) {\n      return [summaryJson, this._codegenSourceModule(srcFileUrl, forJitOutputCtx)];\n    };\n\n    return [summaryJson];\n  }\n/**\n * @param {?} outputCtx\n * @param {?} ngModuleType\n * @return {?}\n */\n\nprivate _compileModule(outputCtx: OutputContext, ngModuleType: StaticSymbol): void {\n    const /** @type {?} */ ngModule = /** @type {?} */(( this._metadataResolver.getNgModuleMetadata(ngModuleType)));\n    const /** @type {?} */ providers: CompileProviderMetadata[] = [];\n\n    if (this._localeId) {\n      providers.push({\n        token: createTokenForExternalReference(this._reflector, Identifiers.LOCALE_ID),\n        useValue: this._localeId,\n      });\n    }\n\n    if (this._translationFormat) {\n      providers.push({\n        token: createTokenForExternalReference(this._reflector, Identifiers.TRANSLATIONS_FORMAT),\n        useValue: this._translationFormat\n      });\n    }\n\n    this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\n  }\n/**\n * @param {?} outputCtx\n * @param {?} compMeta\n * @param {?} ngModule\n * @param {?} fileSuffix\n * @return {?}\n */\n\nprivate _compileComponentFactory(\n      outputCtx: OutputContext, compMeta: CompileDirectiveMetadata,\n      ngModule: CompileNgModuleMetadata, fileSuffix: string): void {\n    const /** @type {?} */ hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);\n    const /** @type {?} */ hostMeta = createHostComponentMeta(\n        hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));\n    const /** @type {?} */ hostViewFactoryVar =\n        this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix)\n            .viewClassVar;\n    const /** @type {?} */ compFactoryVar = componentFactoryName(compMeta.type.reference);\n    const /** @type {?} */ inputsExprs: o.LiteralMapEntry[] = [];\n    for (let /** @type {?} */ propName in compMeta.inputs) {\n      const /** @type {?} */ templateName = compMeta.inputs[propName];\n      // Don't quote so that the key gets minified...\n      inputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n    }\n    const /** @type {?} */ outputsExprs: o.LiteralMapEntry[] = [];\n    for (let /** @type {?} */ propName in compMeta.outputs) {\n      const /** @type {?} */ templateName = compMeta.outputs[propName];\n      // Don't quote so that the key gets minified...\n      outputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n    }\n\n    outputCtx.statements.push(\n        o.variable(compFactoryVar)\n            .set(o.importExpr(Identifiers.createComponentFactory).callFn([\n              o.literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference),\n              o.variable(hostViewFactoryVar), new o.LiteralMapExpr(inputsExprs),\n              new o.LiteralMapExpr(outputsExprs),\n              o.literalArr( /** @type {?} */((\n                  compMeta.template)).ngContentSelectors.map(selector => o.literal(selector)))\n            ]))\n            .toDeclStmt(\n                o.importType(\n                    Identifiers.ComponentFactory,\n                    [ /** @type {?} */((o.expressionType(outputCtx.importExpr(compMeta.type.reference))))],\n                    [o.TypeModifier.Const]),\n                [o.StmtModifier.Final, o.StmtModifier.Exported]));\n  }\n/**\n * @param {?} outputCtx\n * @param {?} compMeta\n * @param {?} ngModule\n * @param {?} directiveIdentifiers\n * @param {?} componentStyles\n * @param {?} fileSuffix\n * @return {?}\n */\n\nprivate _compileComponent(\n      outputCtx: OutputContext, compMeta: CompileDirectiveMetadata,\n      ngModule: CompileNgModuleMetadata, directiveIdentifiers: CompileIdentifierMetadata[],\n      componentStyles: CompiledStylesheet|null, fileSuffix: string): ViewCompileResult {\n    const /** @type {?} */ directives =\n        directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n    const /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(\n        pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n\n    const {template: parsedTemplate, pipes: usedPipes} = this._templateParser.parse(\n        compMeta, /** @type {?} */(( /** @type {?} */(( compMeta.template)).template)), directives, pipes, ngModule.schemas,\n        templateSourceUrl(ngModule.type, compMeta, /** @type {?} */(( compMeta.template))));\n    const /** @type {?} */ stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);\n    const /** @type {?} */ viewResult = this._viewCompiler.compileComponent(\n        outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\n    if (componentStyles) {\n      _resolveStyleStatements(\n          this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta),\n          fileSuffix);\n    }\n    return viewResult;\n  }\n/**\n * @param {?} genFilePath\n * @return {?}\n */\n\nprivate _createOutputContext(genFilePath: string): OutputContext {\n    const /** @type {?} */ importExpr = (symbol: StaticSymbol, typeParams: o.Type[] | null = null) => {\n      if (!(symbol instanceof StaticSymbol)) {\n        throw new Error(`Internal error: unknown identifier ${JSON.stringify(symbol)}`);\n      }\n      const /** @type {?} */ arity = this._symbolResolver.getTypeArity(symbol) || 0;\n      const {filePath, name, members} = this._symbolResolver.getImportAs(symbol) || symbol;\n      const /** @type {?} */ importModule = this._symbolResolver.fileNameToModuleName(filePath, genFilePath);\n\n      // It should be good enough to compare filePath to genFilePath and if they are equal\n      // there is a self reference. However, ngfactory files generate to .ts but their\n      // symbols have .d.ts so a simple compare is insufficient. They should be canonical\n      // and is tracked by #17705.\n      const /** @type {?} */ selfReference = this._symbolResolver.fileNameToModuleName(genFilePath, genFilePath);\n      const /** @type {?} */ moduleName = importModule === selfReference ? null : importModule;\n\n      // If we are in a type expression that refers to a generic type then supply\n      // the required type parameters. If there were not enough type parameters\n      // supplied, supply any as the type. Outside a type expression the reference\n      // should not supply type parameters and be treated as a simple value reference\n      // to the constructor function itself.\n      const /** @type {?} */ suppliedTypeParams = typeParams || [];\n      const /** @type {?} */ missingTypeParamsCount = arity - suppliedTypeParams.length;\n      const /** @type {?} */ allTypeParams =\n          suppliedTypeParams.concat(new Array(missingTypeParamsCount).fill(o.DYNAMIC_TYPE));\n      return members.reduce(\n          (expr, memberName) => expr.prop(memberName), /** @type {?} */((\n          <o.Expression>o.importExpr(\n              new o.ExternalReference(moduleName, name, null), allTypeParams))));\n    };\n\n    return {statements: [], genFilePath, importExpr};\n  }\n/**\n * @param {?} srcFileUrl\n * @param {?} compMeta\n * @param {?} stylesheetMetadata\n * @param {?} fileSuffix\n * @return {?}\n */\n\nprivate _codegenStyles(\n      srcFileUrl: string, compMeta: CompileDirectiveMetadata,\n      stylesheetMetadata: CompileStylesheetMetadata, fileSuffix: string): GeneratedFile {\n    const /** @type {?} */ outputCtx = this._createOutputContext(_stylesModuleUrl( /** @type {?} */((\n        stylesheetMetadata.moduleUrl)), this._styleCompiler.needsStyleShim(compMeta), fileSuffix));\n    const /** @type {?} */ compiledStylesheet =\n        this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata);\n    _resolveStyleStatements(\n        this._symbolResolver, compiledStylesheet, this._styleCompiler.needsStyleShim(compMeta),\n        fileSuffix);\n    return this._codegenSourceModule(srcFileUrl, outputCtx);\n  }\n/**\n * @param {?} srcFileUrl\n * @param {?} ctx\n * @return {?}\n */\n\nprivate _codegenSourceModule(srcFileUrl: string, ctx: OutputContext): GeneratedFile {\n    return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\n  }\n}\n\nfunction AotCompiler_tsickle_Closure_declarations() {\n/** @type {?} */\nAotCompiler.prototype._config;\n/** @type {?} */\nAotCompiler.prototype._host;\n/** @type {?} */\nAotCompiler.prototype._reflector;\n/** @type {?} */\nAotCompiler.prototype._metadataResolver;\n/** @type {?} */\nAotCompiler.prototype._templateParser;\n/** @type {?} */\nAotCompiler.prototype._styleCompiler;\n/** @type {?} */\nAotCompiler.prototype._viewCompiler;\n/** @type {?} */\nAotCompiler.prototype._ngModuleCompiler;\n/** @type {?} */\nAotCompiler.prototype._outputEmitter;\n/** @type {?} */\nAotCompiler.prototype._summaryResolver;\n/** @type {?} */\nAotCompiler.prototype._localeId;\n/** @type {?} */\nAotCompiler.prototype._translationFormat;\n/** @type {?} */\nAotCompiler.prototype._enableSummariesForJit;\n/** @type {?} */\nAotCompiler.prototype._symbolResolver;\n}\n\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @return {?}\n */\nfunction _createTypeReferenceStub(outputCtx: OutputContext, reference: o.ExternalReference) {\n  outputCtx.statements.push(o.importExpr(reference).toStmt());\n}\n/**\n * @param {?} symbolResolver\n * @param {?} compileResult\n * @param {?} needsShim\n * @param {?} fileSuffix\n * @return {?}\n */\nfunction _resolveStyleStatements(\n    symbolResolver: StaticSymbolResolver, compileResult: CompiledStylesheet, needsShim: boolean,\n    fileSuffix: string): void {\n  compileResult.dependencies.forEach((dep) => {\n    dep.setValue(symbolResolver.getStaticSymbol(\n        _stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\n  });\n}\n/**\n * @param {?} stylesheetUrl\n * @param {?} shim\n * @param {?} suffix\n * @return {?}\n */\nfunction _stylesModuleUrl(stylesheetUrl: string, shim: boolean, suffix: string): string {\n  return `${stylesheetUrl}${shim ? '.shim' : ''}.ngstyle${suffix}`;\n}\n/**\n * @record\n */\nexport function NgAnalyzedModules() {}\n\n\nfunction NgAnalyzedModules_tsickle_Closure_declarations() {\n/** @type {?} */\nNgAnalyzedModules.prototype.ngModules;\n/** @type {?} */\nNgAnalyzedModules.prototype.ngModuleByPipeOrDirective;\n/** @type {?} */\nNgAnalyzedModules.prototype.files;\n/** @type {?|undefined} */\nNgAnalyzedModules.prototype.symbolsMissingModule;\n}\n\n\nexport interface NgAnalyzedModules {\n  ngModules: CompileNgModuleMetadata[];\n  ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>;\n  files: Array<{\n    srcUrl: string,\n    directives: StaticSymbol[],\n    pipes: StaticSymbol[],\n    ngModules: StaticSymbol[],\n    injectables: StaticSymbol[]\n  }>;\n  symbolsMissingModule?: StaticSymbol[];\n}\n/**\n * @record\n */\nexport function NgAnalyzeModulesHost() {}\n\n\nfunction NgAnalyzeModulesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nNgAnalyzeModulesHost.prototype.isSourceFile;\n}\n\n\nexport interface NgAnalyzeModulesHost { isSourceFile(filePath: string): boolean; }\n/**\n * @param {?} programStaticSymbols\n * @param {?} host\n * @param {?} metadataResolver\n * @return {?}\n */\nexport function analyzeNgModules(\n    programStaticSymbols: StaticSymbol[], host: NgAnalyzeModulesHost,\n    metadataResolver: CompileMetadataResolver): NgAnalyzedModules {\n  const {ngModules, symbolsMissingModule} =\n      _createNgModules(programStaticSymbols, host, metadataResolver);\n  return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);\n}\n/**\n * @param {?} programStaticSymbols\n * @param {?} host\n * @param {?} metadataResolver\n * @return {?}\n */\nexport function analyzeAndValidateNgModules(\n    programStaticSymbols: StaticSymbol[], host: NgAnalyzeModulesHost,\n    metadataResolver: CompileMetadataResolver): NgAnalyzedModules {\n  const /** @type {?} */ result = analyzeNgModules(programStaticSymbols, host, metadataResolver);\n  if (result.symbolsMissingModule && result.symbolsMissingModule.length) {\n    const /** @type {?} */ messages = result.symbolsMissingModule.map(\n        s =>\n            `Cannot determine the module for class ${s.name} in ${s.filePath}! Add ${s.name} to the NgModule to fix it.`);\n    throw syntaxError(messages.join('\\n'));\n  }\n  return result;\n}\n/**\n * @param {?} programSymbols\n * @param {?} ngModuleMetas\n * @param {?} symbolsMissingModule\n * @param {?} metadataResolver\n * @return {?}\n */\nfunction _analyzeNgModules(\n    programSymbols: StaticSymbol[], ngModuleMetas: CompileNgModuleMetadata[],\n    symbolsMissingModule: StaticSymbol[],\n    metadataResolver: CompileMetadataResolver): NgAnalyzedModules {\n  const /** @type {?} */ moduleMetasByRef = new Map<any, CompileNgModuleMetadata>();\n  ngModuleMetas.forEach((ngModule) => moduleMetasByRef.set(ngModule.type.reference, ngModule));\n  const /** @type {?} */ ngModuleByPipeOrDirective = new Map<StaticSymbol, CompileNgModuleMetadata>();\n  const /** @type {?} */ ngModulesByFile = new Map<string, StaticSymbol[]>();\n  const /** @type {?} */ ngDirectivesByFile = new Map<string, StaticSymbol[]>();\n  const /** @type {?} */ ngPipesByFile = new Map<string, StaticSymbol[]>();\n  const /** @type {?} */ ngInjectablesByFile = new Map<string, StaticSymbol[]>();\n  const /** @type {?} */ filePaths = new Set<string>();\n\n  // Make sure we produce an analyzed file for each input file\n  programSymbols.forEach((symbol) => {\n    const /** @type {?} */ filePath = symbol.filePath;\n    filePaths.add(filePath);\n    if (metadataResolver.isInjectable(symbol)) {\n      ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));\n    }\n  });\n\n  // Looping over all modules to construct:\n  // - a map from file to modules `ngModulesByFile`,\n  // - a map from file to directives `ngDirectivesByFile`,\n  // - a map from file to pipes `ngPipesByFile`,\n  // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.\n  ngModuleMetas.forEach((ngModuleMeta) => {\n    const /** @type {?} */ srcFileUrl = ngModuleMeta.type.reference.filePath;\n    filePaths.add(srcFileUrl);\n    ngModulesByFile.set(\n        srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));\n\n    ngModuleMeta.declaredDirectives.forEach((dirIdentifier) => {\n      const /** @type {?} */ fileUrl = dirIdentifier.reference.filePath;\n      filePaths.add(fileUrl);\n      ngDirectivesByFile.set(\n          fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));\n      ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);\n    });\n    ngModuleMeta.declaredPipes.forEach((pipeIdentifier) => {\n      const /** @type {?} */ fileUrl = pipeIdentifier.reference.filePath;\n      filePaths.add(fileUrl);\n      ngPipesByFile.set(\n          fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));\n      ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);\n    });\n  });\n\n  const /** @type {?} */ files: {\n    srcUrl: string,\n    directives: StaticSymbol[],\n    pipes: StaticSymbol[],\n    ngModules: StaticSymbol[],\n    injectables: StaticSymbol[]\n  }[] = [];\n\n  filePaths.forEach((srcUrl) => {\n    const /** @type {?} */ directives = ngDirectivesByFile.get(srcUrl) || [];\n    const /** @type {?} */ pipes = ngPipesByFile.get(srcUrl) || [];\n    const /** @type {?} */ ngModules = ngModulesByFile.get(srcUrl) || [];\n    const /** @type {?} */ injectables = ngInjectablesByFile.get(srcUrl) || [];\n    files.push({srcUrl, directives, pipes, ngModules, injectables});\n  });\n\n  return {\n    // map directive/pipe to module\n    ngModuleByPipeOrDirective,\n    // list modules and directives for every source file\n    files,\n    ngModules: ngModuleMetas, symbolsMissingModule\n  };\n}\n/**\n * @param {?} staticSymbolResolver\n * @param {?} files\n * @param {?} host\n * @return {?}\n */\nexport function extractProgramSymbols(\n    staticSymbolResolver: StaticSymbolResolver, files: string[],\n    host: NgAnalyzeModulesHost): StaticSymbol[] {\n  const /** @type {?} */ staticSymbols: StaticSymbol[] = [];\n  files.filter(fileName => host.isSourceFile(fileName)).forEach(sourceFile => {\n    staticSymbolResolver.getSymbolsOf(sourceFile).forEach((symbol) => {\n      const /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n      const /** @type {?} */ symbolMeta = resolvedSymbol.metadata;\n      if (symbolMeta) {\n        if (symbolMeta.__symbolic != 'error') {\n          // Ignore symbols that are only included to record error information.\n          staticSymbols.push(resolvedSymbol.symbol);\n        }\n      }\n    });\n  });\n\n  return staticSymbols;\n}\n/**\n * @param {?} programStaticSymbols\n * @param {?} host\n * @param {?} metadataResolver\n * @return {?}\n */\nfunction _createNgModules(\n    programStaticSymbols: StaticSymbol[], host: NgAnalyzeModulesHost,\n    metadataResolver: CompileMetadataResolver):\n    {ngModules: CompileNgModuleMetadata[], symbolsMissingModule: StaticSymbol[]} {\n  const /** @type {?} */ ngModules = new Map<any, CompileNgModuleMetadata>();\n  const /** @type {?} */ programPipesAndDirectives: StaticSymbol[] = [];\n  const /** @type {?} */ ngModulePipesAndDirective = new Set<StaticSymbol>();\n\n  const /** @type {?} */ addNgModule = (staticSymbol: any) => {\n    if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {\n      return false;\n    }\n    const /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);\n    if (ngModule) {\n      ngModules.set(ngModule.type.reference, ngModule);\n      ngModule.declaredDirectives.forEach((dir) => ngModulePipesAndDirective.add(dir.reference));\n      ngModule.declaredPipes.forEach((pipe) => ngModulePipesAndDirective.add(pipe.reference));\n      // For every input module add the list of transitively included modules\n      ngModule.transitiveModule.modules.forEach(modMeta => addNgModule(modMeta.reference));\n    }\n    return !!ngModule;\n  };\n  programStaticSymbols.forEach((staticSymbol) => {\n    if (!addNgModule(staticSymbol) &&\n        (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {\n      programPipesAndDirectives.push(staticSymbol);\n    }\n  });\n\n  // Throw an error if any of the program pipe or directives is not declared by a module\n  const /** @type {?} */ symbolsMissingModule =\n      programPipesAndDirectives.filter(s => !ngModulePipesAndDirective.has(s));\n\n  return {ngModules: Array.from(ngModules.values()), symbolsMissingModule};\n}\n"]}