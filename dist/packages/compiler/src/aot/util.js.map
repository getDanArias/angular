{"version":3,"sources":["../../../../../packages/compiler/src/aot/util.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH;;;;;;GAMG;AACH,MALC,gBAAA,CAAK,uBAAA,GAA0B,kCAAA,CAAmC;AAMnE,MAAM,gBAAgB,CALhB,cAAA,GAAiB,6BAAA,CAA8B;AAMrD,MAAM,gBAAgB,CALhB,gBAAA,GAAmB,2BAAA,CAA4B;AAMrD,MAAM,gBAAgB,CALhB,gBAAA,GAAmB,eAAA,CAAgB;AAMzC,MAAM,gBAAgB,CALhB,gBAAA,GAAmB,YAAA,CAAa;AAMtC;;;;GAIG;AACH,MATC,4BAAiC,QAAU,EAAQ,eAAA,GAAkB,KAAA;IAUpE,MAAM,gBAAgB,CAThB,aAAA,GAAgB,qBAAA,CAAsB,QAAC,EAAS,eAAA,CAAgB,CAAC;IAUvE,MAAM,CATC,GAAA,aAAI,CAAa,CAAC,CAAC,aAAC,aAAa,CAAa,CAAC,CAAC,EAAC,CAAE;AAU5D,CAAC;AACD;;;GAGG;AACH,MAZC,mCAAwC,QAAU;IAajD,MAAM,CAZC,QAAA,CAAS,OAAC,CAAO,cAAC,EAAe,GAAA,CAAI,CAAC;AAa/C,CAAC;AACD;;;GAGG;AACH,MAfC,0BAA+B,QAAU;IAgBxC,MAAM,CAfC,cAAA,CAAe,IAAC,CAAI,QAAC,CAAQ,CAAC;AAgBvC,CAAC;AACD;;;;GAIG;AACH,MAnBC,gCAAqC,IAAM,EAAQ,eAAA,GAAkB,KAAA;IAoBpE,EAAE,CAAC,CAAC,IAnBC,CAAI,QAAC,CAAQ,OAAC,CAAO,CAAC,CAAC,CAAA;QAoB1B,MAAM,CAnBC,CAAA,IAAE,CAAI,KAAC,CAAK,CAAC,EAAE,CAAA,CAAE,CAAC,EAAE,eAAA,GAAkB,KAAA,GAAQ,OAAA,CAAQ,CAAC;IAoBhE,CAAC;IAED,MAAM,gBAAgB,CAnBhB,OAAA,GAAU,IAAA,CAAK,WAAC,CAAW,GAAC,CAAG,CAAC;IAqBtC,EAAE,CAAC,CAAC,OAnBC,KAAW,CAAA,CAAE,CAAC,CAAC,CAAA;QAoBlB,MAAM,CAnBC,CAAA,IAAE,CAAI,SAAC,CAAS,CAAC,EAAE,OAAA,CAAQ,EAAE,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,CAAC,CAAC;IAoB/D,CAAC;IAED,MAAM,CAnBC,CAAA,IAAE,EAAK,EAAA,CAAG,CAAC;AAoBpB,CAAC;AACD;;;GAGG;AACH,MAtBC,0BAA+B,QAAU;IAuBxC,MAAM,gBAAgB,CAtBhB,qBAAA,GAAwB,QAAA,CAAS,OAAC,CAAO,uBAAC,EAAwB,EAAA,CAAG,CAAC;IAuB5E,MAAM,CAtBC,GAAA,qBAAI,iBAAqB,CAAiB;AAuBnD,CAAC;AACD;;;;GAIG;AACH,MA1BC,gCAAqC,QAAU,EAAQ,eAAA,GAAkB,KAAA;IA2BxE,MAAM,gBAAgB,CA1BhB,aAAA,GAAgB,qBAAA,CAAsB,wBAAC,CAAwB,QAAC,CAAQ,EAAE,eAAA,CAAgB,CAAC;IA2BjG,MAAM,CA1BC,GAAA,aAAI,CAAa,CAAC,CAAC,aAAC,aAAa,CAAa,CAAC,CAAC,EAAC,CAAE;AA2B5D,CAAC;AACD;;;GAGG;AACH,MA7BC,uCAA4C,QAAU;IA8BrD,MAAM,CA7BC,QAAA,CAAS,OAAC,CAAO,gBAAC,EAAiB,GAAA,CAAI,CAAC;AA8BjD,CAAC;AACD;;;GAGG;AACH,MAhCC,4BAAiC,UAAY;IAiC5C,MAAM,CAhCC,GAAA,UAAI,WAAU,CAAW;AAiClC,CAAC;AACD;;;GAGG;AACH,MAnCC,uCAA4C,UAAY;IAoCvD,MAAM,CAnCC,UAAA,CAAW,OAAC,CAAO,gBAAC,EAAiB,EAAA,CAAG,CAAC;AAoClD,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\nconst /** @type {?} */ GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\nconst /** @type {?} */ GENERATED_MODULE = /\\.ngfactory$|\\.ngsummary$/;\nconst /** @type {?} */ JIT_SUMMARY_FILE = /\\.ngsummary\\./;\nconst /** @type {?} */ JIT_SUMMARY_NAME = /NgSummary$/;\n/**\n * @param {?} filePath\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function ngfactoryFilePath(filePath: string, forceSourceFile = false): string {\n  const /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n  return `${urlWithSuffix[0]}.ngfactory${urlWithSuffix[1]}`;\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function stripGeneratedFileSuffix(filePath: string): string {\n  return filePath.replace(GENERATED_FILE, '.');\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function isGeneratedFile(filePath: string): boolean {\n  return GENERATED_FILE.test(filePath);\n}\n/**\n * @param {?} path\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function splitTypescriptSuffix(path: string, forceSourceFile = false): string[] {\n  if (path.endsWith('.d.ts')) {\n    return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n  }\n\n  const /** @type {?} */ lastDot = path.lastIndexOf('.');\n\n  if (lastDot !== -1) {\n    return [path.substring(0, lastDot), path.substring(lastDot)];\n  }\n\n  return [path, ''];\n}\n/**\n * @param {?} fileName\n * @return {?}\n */\nexport function summaryFileName(fileName: string): string {\n  const /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n  return `${fileNameWithoutSuffix}.ngsummary.json`;\n}\n/**\n * @param {?} fileName\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function summaryForJitFileName(fileName: string, forceSourceFile = false): string {\n  const /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n  return `${urlWithSuffix[0]}.ngsummary${urlWithSuffix[1]}`;\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function stripSummaryForJitFileSuffix(filePath: string): string {\n  return filePath.replace(JIT_SUMMARY_FILE, '.');\n}\n/**\n * @param {?} symbolName\n * @return {?}\n */\nexport function summaryForJitName(symbolName: string): string {\n  return `${symbolName}NgSummary`;\n}\n/**\n * @param {?} symbolName\n * @return {?}\n */\nexport function stripSummaryForJitNameSuffix(symbolName: string): string {\n  return symbolName.replace(JIT_SUMMARY_NAME, '');\n}"]}