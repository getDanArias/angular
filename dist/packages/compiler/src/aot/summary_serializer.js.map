{"version":3,"sources":["../../../../../packages/compiler/src/aot/summary_serializer.ts"],"names":[],"mappings":"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","file":"summary_serializer.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileNgModuleSummary, CompilePipeMetadata, CompileProviderMetadata, CompileSummaryKind, CompileTypeMetadata, CompileTypeSummary} from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport {Summary, SummaryResolver} from '../summary_resolver';\nimport {OutputContext, ValueTransformer, ValueVisitor, visitValue} from '../util';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {ResolvedStaticSymbol, StaticSymbolResolver} from './static_symbol_resolver';\nimport {summaryForJitFileName, summaryForJitName} from './util';\n/**\n * @param {?} forJitCtx\n * @param {?} summaryResolver\n * @param {?} symbolResolver\n * @param {?} symbols\n * @param {?} types\n * @return {?}\n */\nexport function serializeSummaries(\n    forJitCtx: OutputContext, summaryResolver: SummaryResolver<StaticSymbol>,\n    symbolResolver: StaticSymbolResolver, symbols: ResolvedStaticSymbol[], types: {\n      summary: CompileTypeSummary,\n      metadata: CompileNgModuleMetadata | CompileDirectiveMetadata | CompilePipeMetadata |\n          CompileTypeMetadata\n    }[]): {json: string, exportAs: {symbol: StaticSymbol, exportAs: string}[]} {\n  const /** @type {?} */ toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver);\n  const /** @type {?} */ forJitSerializer = new ForJitSerializer(forJitCtx, symbolResolver);\n\n  // for symbols, we use everything except for the class metadata itself\n  // (we keep the statics though), as the class metadata is contained in the\n  // CompileTypeSummary.\n  symbols.forEach(\n      (resolvedSymbol) => toJsonSerializer.addOrMergeSummary(\n          {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata}));\n  // Add summaries that are referenced by the given symbols (transitively)\n  // Note: the serializer.symbols array might be growing while\n  // we execute the loop!\n  for (let /** @type {?} */ processedIndex = 0; processedIndex < toJsonSerializer.symbols.length; processedIndex++) {\n    const /** @type {?} */ symbol = toJsonSerializer.symbols[processedIndex];\n    if (summaryResolver.isLibraryFile(symbol.filePath)) {\n      let /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);\n      if (!summary) {\n        // some symbols might originate from a plain typescript library\n        // that just exported .d.ts and .metadata.json files, i.e. where no summary\n        // files were created.\n        const /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);\n        if (resolvedSymbol) {\n          summary = {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata};\n        }\n      }\n      if (summary) {\n        if (summary.type) {\n          forJitSerializer.addLibType(summary.type);\n        }\n        toJsonSerializer.addOrMergeSummary(summary);\n      }\n    }\n  }\n\n  // Add type summaries.\n  // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n  // as the type summaries already contain the transitive data that they require\n  // (in a minimal way).\n  types.forEach(({summary, metadata}) => {\n    forJitSerializer.addSourceType(summary, metadata);\n    toJsonSerializer.addOrMergeSummary(\n        {symbol: summary.type.reference, metadata: null, type: summary});\n    if (summary.summaryKind === CompileSummaryKind.NgModule) {\n      const /** @type {?} */ ngModuleSummary = /** @type {?} */(( <CompileNgModuleSummary>summary));\n      ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {\n        const /** @type {?} */ symbol: StaticSymbol = id.reference;\n        if (summaryResolver.isLibraryFile(symbol.filePath)) {\n          const /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);\n          if (summary) {\n            toJsonSerializer.addOrMergeSummary(summary);\n          }\n        }\n      });\n    }\n  });\n  const {json, exportAs} = toJsonSerializer.serialize();\n  forJitSerializer.serialize(exportAs);\n  return {json, exportAs};\n}\n/**\n * @param {?} symbolCache\n * @param {?} json\n * @return {?}\n */\nexport function deserializeSummaries(symbolCache: StaticSymbolCache, json: string):\n    {summaries: Summary<StaticSymbol>[], importAs: {symbol: StaticSymbol, importAs: string}[]} {\n  const /** @type {?} */ deserializer = new FromJsonDeserializer(symbolCache);\n  return deserializer.deserialize(json);\n}\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @return {?}\n */\nexport function createForJitStub(outputCtx: OutputContext, reference: StaticSymbol) {\n  return createSummaryForJitFunction(outputCtx, reference, o.NULL_EXPR);\n}\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @param {?} value\n * @return {?}\n */\nfunction createSummaryForJitFunction(\n    outputCtx: OutputContext, reference: StaticSymbol, value: o.Expression) {\n  const /** @type {?} */ fnName = summaryForJitName(reference.name);\n  outputCtx.statements.push(\n      o.fn([], [new o.ReturnStatement(value)], new o.ArrayType(o.DYNAMIC_TYPE)).toDeclStmt(fnName, [\n        o.StmtModifier.Final, o.StmtModifier.Exported\n      ]));\n}\nclass ToJsonSerializer extends ValueTransformer {\n  // Note: This only contains symbols without members.\n  symbols: StaticSymbol[] = [];\nprivate indexBySymbol = new Map<StaticSymbol, number>();\nprivate processedSummaryBySymbol = new Map<StaticSymbol, any>();\nprivate processedSummaries: any[] = [];\n/**\n * @param {?} symbolResolver\n * @param {?} summaryResolver\n */\nconstructor(\nprivate symbolResolver: StaticSymbolResolver,\nprivate summaryResolver: SummaryResolver<StaticSymbol>) {\n    super();\n  }\n/**\n * @param {?} summary\n * @return {?}\n */\naddOrMergeSummary(summary: Summary<StaticSymbol>) {\n    let /** @type {?} */ symbolMeta = summary.metadata;\n    if (symbolMeta && symbolMeta.__symbolic === 'class') {\n      // For classes, we keep everything except their class decorators.\n      // We need to keep e.g. the ctor args, method names, method decorators\n      // so that the class can be extended in another compilation unit.\n      // We don't keep the class decorators as\n      // 1) they refer to data\n      //   that should not cause a rebuild of downstream compilation units\n      //   (e.g. inline templates of @Component, or @NgModule.declarations)\n      // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\n      const /** @type {?} */ clone: {[key: string]: any} = {};\n      Object.keys(symbolMeta).forEach((propName) => {\n        if (propName !== 'decorators') {\n          clone[propName] = symbolMeta[propName];\n        }\n      });\n      symbolMeta = clone;\n    }\n\n    let /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n    if (!processedSummary) {\n      processedSummary = this.processValue({symbol: summary.symbol});\n      this.processedSummaries.push(processedSummary);\n      this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n    }\n    // Note: == on purpose to compare with undefined!\n    if (processedSummary.metadata == null && symbolMeta != null) {\n      processedSummary.metadata = this.processValue(symbolMeta);\n    }\n    // Note: == on purpose to compare with undefined!\n    if (processedSummary.type == null && summary.type != null) {\n      processedSummary.type = this.processValue(summary.type);\n    }\n  }\n/**\n * @return {?}\n */\nserialize(): {json: string, exportAs: {symbol: StaticSymbol, exportAs: string}[]} {\n    const /** @type {?} */ exportAs: {symbol: StaticSymbol, exportAs: string}[] = [];\n    const /** @type {?} */ json = JSON.stringify({\n      summaries: this.processedSummaries,\n      symbols: this.symbols.map((symbol, index) => {\n        symbol.assertNoMembers();\n        let /** @type {?} */ importAs: string = /** @type {?} */(( undefined));\n        if (this.summaryResolver.isLibraryFile(symbol.filePath)) {\n          importAs = `${symbol.name}_${index}`;\n          exportAs.push({symbol, exportAs: importAs});\n        }\n        return {\n          __symbol: index,\n          name: symbol.name,\n          // We convert the source filenames tinto output filenames,\n          // as the generated summary file will be used when the current\n          // compilation unit is used as a library\n          filePath: this.summaryResolver.getLibraryFileName(symbol.filePath),\n          importAs: importAs\n        };\n      })\n    });\n    return {json, exportAs};\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n\nprivate processValue(value: any): any { return visitValue(value, this, null); }\n/**\n * @param {?} value\n * @param {?} context\n * @return {?}\n */\nvisitOther(value: any, context: any): any {\n    if (value instanceof StaticSymbol) {\n      const /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n      let /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);\n      // Note: == on purpose to compare with undefined!\n      if (index == null) {\n        index = this.indexBySymbol.size;\n        this.indexBySymbol.set(baseSymbol, index);\n        this.symbols.push(baseSymbol);\n      }\n      return {__symbol: index, members: value.members};\n    }\n  }\n}\n\nfunction ToJsonSerializer_tsickle_Closure_declarations() {\n/** @type {?} */\nToJsonSerializer.prototype.symbols;\n/** @type {?} */\nToJsonSerializer.prototype.indexBySymbol;\n/** @type {?} */\nToJsonSerializer.prototype.processedSummaryBySymbol;\n/** @type {?} */\nToJsonSerializer.prototype.processedSummaries;\n/** @type {?} */\nToJsonSerializer.prototype.symbolResolver;\n/** @type {?} */\nToJsonSerializer.prototype.summaryResolver;\n}\n\nclass ForJitSerializer {\nprivate data = new Map<StaticSymbol, {\n    summary: CompileTypeSummary,\n    metadata: CompileNgModuleMetadata|CompileDirectiveMetadata|CompilePipeMetadata|\n    CompileTypeMetadata|null,\n    isLibrary: boolean\n  }>();\n/**\n * @param {?} outputCtx\n * @param {?} symbolResolver\n */\nconstructor(private outputCtx: OutputContext,\nprivate symbolResolver: StaticSymbolResolver) {}\n/**\n * @param {?} summary\n * @param {?} metadata\n * @return {?}\n */\naddSourceType(\n      summary: CompileTypeSummary, metadata: CompileNgModuleMetadata|CompileDirectiveMetadata|\n      CompilePipeMetadata|CompileTypeMetadata) {\n    this.data.set(summary.type.reference, {summary, metadata, isLibrary: false});\n  }\n/**\n * @param {?} summary\n * @return {?}\n */\naddLibType(summary: CompileTypeSummary) {\n    this.data.set(summary.type.reference, {summary, metadata: null, isLibrary: true});\n  }\n/**\n * @param {?} exportAs\n * @return {?}\n */\nserialize(exportAs: {symbol: StaticSymbol, exportAs: string}[]): void {\n    const /** @type {?} */ ngModuleSymbols = new Set<StaticSymbol>();\n\n    Array.from(this.data.values()).forEach(({summary, metadata, isLibrary}) => {\n      if (summary.summaryKind === CompileSummaryKind.NgModule) {\n        // collect the symbols that refer to NgModule classes.\n        // Note: we can't just rely on `summary.type.summaryKind` to determine this as\n        // we don't add the summaries of all referenced symbols when we serialize type summaries.\n        // See serializeSummaries for details.\n        ngModuleSymbols.add(summary.type.reference);\n        const /** @type {?} */ modSummary = /** @type {?} */(( <CompileNgModuleSummary>summary));\n        modSummary.modules.forEach((mod) => { ngModuleSymbols.add(mod.reference); });\n      }\n      if (!isLibrary) {\n        const /** @type {?} */ fnName = summaryForJitName(summary.type.reference.name);\n        createSummaryForJitFunction(\n            this.outputCtx, summary.type.reference,\n            this.serializeSummaryWithDeps(summary, /** @type {?} */(( metadata))));\n      }\n    });\n\n    exportAs.forEach((entry) => {\n      const /** @type {?} */ symbol = entry.symbol;\n      if (ngModuleSymbols.has(symbol)) {\n        const /** @type {?} */ jitExportAsName = summaryForJitName(entry.exportAs);\n        this.outputCtx.statements.push(\n            o.variable(jitExportAsName).set(this.serializeSummaryRef(symbol)).toDeclStmt(null, [\n              o.StmtModifier.Exported\n            ]));\n      }\n    });\n  }\n/**\n * @param {?} summary\n * @param {?} metadata\n * @return {?}\n */\n\nprivate serializeSummaryWithDeps(\n      summary: CompileTypeSummary, metadata: CompileNgModuleMetadata|CompileDirectiveMetadata|\n      CompilePipeMetadata|CompileTypeMetadata): o.Expression {\n    const /** @type {?} */ expressions: o.Expression[] = [this.serializeSummary(summary)];\n    let /** @type {?} */ providers: CompileProviderMetadata[] = [];\n    if (metadata instanceof CompileNgModuleMetadata) {\n      expressions.push(...\n                       // For directives / pipes, we only add the declared ones,\n                       // and rely on transitively importing NgModules to get the transitive\n                       // summaries.\n                       metadata.declaredDirectives.concat(metadata.declaredPipes)\n                           .map(type => type.reference)\n                           // For modules,\n                           // we also add the summaries for modules\n                           // from libraries.\n                           // This is ok as we produce reexports for all transitive modules.\n                           .concat(metadata.transitiveModule.modules.map(type => type.reference)\n                                       .filter(ref => ref !== metadata.type.reference))\n                           .map((ref) => this.serializeSummaryRef(ref)));\n      // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\n      // and we already have transitive modules.\n      providers = metadata.providers;\n    } else if (summary.summaryKind === CompileSummaryKind.Directive) {\n      const /** @type {?} */ dirSummary = /** @type {?} */(( <CompileDirectiveSummary>summary));\n      providers = dirSummary.providers.concat(dirSummary.viewProviders);\n    }\n    // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\n    // declaredDirectives / declaredPipes), as we allow\n    // providers without ctor arguments to skip the `@Injectable` decorator,\n    // i.e. we didn't generate .ngsummary.ts files for these.\n    expressions.push(\n        ...providers.filter(provider => !!provider.useClass).map(provider => this.serializeSummary( /** @type {?} */(({\n          summaryKind: CompileSummaryKind.Injectable, type: provider.useClass\n        } as CompileTypeSummary)))));\n    return o.literalArr(expressions);\n  }\n/**\n * @param {?} typeSymbol\n * @return {?}\n */\n\nprivate serializeSummaryRef(typeSymbol: StaticSymbol): o.Expression {\n    const /** @type {?} */ jitImportedSymbol = this.symbolResolver.getStaticSymbol(\n        summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\n    return this.outputCtx.importExpr(jitImportedSymbol);\n  }\n/**\n * @param {?} data\n * @return {?}\n */\n\nprivate serializeSummary(data: {[key: string]: any}): o.Expression {\n    const /** @type {?} */ outputCtx = this.outputCtx;\nclass Transformer implements ValueVisitor {\n/**\n * @param {?} arr\n * @param {?} context\n * @return {?}\n */\nvisitArray(arr: any[], context: any): any {\n        return o.literalArr(arr.map(entry => visitValue(entry, this, context)));\n      }\n/**\n * @param {?} map\n * @param {?} context\n * @return {?}\n */\nvisitStringMap(map: {[key: string]: any}, context: any): any {\n        return new o.LiteralMapExpr(Object.keys(map).map(\n            (key) => new o.LiteralMapEntry(key, visitValue(map[key], this, context), false)));\n      }\n/**\n * @param {?} value\n * @param {?} context\n * @return {?}\n */\nvisitPrimitive(value: any, context: any): any { return o.literal(value); }\n/**\n * @param {?} value\n * @param {?} context\n * @return {?}\n */\nvisitOther(value: any, context: any): any {\n        if (value instanceof StaticSymbol) {\n          return outputCtx.importExpr(value);\n        } else {\n          throw new Error(`Illegal State: Encountered value ${value}`);\n        }\n      }\n    }\n\n    return visitValue(data, new Transformer(), null);\n  }\n}\n\nfunction ForJitSerializer_tsickle_Closure_declarations() {\n/** @type {?} */\nForJitSerializer.prototype.data;\n/** @type {?} */\nForJitSerializer.prototype.outputCtx;\n/** @type {?} */\nForJitSerializer.prototype.symbolResolver;\n}\n\nclass FromJsonDeserializer extends ValueTransformer {\nprivate symbols: StaticSymbol[];\n/**\n * @param {?} symbolCache\n */\nconstructor(private symbolCache: StaticSymbolCache) { super(); }\n/**\n * @param {?} json\n * @return {?}\n */\ndeserialize(json: string):\n      {summaries: Summary<StaticSymbol>[], importAs: {symbol: StaticSymbol, importAs: string}[]} {\n    const /** @type {?} */ data: {summaries: any[], symbols: any[]} = JSON.parse(json);\n    const /** @type {?} */ importAs: {symbol: StaticSymbol, importAs: string}[] = [];\n    this.symbols = [];\n    data.symbols.forEach((serializedSymbol) => {\n      const /** @type {?} */ symbol = this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);\n      this.symbols.push(symbol);\n      if (serializedSymbol.importAs) {\n        importAs.push({symbol: symbol, importAs: serializedSymbol.importAs});\n      }\n    });\n    const /** @type {?} */ summaries = visitValue(data.summaries, this, null);\n    return {summaries, importAs};\n  }\n/**\n * @param {?} map\n * @param {?} context\n * @return {?}\n */\nvisitStringMap(map: {[key: string]: any}, context: any): any {\n    if ('__symbol' in map) {\n      const /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];\n      const /** @type {?} */ members = map['members'];\n      return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                              baseSymbol;\n    } else {\n      return super.visitStringMap(map, context);\n    }\n  }\n}\n\nfunction FromJsonDeserializer_tsickle_Closure_declarations() {\n/** @type {?} */\nFromJsonDeserializer.prototype.symbols;\n/** @type {?} */\nFromJsonDeserializer.prototype.symbolCache;\n}\n\n"]}