{"version":3,"sources":["../../../../packages/compiler/src/summary_resolver.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH,OALO,EAAA,kBAAE,EAAkB,MAAA,cAAA,CAAA;AAM3B;;GAEC;AACD,MAAM,sBAAoB,CAAA;AAG1B;IACA,gBAAW;IACX,OAAO,CAAC,SAAG,CAAA,MAAY,CAAA;IACvB,gBAAE;IACF,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,0BAAsB;IACtB,OAAO,CAAA,SAAM,CAAA,IAAA,CAAA;AACb,CAAC;AAQD;;GAEG;AACH,MAtBC;CAOA;AAwBD;IAEA;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,aAAa,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;IAEhE;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;IAErE;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,cAAc,GAAG,UAAS,SAAS,IAAG,CAAC,CAAC;IAElE;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,YAAY,GAAG,UAAS,QAAQ,IAAG,CAAC,CAAC;IAE/D;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,WAAW,GAAG,UAAS,SAAS,IAAG,CAAC,CAAC;IAE/D;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,OAAO,IAAG,CAAC,CAAC;AAC5D,CAAC;AAED,MAlEC;IAkED;QAjEU,eAAA,GAAa,IAAI,GAAA,EAAkC,CAAG;IAyGhE,CA/FC;IAyDD;;;OAGG;IACH,aArEG,CAAa,QAAU,IAAmB,MAAA,CAAO,KAAA,CAAM,CAAC,CAAA;IAAA,CAAE;IAsE7D;;;OAGG;IACH,kBAzEG,CAAkB,QAAU,IAAuB,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA0EnE;;;OAGG;IACH,cA7EG,CAAc,SAAoB;QA8EjC,MAAM,CA7EC,IAAA,CAAK,UAAC,CAAU,GAAC,CAAG,SAAC,CAAS,IAAI,IAAA,CAAK;IA8EhD,CAAC;IAAA,CA7EC;IA8EJ;;;OAGG;IACH,YAjFG,CAAY,QAAU,IAAuB,MAAA,CAAO,EAAA,CAAG,CAAC,CAAA;IAkF3D;;;OAGG;IACH,WArFG,CAAW,SAAoB,IAAe,MAAA,CAAO,SAAA,CAAU,CAAC,CAAA;IAsFnE;;;OAGG;IACH,UAzFG,CAAU,OAA2B,IAAI,IAAA,CAAK,UAAC,CAAU,GAAC,CAAG,OAAC,CAAO,MAAC,EAAO,OAAA,CAAQ,CAAC,CAAC,CAAA;IAAA,CAAE;;AACrF,6BAAA,GAA+C;IA0FtD,EAzFE,IAAA,EAAM,kBAAA,EAbN;CAuGD,CAzFC;AA0FF,kBAAkB;AAxFX,iCAAA,GAA4F,MAAM,EA0FxG,CAzFC;AA4FF;IACA,gBAAgB;IAChB,kBAAkB,CAAC,UAAU,CAAC;IAC9B;;;OAGG;IACH,kBAAkB,CAAC,cAAc,CAAC;IAClC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC;AACxC,CAAC","file":"summary_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Type} from '@angular/core';\nimport {CompileTypeSummary} from './compile_metadata';\nimport {CompilerInjectable} from './injectable';\n/**\n * @record\n */\nexport function Summary() {}\n\n\nfunction Summary_tsickle_Closure_declarations() {\n/** @type {?} */\nSummary.prototype.symbol;\n/** @type {?} */\nSummary.prototype.metadata;\n/** @type {?|undefined} */\nSummary.prototype.type;\n}\n\n\nexport interface Summary<T> {\n  symbol: T;\n  metadata: any;\n  type?: CompileTypeSummary;\n}\n/**\n * @abstract\n */\nexport abstract class SummaryResolver<T> {\n  abstract isLibraryFile(fileName: string): boolean;\n  abstract getLibraryFileName(fileName: string): string|null;\n  abstract resolveSummary(reference: T): Summary<T>|null;\n  abstract getSymbolsOf(filePath: string): T[];\n  abstract getImportAs(reference: T): T;\n  abstract addSummary(summary: Summary<T>): void;\n}\n\nfunction SummaryResolver_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} fileName\n * @return {?}\n */\nSummaryResolver.prototype.isLibraryFile = function(fileName) {};\n\n/**\n * @abstract\n * @param {?} fileName\n * @return {?}\n */\nSummaryResolver.prototype.getLibraryFileName = function(fileName) {};\n\n/**\n * @abstract\n * @param {?} reference\n * @return {?}\n */\nSummaryResolver.prototype.resolveSummary = function(reference) {};\n\n/**\n * @abstract\n * @param {?} filePath\n * @return {?}\n */\nSummaryResolver.prototype.getSymbolsOf = function(filePath) {};\n\n/**\n * @abstract\n * @param {?} reference\n * @return {?}\n */\nSummaryResolver.prototype.getImportAs = function(reference) {};\n\n/**\n * @abstract\n * @param {?} summary\n * @return {?}\n */\nSummaryResolver.prototype.addSummary = function(summary) {};\n}\n\nexport class JitSummaryResolver implements SummaryResolver<Type<any>> {\nprivate _summaries = new Map<Type<any>, Summary<Type<any>>>();\n/**\n * @param {?} fileName\n * @return {?}\n */\nisLibraryFile(fileName: string): boolean { return false; };\n/**\n * @param {?} fileName\n * @return {?}\n */\ngetLibraryFileName(fileName: string): string|null { return null; }\n/**\n * @param {?} reference\n * @return {?}\n */\nresolveSummary(reference: Type<any>): Summary<Type<any>>|null {\n    return this._summaries.get(reference) || null;\n  };\n/**\n * @param {?} filePath\n * @return {?}\n */\ngetSymbolsOf(filePath: string): Type<any>[] { return []; }\n/**\n * @param {?} reference\n * @return {?}\n */\ngetImportAs(reference: Type<any>): Type<any> { return reference; }\n/**\n * @param {?} summary\n * @return {?}\n */\naddSummary(summary: Summary<Type<any>>) { this._summaries.set(summary.symbol, summary); };\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: CompilerInjectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction JitSummaryResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nJitSummaryResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJitSummaryResolver.ctorParameters;\n/** @type {?} */\nJitSummaryResolver.prototype._summaries;\n}\n\n"]}