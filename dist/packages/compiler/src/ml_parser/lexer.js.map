{"version":3,"sources":["../../../../../packages/compiler/src/ml_parser/lexer.ts"],"names":[],"mappings":"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","file":"lexer.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as chars from '../chars';\nimport {ParseError, ParseLocation, ParseSourceFile, ParseSourceSpan} from '../parse_util';\n\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './interpolation_config';\nimport {NAMED_ENTITIES, TagContentType, TagDefinition} from './tags';\nexport type TokenType = number;\nexport let TokenType: any = {};\nTokenType.TAG_OPEN_START = 0;\nTokenType.TAG_OPEN_END = 1;\nTokenType.TAG_OPEN_END_VOID = 2;\nTokenType.TAG_CLOSE = 3;\nTokenType.TEXT = 4;\nTokenType.ESCAPABLE_RAW_TEXT = 5;\nTokenType.RAW_TEXT = 6;\nTokenType.COMMENT_START = 7;\nTokenType.COMMENT_END = 8;\nTokenType.CDATA_START = 9;\nTokenType.CDATA_END = 10;\nTokenType.ATTR_NAME = 11;\nTokenType.ATTR_VALUE = 12;\nTokenType.DOC_TYPE = 13;\nTokenType.EXPANSION_FORM_START = 14;\nTokenType.EXPANSION_CASE_VALUE = 15;\nTokenType.EXPANSION_CASE_EXP_START = 16;\nTokenType.EXPANSION_CASE_EXP_END = 17;\nTokenType.EXPANSION_FORM_END = 18;\nTokenType.EOF = 19;\nTokenType[TokenType.TAG_OPEN_START] = \"TAG_OPEN_START\";\nTokenType[TokenType.TAG_OPEN_END] = \"TAG_OPEN_END\";\nTokenType[TokenType.TAG_OPEN_END_VOID] = \"TAG_OPEN_END_VOID\";\nTokenType[TokenType.TAG_CLOSE] = \"TAG_CLOSE\";\nTokenType[TokenType.TEXT] = \"TEXT\";\nTokenType[TokenType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\nTokenType[TokenType.RAW_TEXT] = \"RAW_TEXT\";\nTokenType[TokenType.COMMENT_START] = \"COMMENT_START\";\nTokenType[TokenType.COMMENT_END] = \"COMMENT_END\";\nTokenType[TokenType.CDATA_START] = \"CDATA_START\";\nTokenType[TokenType.CDATA_END] = \"CDATA_END\";\nTokenType[TokenType.ATTR_NAME] = \"ATTR_NAME\";\nTokenType[TokenType.ATTR_VALUE] = \"ATTR_VALUE\";\nTokenType[TokenType.DOC_TYPE] = \"DOC_TYPE\";\nTokenType[TokenType.EXPANSION_FORM_START] = \"EXPANSION_FORM_START\";\nTokenType[TokenType.EXPANSION_CASE_VALUE] = \"EXPANSION_CASE_VALUE\";\nTokenType[TokenType.EXPANSION_CASE_EXP_START] = \"EXPANSION_CASE_EXP_START\";\nTokenType[TokenType.EXPANSION_CASE_EXP_END] = \"EXPANSION_CASE_EXP_END\";\nTokenType[TokenType.EXPANSION_FORM_END] = \"EXPANSION_FORM_END\";\nTokenType[TokenType.EOF] = \"EOF\";\n\nexport class Token {\n/**\n * @param {?} type\n * @param {?} parts\n * @param {?} sourceSpan\n */\nconstructor(public type: TokenType,\npublic parts: string[],\npublic sourceSpan: ParseSourceSpan) {}\n}\n\nfunction Token_tsickle_Closure_declarations() {\n/** @type {?} */\nToken.prototype.type;\n/** @type {?} */\nToken.prototype.parts;\n/** @type {?} */\nToken.prototype.sourceSpan;\n}\n\nexport class TokenError extends ParseError {\n/**\n * @param {?} errorMsg\n * @param {?} tokenType\n * @param {?} span\n */\nconstructor(errorMsg: string,\npublic tokenType: TokenType, span: ParseSourceSpan) {\n    super(span, errorMsg);\n  }\n}\n\nfunction TokenError_tsickle_Closure_declarations() {\n/** @type {?} */\nTokenError.prototype.tokenType;\n}\n\nexport class TokenizeResult {\n/**\n * @param {?} tokens\n * @param {?} errors\n */\nconstructor(public tokens: Token[],\npublic errors: TokenError[]) {}\n}\n\nfunction TokenizeResult_tsickle_Closure_declarations() {\n/** @type {?} */\nTokenizeResult.prototype.tokens;\n/** @type {?} */\nTokenizeResult.prototype.errors;\n}\n\n/**\n * @param {?} source\n * @param {?} url\n * @param {?} getTagDefinition\n * @param {?=} tokenizeExpansionForms\n * @param {?=} interpolationConfig\n * @return {?}\n */\nexport function tokenize(\n    source: string, url: string, getTagDefinition: (tagName: string) => TagDefinition,\n    tokenizeExpansionForms: boolean = false,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): TokenizeResult {\n  return new _Tokenizer(\n             new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms,\n             interpolationConfig)\n      .tokenize();\n}\n\nconst /** @type {?} */ _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n/**\n * @param {?} charCode\n * @return {?}\n */\nfunction _unexpectedCharacterErrorMsg(charCode: number): string {\n  const /** @type {?} */ char = charCode === chars.$EOF ? 'EOF' : String.fromCharCode(charCode);\n  return `Unexpected character \"${char}\"`;\n}\n/**\n * @param {?} entitySrc\n * @return {?}\n */\nfunction _unknownEntityErrorMsg(entitySrc: string): string {\n  return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\nclass _ControlFlowError {\n/**\n * @param {?} error\n */\nconstructor(public error: TokenError) {}\n}\n\nfunction _ControlFlowError_tsickle_Closure_declarations() {\n/** @type {?} */\n_ControlFlowError.prototype.error;\n}\n\nclass _Tokenizer {\nprivate _input: string;\nprivate _length: number;\nprivate _peek: number = -1;\nprivate _nextPeek: number = -1;\nprivate _index: number = -1;\nprivate _line: number = 0;\nprivate _column: number = -1;\nprivate _currentTokenStart: ParseLocation;\nprivate _currentTokenType: TokenType;\nprivate _expansionCaseStack: TokenType[] = [];\nprivate _inInterpolation: boolean = false;\n\n  tokens: Token[] = [];\n  errors: TokenError[] = [];\n/**\n * @param {?} _file The html source\n * @param {?} _getTagDefinition\n * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n * @param {?=} _interpolationConfig\n */\nconstructor(\nprivate _file: ParseSourceFile,\nprivate _getTagDefinition: (tagName: string) => TagDefinition,\nprivate _tokenizeIcu: boolean,\nprivate _interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    this._input = _file.content;\n    this._length = _file.content.length;\n    this._advance();\n  }\n/**\n * @param {?} content\n * @return {?}\n */\n\nprivate _processCarriageReturns(content: string): string {\n    // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n    // In order to keep the original position in the source, we can not\n    // pre-process it.\n    // Instead CRs are processed right before instantiating the tokens.\n    return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n  }\n/**\n * @return {?}\n */\ntokenize(): TokenizeResult {\n    while (this._peek !== chars.$EOF) {\n      const /** @type {?} */ start = this._getLocation();\n      try {\n        if (this._attemptCharCode(chars.$LT)) {\n          if (this._attemptCharCode(chars.$BANG)) {\n            if (this._attemptCharCode(chars.$LBRACKET)) {\n              this._consumeCdata(start);\n            } else if (this._attemptCharCode(chars.$MINUS)) {\n              this._consumeComment(start);\n            } else {\n              this._consumeDocType(start);\n            }\n          } else if (this._attemptCharCode(chars.$SLASH)) {\n            this._consumeTagClose(start);\n          } else {\n            this._consumeTagOpen(start);\n          }\n        } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n          this._consumeText();\n        }\n      } catch ( /** @type {?} */e) {\n        if (e instanceof _ControlFlowError) {\n          this.errors.push(e.error);\n        } else {\n          throw e;\n        }\n      }\n    }\n    this._beginToken(TokenType.EOF);\n    this._endToken([]);\n    return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n  }\n/**\n * \\@internal\n * @return {?} whether an ICU token has been created\n */\n\nprivate _tokenizeExpansionForm(): boolean {\n    if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n      this._consumeExpansionFormStart();\n      return true;\n    }\n\n    if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n      this._consumeExpansionCaseStart();\n      return true;\n    }\n\n    if (this._peek === chars.$RBRACE) {\n      if (this._isInExpansionCase()) {\n        this._consumeExpansionCaseEnd();\n        return true;\n      }\n\n      if (this._isInExpansionForm()) {\n        this._consumeExpansionFormEnd();\n        return true;\n      }\n    }\n\n    return false;\n  }\n/**\n * @return {?}\n */\n\nprivate _getLocation(): ParseLocation {\n    return new ParseLocation(this._file, this._index, this._line, this._column);\n  }\n/**\n * @param {?=} start\n * @param {?=} end\n * @return {?}\n */\n\nprivate _getSpan(\n      start: ParseLocation = this._getLocation(),\n      end: ParseLocation = this._getLocation()): ParseSourceSpan {\n    return new ParseSourceSpan(start, end);\n  }\n/**\n * @param {?} type\n * @param {?=} start\n * @return {?}\n */\n\nprivate _beginToken(type: TokenType, start: ParseLocation = this._getLocation()) {\n    this._currentTokenStart = start;\n    this._currentTokenType = type;\n  }\n/**\n * @param {?} parts\n * @param {?=} end\n * @return {?}\n */\n\nprivate _endToken(parts: string[], end: ParseLocation = this._getLocation()): Token {\n    const /** @type {?} */ token =\n        new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n    this.tokens.push(token);\n    this._currentTokenStart = /** @type {?} */(( null));\n    this._currentTokenType = /** @type {?} */(( null));\n    return token;\n  }\n/**\n * @param {?} msg\n * @param {?} span\n * @return {?}\n */\n\nprivate _createError(msg: string, span: ParseSourceSpan): _ControlFlowError {\n    if (this._isInExpansionForm()) {\n      msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n    }\n    const /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);\n    this._currentTokenStart = /** @type {?} */(( null));\n    this._currentTokenType = /** @type {?} */(( null));\n    return new _ControlFlowError(error);\n  }\n/**\n * @return {?}\n */\n\nprivate _advance() {\n    if (this._index >= this._length) {\n      throw this._createError(_unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());\n    }\n    if (this._peek === chars.$LF) {\n      this._line++;\n      this._column = 0;\n    } else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {\n      this._column++;\n    }\n    this._index++;\n    this._peek = this._index >= this._length ? chars.$EOF : this._input.charCodeAt(this._index);\n    this._nextPeek =\n        this._index + 1 >= this._length ? chars.$EOF : this._input.charCodeAt(this._index + 1);\n  }\n/**\n * @param {?} charCode\n * @return {?}\n */\n\nprivate _attemptCharCode(charCode: number): boolean {\n    if (this._peek === charCode) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} charCode\n * @return {?}\n */\n\nprivate _attemptCharCodeCaseInsensitive(charCode: number): boolean {\n    if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} charCode\n * @return {?}\n */\n\nprivate _requireCharCode(charCode: number) {\n    const /** @type {?} */ location = this._getLocation();\n    if (!this._attemptCharCode(charCode)) {\n      throw this._createError(\n          _unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n    }\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\n\nprivate _attemptStr(chars: string): boolean {\n    const /** @type {?} */ len = chars.length;\n    if (this._index + len > this._length) {\n      return false;\n    }\n    const /** @type {?} */ initialPosition = this._savePosition();\n    for (let /** @type {?} */ i = 0; i < len; i++) {\n      if (!this._attemptCharCode(chars.charCodeAt(i))) {\n        // If attempting to parse the string fails, we want to reset the parser\n        // to where it was before the attempt\n        this._restorePosition(initialPosition);\n        return false;\n      }\n    }\n    return true;\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\n\nprivate _attemptStrCaseInsensitive(chars: string): boolean {\n    for (let /** @type {?} */ i = 0; i < chars.length; i++) {\n      if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\n\nprivate _requireStr(chars: string) {\n    const /** @type {?} */ location = this._getLocation();\n    if (!this._attemptStr(chars)) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n    }\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\n\nprivate _attemptCharCodeUntilFn(predicate: (code: number) => boolean) {\n    while (!predicate(this._peek)) {\n      this._advance();\n    }\n  }\n/**\n * @param {?} predicate\n * @param {?} len\n * @return {?}\n */\n\nprivate _requireCharCodeUntilFn(predicate: (code: number) => boolean, len: number) {\n    const /** @type {?} */ start = this._getLocation();\n    this._attemptCharCodeUntilFn(predicate);\n    if (this._index - start.offset < len) {\n      throw this._createError(\n          _unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n    }\n  }\n/**\n * @param {?} char\n * @return {?}\n */\n\nprivate _attemptUntilChar(char: number) {\n    while (this._peek !== char) {\n      this._advance();\n    }\n  }\n/**\n * @param {?} decodeEntities\n * @return {?}\n */\n\nprivate _readChar(decodeEntities: boolean): string {\n    if (decodeEntities && this._peek === chars.$AMPERSAND) {\n      return this._decodeEntity();\n    } else {\n      const /** @type {?} */ index = this._index;\n      this._advance();\n      return this._input[index];\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate _decodeEntity(): string {\n    const /** @type {?} */ start = this._getLocation();\n    this._advance();\n    if (this._attemptCharCode(chars.$HASH)) {\n      const /** @type {?} */ isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);\n      const /** @type {?} */ numberStart = this._getLocation().offset;\n      this._attemptCharCodeUntilFn(isDigitEntityEnd);\n      if (this._peek != chars.$SEMICOLON) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n      }\n      this._advance();\n      const /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);\n      try {\n        const /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);\n        return String.fromCharCode(charCode);\n      } catch ( /** @type {?} */e) {\n        const /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);\n        throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n      }\n    } else {\n      const /** @type {?} */ startPosition = this._savePosition();\n      this._attemptCharCodeUntilFn(isNamedEntityEnd);\n      if (this._peek != chars.$SEMICOLON) {\n        this._restorePosition(startPosition);\n        return '&';\n      }\n      this._advance();\n      const /** @type {?} */ name = this._input.substring(start.offset + 1, this._index - 1);\n      const /** @type {?} */ char = NAMED_ENTITIES[name];\n      if (!char) {\n        throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));\n      }\n      return char;\n    }\n  }\n/**\n * @param {?} decodeEntities\n * @param {?} firstCharOfEnd\n * @param {?} attemptEndRest\n * @return {?}\n */\n\nprivate _consumeRawText(\n      decodeEntities: boolean, firstCharOfEnd: number, attemptEndRest: () => boolean): Token {\n    let /** @type {?} */ tagCloseStart: ParseLocation;\n    const /** @type {?} */ textStart = this._getLocation();\n    this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);\n    const /** @type {?} */ parts: string[] = [];\n    while (true) {\n      tagCloseStart = this._getLocation();\n      if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n        break;\n      }\n      if (this._index > tagCloseStart.offset) {\n        // add the characters consumed by the previous if statement to the output\n        parts.push(this._input.substring(tagCloseStart.offset, this._index));\n      }\n      while (this._peek !== firstCharOfEnd) {\n        parts.push(this._readChar(decodeEntities));\n      }\n    }\n    return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n  }\n/**\n * @param {?} start\n * @return {?}\n */\n\nprivate _consumeComment(start: ParseLocation) {\n    this._beginToken(TokenType.COMMENT_START, start);\n    this._requireCharCode(chars.$MINUS);\n    this._endToken([]);\n    const /** @type {?} */ textToken = this._consumeRawText(false, chars.$MINUS, () => this._attemptStr('->'));\n    this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);\n    this._endToken([]);\n  }\n/**\n * @param {?} start\n * @return {?}\n */\n\nprivate _consumeCdata(start: ParseLocation) {\n    this._beginToken(TokenType.CDATA_START, start);\n    this._requireStr('CDATA[');\n    this._endToken([]);\n    const /** @type {?} */ textToken = this._consumeRawText(false, chars.$RBRACKET, () => this._attemptStr(']>'));\n    this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);\n    this._endToken([]);\n  }\n/**\n * @param {?} start\n * @return {?}\n */\n\nprivate _consumeDocType(start: ParseLocation) {\n    this._beginToken(TokenType.DOC_TYPE, start);\n    this._attemptUntilChar(chars.$GT);\n    this._advance();\n    this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumePrefixAndName(): string[] {\n    const /** @type {?} */ nameOrPrefixStart = this._index;\n    let /** @type {?} */ prefix: string = /** @type {?} */(( null));\n    while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {\n      this._advance();\n    }\n    let /** @type {?} */ nameStart: number;\n    if (this._peek === chars.$COLON) {\n      this._advance();\n      prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n      nameStart = this._index;\n    } else {\n      nameStart = nameOrPrefixStart;\n    }\n    this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n    const /** @type {?} */ name = this._input.substring(nameStart, this._index);\n    return [prefix, name];\n  }\n/**\n * @param {?} start\n * @return {?}\n */\n\nprivate _consumeTagOpen(start: ParseLocation) {\n    const /** @type {?} */ savedPos = this._savePosition();\n    let /** @type {?} */ tagName: string;\n    let /** @type {?} */ lowercaseTagName: string;\n    try {\n      if (!chars.isAsciiLetter(this._peek)) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n      }\n      const /** @type {?} */ nameStart = this._index;\n      this._consumeTagOpenStart(start);\n      tagName = this._input.substring(nameStart, this._index);\n      lowercaseTagName = tagName.toLowerCase();\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {\n        this._consumeAttributeName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        if (this._attemptCharCode(chars.$EQ)) {\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._consumeAttributeValue();\n        }\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n      }\n      this._consumeTagOpenEnd();\n    } catch ( /** @type {?} */e) {\n      if (e instanceof _ControlFlowError) {\n        // When the start tag is invalid, assume we want a \"<\"\n        this._restorePosition(savedPos);\n        // Back to back text tokens are merged at the end\n        this._beginToken(TokenType.TEXT, start);\n        this._endToken(['<']);\n        return;\n      }\n\n      throw e;\n    }\n\n    const /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;\n\n    if (contentTokenType === TagContentType.RAW_TEXT) {\n      this._consumeRawTextWithTagClose(lowercaseTagName, false);\n    } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n      this._consumeRawTextWithTagClose(lowercaseTagName, true);\n    }\n  }\n/**\n * @param {?} lowercaseTagName\n * @param {?} decodeEntities\n * @return {?}\n */\n\nprivate _consumeRawTextWithTagClose(lowercaseTagName: string, decodeEntities: boolean) {\n    const /** @type {?} */ textToken = this._consumeRawText(decodeEntities, chars.$LT, () => {\n      if (!this._attemptCharCode(chars.$SLASH)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      if (!this._attemptStrCaseInsensitive(lowercaseTagName)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      return this._attemptCharCode(chars.$GT);\n    });\n    this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);\n    this._endToken([ /** @type {?} */((null)), lowercaseTagName]);\n  }\n/**\n * @param {?} start\n * @return {?}\n */\n\nprivate _consumeTagOpenStart(start: ParseLocation) {\n    this._beginToken(TokenType.TAG_OPEN_START, start);\n    const /** @type {?} */ parts = this._consumePrefixAndName();\n    this._endToken(parts);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeAttributeName() {\n    this._beginToken(TokenType.ATTR_NAME);\n    const /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n    this._endToken(prefixAndName);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeAttributeValue() {\n    this._beginToken(TokenType.ATTR_VALUE);\n    let /** @type {?} */ value: string;\n    if (this._peek === chars.$SQ || this._peek === chars.$DQ) {\n      const /** @type {?} */ quoteChar = this._peek;\n      this._advance();\n      const /** @type {?} */ parts: string[] = [];\n      while (this._peek !== quoteChar) {\n        parts.push(this._readChar(true));\n      }\n      value = parts.join('');\n      this._advance();\n    } else {\n      const /** @type {?} */ valueStart = this._index;\n      this._requireCharCodeUntilFn(isNameEnd, 1);\n      value = this._input.substring(valueStart, this._index);\n    }\n    this._endToken([this._processCarriageReturns(value)]);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeTagOpenEnd() {\n    const /** @type {?} */ tokenType =\n        this._attemptCharCode(chars.$SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;\n    this._beginToken(tokenType);\n    this._requireCharCode(chars.$GT);\n    this._endToken([]);\n  }\n/**\n * @param {?} start\n * @return {?}\n */\n\nprivate _consumeTagClose(start: ParseLocation) {\n    this._beginToken(TokenType.TAG_CLOSE, start);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    const /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._requireCharCode(chars.$GT);\n    this._endToken(prefixAndName);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeExpansionFormStart() {\n    this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());\n    this._requireCharCode(chars.$LBRACE);\n    this._endToken([]);\n\n    this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);\n\n    this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n    const /** @type {?} */ condition = this._readUntil(chars.$COMMA);\n    this._endToken([condition], this._getLocation());\n    this._requireCharCode(chars.$COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n    const /** @type {?} */ type = this._readUntil(chars.$COMMA);\n    this._endToken([type], this._getLocation());\n    this._requireCharCode(chars.$COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeExpansionCaseStart() {\n    this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());\n    const /** @type {?} */ value = this._readUntil(chars.$LBRACE).trim();\n    this._endToken([value], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());\n    this._requireCharCode(chars.$LBRACE);\n    this._endToken([], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeExpansionCaseEnd() {\n    this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());\n    this._requireCharCode(chars.$RBRACE);\n    this._endToken([], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.pop();\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeExpansionFormEnd() {\n    this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());\n    this._requireCharCode(chars.$RBRACE);\n    this._endToken([]);\n\n    this._expansionCaseStack.pop();\n  }\n/**\n * @return {?}\n */\n\nprivate _consumeText() {\n    const /** @type {?} */ start = this._getLocation();\n    this._beginToken(TokenType.TEXT, start);\n    const /** @type {?} */ parts: string[] = [];\n\n    do {\n      if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n        parts.push(this._interpolationConfig.start);\n        this._inInterpolation = true;\n      } else if (\n          this._interpolationConfig && this._inInterpolation &&\n          this._attemptStr(this._interpolationConfig.end)) {\n        parts.push(this._interpolationConfig.end);\n        this._inInterpolation = false;\n      } else {\n        parts.push(this._readChar(true));\n      }\n    } while (!this._isTextEnd());\n\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n/**\n * @return {?}\n */\n\nprivate _isTextEnd(): boolean {\n    if (this._peek === chars.$LT || this._peek === chars.$EOF) {\n      return true;\n    }\n\n    if (this._tokenizeIcu && !this._inInterpolation) {\n      if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n        // start of an expansion form\n        return true;\n      }\n\n      if (this._peek === chars.$RBRACE && this._isInExpansionCase()) {\n        // end of and expansion case\n        return true;\n      }\n    }\n\n    return false;\n  }\n/**\n * @return {?}\n */\n\nprivate _savePosition(): [number, number, number, number, number] {\n    return [this._peek, this._index, this._column, this._line, this.tokens.length];\n  }\n/**\n * @param {?} char\n * @return {?}\n */\n\nprivate _readUntil(char: number): string {\n    const /** @type {?} */ start = this._index;\n    this._attemptUntilChar(char);\n    return this._input.substring(start, this._index);\n  }\n/**\n * @param {?} position\n * @return {?}\n */\n\nprivate _restorePosition(position: [number, number, number, number, number]): void {\n    this._peek = position[0];\n    this._index = position[1];\n    this._column = position[2];\n    this._line = position[3];\n    const /** @type {?} */ nbTokens = position[4];\n    if (nbTokens < this.tokens.length) {\n      // remove any extra tokens\n      this.tokens = this.tokens.slice(0, nbTokens);\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate _isInExpansionCase(): boolean {\n    return this._expansionCaseStack.length > 0 &&\n        this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n        TokenType.EXPANSION_CASE_EXP_START;\n  }\n/**\n * @return {?}\n */\n\nprivate _isInExpansionForm(): boolean {\n    return this._expansionCaseStack.length > 0 &&\n        this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n        TokenType.EXPANSION_FORM_START;\n  }\n}\n\nfunction _Tokenizer_tsickle_Closure_declarations() {\n/** @type {?} */\n_Tokenizer.prototype._input;\n/** @type {?} */\n_Tokenizer.prototype._length;\n/** @type {?} */\n_Tokenizer.prototype._peek;\n/** @type {?} */\n_Tokenizer.prototype._nextPeek;\n/** @type {?} */\n_Tokenizer.prototype._index;\n/** @type {?} */\n_Tokenizer.prototype._line;\n/** @type {?} */\n_Tokenizer.prototype._column;\n/** @type {?} */\n_Tokenizer.prototype._currentTokenStart;\n/** @type {?} */\n_Tokenizer.prototype._currentTokenType;\n/** @type {?} */\n_Tokenizer.prototype._expansionCaseStack;\n/** @type {?} */\n_Tokenizer.prototype._inInterpolation;\n/** @type {?} */\n_Tokenizer.prototype.tokens;\n/** @type {?} */\n_Tokenizer.prototype.errors;\n/** @type {?} */\n_Tokenizer.prototype._file;\n/** @type {?} */\n_Tokenizer.prototype._getTagDefinition;\n/** @type {?} */\n_Tokenizer.prototype._tokenizeIcu;\n/** @type {?} */\n_Tokenizer.prototype._interpolationConfig;\n}\n\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNotWhitespace(code: number): boolean {\n  return !chars.isWhitespace(code) || code === chars.$EOF;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNameEnd(code: number): boolean {\n  return chars.isWhitespace(code) || code === chars.$GT || code === chars.$SLASH ||\n      code === chars.$SQ || code === chars.$DQ || code === chars.$EQ;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isPrefixEnd(code: number): boolean {\n  return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) &&\n      (code < chars.$0 || code > chars.$9);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isDigitEntityEnd(code: number): boolean {\n  return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiHexDigit(code);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNamedEntityEnd(code: number): boolean {\n  return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiLetter(code);\n}\n/**\n * @param {?} input\n * @param {?} offset\n * @param {?} interpolationConfig\n * @return {?}\n */\nfunction isExpansionFormStart(\n    input: string, offset: number, interpolationConfig: InterpolationConfig): boolean {\n  const /** @type {?} */ isInterpolationStart =\n      interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\n\n  return input.charCodeAt(offset) == chars.$LBRACE && !isInterpolationStart;\n}\n/**\n * @param {?} peek\n * @return {?}\n */\nfunction isExpansionCaseStart(peek: number): boolean {\n  return peek === chars.$EQ || chars.isAsciiLetter(peek) || chars.isDigit(peek);\n}\n/**\n * @param {?} code1\n * @param {?} code2\n * @return {?}\n */\nfunction compareCharCodeCaseInsensitive(code1: number, code2: number): boolean {\n  return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction toUpperCaseCharCode(code: number): number {\n  return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;\n}\n/**\n * @param {?} srcTokens\n * @return {?}\n */\nfunction mergeTextTokens(srcTokens: Token[]): Token[] {\n  const /** @type {?} */ dstTokens: Token[] = [];\n  let /** @type {?} */ lastDstToken: Token|undefined = undefined;\n  for (let /** @type {?} */ i = 0; i < srcTokens.length; i++) {\n    const /** @type {?} */ token = srcTokens[i];\n    if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {\n      lastDstToken.parts[0] += token.parts[0];\n      lastDstToken.sourceSpan.end = token.sourceSpan.end;\n    } else {\n      lastDstToken = token;\n      dstTokens.push(lastDstToken);\n    }\n  }\n\n  return dstTokens;\n}\n"]}