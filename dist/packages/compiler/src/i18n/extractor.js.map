{"version":3,"sources":["../../../../../packages/compiler/src/i18n/extractor.ts"],"names":[],"mappings":"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","file":"extractor.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\nimport {ViewEncapsulation, ÉµConsole as Console} from '@angular/core';\n\nimport {analyzeAndValidateNgModules, extractProgramSymbols} from '../aot/compiler';\nimport {StaticReflector} from '../aot/static_reflector';\nimport {StaticSymbolCache} from '../aot/static_symbol';\nimport {StaticSymbolResolver, StaticSymbolResolverHost} from '../aot/static_symbol_resolver';\nimport {AotSummaryResolver, AotSummaryResolverHost} from '../aot/summary_resolver';\nimport {CompileDirectiveMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {ParseError} from '../parse_util';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {createOfflineCompileUrlResolver} from '../url_resolver';\nimport {MessageBundle} from './message_bundle';\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n * @record\n */\nexport function ExtractorHost() {}\n\n\nfunction ExtractorHost_tsickle_Closure_declarations() {\n/**\n * Loads a resource (e.g. html / css)\n * @type {?}\n */\nExtractorHost.prototype.loadResource;\n}\n\n\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n  /**\n   * Loads a resource (e.g. html / css)\n   */\n  loadResource(path: string): Promise<string>|string;\n}\nexport class Extractor {\n/**\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} messageBundle\n * @param {?} metadataResolver\n */\nconstructor(\npublic host: ExtractorHost,\nprivate staticSymbolResolver: StaticSymbolResolver,\nprivate messageBundle: MessageBundle,\nprivate metadataResolver: CompileMetadataResolver) {}\n/**\n * @param {?} rootFiles\n * @return {?}\n */\nextract(rootFiles: string[]): Promise<MessageBundle> {\n    const /** @type {?} */ programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);\n    const {files, ngModules} =\n        analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver);\n    return Promise\n        .all(ngModules.map(\n            ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => {\n          const /** @type {?} */ errors: ParseError[] = [];\n\n          files.forEach(file => {\n            const /** @type {?} */ compMetas: CompileDirectiveMetadata[] = [];\n            file.directives.forEach(directiveType => {\n              const /** @type {?} */ dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n              if (dirMeta && dirMeta.isComponent) {\n                compMetas.push(dirMeta);\n              }\n            });\n            compMetas.forEach(compMeta => {\n              const /** @type {?} */ html = /** @type {?} */(( /** @type {?} */(( compMeta.template)).template));\n              const /** @type {?} */ interpolationConfig =\n                  InterpolationConfig.fromArray( /** @type {?} */((compMeta.template)).interpolation);\n              errors.push(... /** @type {?} */((this.messageBundle.updateFromTemplate(\n                  html, file.srcUrl, interpolationConfig))));\n            });\n          });\n\n          if (errors.length) {\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\n          }\n\n          return this.messageBundle;\n        });\n  }\n/**\n * @param {?} host\n * @param {?} locale\n * @return {?}\n */\nstatic create(host: ExtractorHost, locale: string|null):\n      {extractor: Extractor, staticReflector: StaticReflector} {\n    const /** @type {?} */ htmlParser = new HtmlParser();\n\n    const /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();\n    const /** @type {?} */ symbolCache = new StaticSymbolCache();\n    const /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);\n    const /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n    const /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n\n    const /** @type {?} */ config =\n        new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n\n    const /** @type {?} */ normalizer = new DirectiveNormalizer(\n        {get: (url: string) => host.loadResource(url)}, urlResolver, htmlParser, config);\n    const /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n    const /** @type {?} */ resolver = new CompileMetadataResolver(\n        config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector),\n        new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer,\n        new Console(), symbolCache, staticReflector);\n\n    // TODO(vicb): implicit tags & attributes\n    const /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n\n    const /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n    return {extractor, staticReflector};\n  }\n}\n\nfunction Extractor_tsickle_Closure_declarations() {\n/** @type {?} */\nExtractor.prototype.host;\n/** @type {?} */\nExtractor.prototype.staticSymbolResolver;\n/** @type {?} */\nExtractor.prototype.messageBundle;\n/** @type {?} */\nExtractor.prototype.metadataResolver;\n}\n\n"]}