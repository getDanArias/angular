{"version":3,"sources":["../../../../../../packages/compiler/src/i18n/serializers/placeholder.ts"],"names":[],"mappings":"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","file":"placeholder.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES: {[k: string]: string} = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n * \n * Returns the same placeholder name when the content is identical.\n * \n * \\@internal\n */\nexport class PlaceholderRegistry {\nprivate _placeHolderNameCounts: {[k: string]: number} = {};\nprivate _signatureToName: {[k: string]: string} = {};\n/**\n * @param {?} tag\n * @param {?} attrs\n * @param {?} isVoid\n * @return {?}\n */\ngetStartTagPlaceholderName(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const /** @type {?} */ upperTag = tag.toUpperCase();\n    const /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\ngetCloseTagPlaceholderName(tag: string): string {\n    const /** @type {?} */ signature = this._hashClosingTag(tag);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const /** @type {?} */ upperTag = tag.toUpperCase();\n    const /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const /** @type {?} */ name = this._generateUniqueName(`CLOSE_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n/**\n * @param {?} name\n * @param {?} content\n * @return {?}\n */\ngetPlaceholderName(name: string, content: string): string {\n    const /** @type {?} */ upperName = name.toUpperCase();\n    const /** @type {?} */ signature = `PH: ${upperName}=${content}`;\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const /** @type {?} */ uniqueName = this._generateUniqueName(upperName);\n    this._signatureToName[signature] = uniqueName;\n\n    return uniqueName;\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetUniquePlaceholder(name: string): string {\n    return this._generateUniqueName(name.toUpperCase());\n  }\n/**\n * @param {?} tag\n * @param {?} attrs\n * @param {?} isVoid\n * @return {?}\n */\n\nprivate _hashTag(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const /** @type {?} */ start = `<${tag}`;\n    const /** @type {?} */ strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n    const /** @type {?} */ end = isVoid ? '/>' : `></${tag}>`;\n\n    return start + strAttrs + end;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\n\nprivate _hashClosingTag(tag: string): string { return this._hashTag(`/${tag}`, {}, false); }\n/**\n * @param {?} base\n * @return {?}\n */\n\nprivate _generateUniqueName(base: string): string {\n    const /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);\n    if (!seen) {\n      this._placeHolderNameCounts[base] = 1;\n      return base;\n    }\n\n    const /** @type {?} */ id = this._placeHolderNameCounts[base];\n    this._placeHolderNameCounts[base] = id + 1;\n    return `${base}_${id}`;\n  }\n}\n\nfunction PlaceholderRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nPlaceholderRegistry.prototype._placeHolderNameCounts;\n/** @type {?} */\nPlaceholderRegistry.prototype._signatureToName;\n}\n\n"]}