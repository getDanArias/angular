{"version":3,"sources":["../../../../../packages/compiler/testing/src/metadata_overrider.ts"],"names":[],"mappings":"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","file":"metadata_overrider.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from '@angular/core/testing';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet /** @type {?} */ _nextReferenceId = 0;\nexport class MetadataOverrider {\nprivate _references = new Map<any, string>();\n/**\n * Creates a new instance for the given metadata class\n * based on an old instance and overrides.\n * @template C, T\n * @param {?} metadataClass\n * @param {?} oldMetadata\n * @param {?} override\n * @return {?}\n */\noverrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const /** @type {?} */ props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = ( /** @type {?} */((<any>oldMetadata)))[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass( /** @type {?} */((<any>props)));\n  }\n}\n\nfunction MetadataOverrider_tsickle_Closure_declarations() {\n/** @type {?} */\nMetadataOverrider.prototype._references;\n}\n\n/**\n * @param {?} metadata\n * @param {?} remove\n * @param {?} references\n * @return {?}\n */\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const /** @type {?} */ removeObjects = new Set<string>();\n  for (const /** @type {?} */ prop in remove) {\n    const /** @type {?} */ removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const /** @type {?} */ prop in metadata) {\n    const /** @type {?} */ propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n/**\n * @param {?} metadata\n * @param {?} add\n * @return {?}\n */\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const /** @type {?} */ prop in add) {\n    const /** @type {?} */ addValue = add[prop];\n    const /** @type {?} */ propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n/**\n * @param {?} metadata\n * @param {?} set\n * @return {?}\n */\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const /** @type {?} */ prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n/**\n * @param {?} propName\n * @param {?} propValue\n * @param {?} references\n * @return {?}\n */\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const /** @type {?} */ replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n/**\n * @param {?} ref\n * @param {?} references\n * @return {?}\n */\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let /** @type {?} */ id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _valueProps(obj: any): string[] {\n  const /** @type {?} */ props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let /** @type {?} */ proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const /** @type {?} */ desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n"]}