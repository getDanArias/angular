{"version":3,"sources":["../../../../packages/http/src/http.ts"],"names":[],"mappings":"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","file":"http.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return /** @type {?} */(( newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs));\n  }\n\n  return /** @type {?} */(( newOptions.merge(new RequestOptions({method, url})) as RequestArgs));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * \\@experimental\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * \\@experimental\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n"]}