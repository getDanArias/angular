{"version":3,"sources":["../../../../packages/http/src/base_request_options.ts"],"names":[],"mappings":"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","file":"base_request_options.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n */\nmethod: RequestMethod|string|null;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n */\nheaders: Headers|null;\n/**\n * Body to be used when creating a {\\@link Request}.\n */\nbody: any;\n/**\n * Url with which to perform a {\\@link Request}.\n */\nurl: string|null;\n/**\n * Search parameters to be included in a {\\@link Request}.\n */\nparams: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n/**\n * Enable use credentials for a {\\@link Request}.\n */\nwithCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\n\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\n\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\n\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n"]}