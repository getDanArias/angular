{"version":3,"sources":["../../../../../packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMc;AACd,OALO,EAAA,cAAE,EAAc,MAAA,mBAAA,CAAA;AAMvB,OALO,EAAA,UAAE,EAAU,MAAA,eAAA,CAAA;AAMnB,MAFC,yBAA+B,SAAQ,cAAA;IAGxC;;;OAGG;IACH,GANG,CAAG,GAAK;QAOP,IAAI,gBAAY,CANZ,OAA0B,CAAK;QAOnC,IAAI,gBAAgB,CANhB,MAAwB,CAAK;QAOjC,MAAK,gBAAc,CANb,OAAA,GAAU,IAAI,OAAA,CAAe,CAAE,GAAC,EAAI,GAAA;YAOxC,OAAO,GANG,GAAA,CAAI;YAOd,MAAG,GANM,GAAA,CAAI;QAOf,CAAC,CANC,CAAC;QAOH,MAAM,gBAAgB,CANhB,GAAA,GAAM,IAAI,cAAA,EAAe,CAAE;QAOjC,GAAG,CANC,IAAC,CAAI,KAAC,EAAM,GAAA,EAAK,IAAA,CAAK,CAAC;QAO3B,GAAG,CANC,YAAC,GAAc,MAAA,CAAO;QAQ1B,GAAG,CANC,MAAC,GAAQ;YAOX,mFAAqD;YACrD,4FAA4F;YAC5F,WAAW;YACX,MAAM,gBAAgB,CANhB,QAAA,GAAW,GAAA,CAAI,QAAC,IAAW,GAAA,CAAI,YAAC,CAAY;YAQlD,yDAAoB;YACpB,IAAI,gBAAgB,CANhB,MAAA,GAAS,GAAA,CAAI,MAAC,KAAU,IAAA,GAAO,GAAA,GAAM,GAAA,CAAI,MAAC,CAAM;YAQpD,2DAA2D;YAC3D,uEAAsC;YACtC,iDAAqB;YACrB,EAAE,CAAA,CAAA,MANG,KAAU,CAAA,CAAE,CAAC,CAAA;gBAOhB,MAAM,GANG,QAAA,GAAW,GAAA,GAAM,CAAA,CAAE;YAO9B,CAAC;YAED,EAAE,CAAC,CAAC,GANC,IAAM,MAAA,IAAU,MAAA,IAAU,GAAA,CAAI,CAAC,CAAA;gBAOlC,OAAC,CANO,QAAC,CAAQ,CAAC;YAOpB,CAAC;YANC,IAAA,CAAK,CAAA;gBAOL,MAAK,CANE,kBAAC,GAAkB,EAAG,CAAE,CAAC;YAOlC,CAAC;QACH,CAAA,CANE;QAQF,GAAG,CANC,OAAC,GAAS,cAAa,MAAA,CAAO,kBAAC,GAAkB,EAAG,CAAE,CAAC,CAAC,CAAA,CAAE;QAQ9D,GAAG,CANC,IAAC,EAAI,CAAE;QAOX,MAAM,CANC,OAAA,CAAQ;IAOjB,CAAC;;AALI,6BAAA,GAA+C;IAOtD,EANE,IAAA,EAAM,UAAA,EA1CN;CAiDD,CANC;AAOF,kBAAkB;AALX,iCAAA,GAA4F,MAAM,EAOxG,CANC;AASF;IACA,gBAAgB;IAChB,kBAAkB,CAAC,UAAU,CAAC;IAC9B;;;OAGG;IACH,kBAAkB,CAAC,cAAc,CAAC;AAClC,CAAC","file":"resource_loader_impl.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ResourceLoader} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\nexport class ResourceLoaderImpl extends ResourceLoader {\n/**\n * @param {?} url\n * @return {?}\n */\nget(url: string): Promise<string> {\n    let /** @type {?} */ resolve: (result: any) => void;\n    let /** @type {?} */ reject: (error: any) => void;\n    const /** @type {?} */ promise = new Promise<string>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    const /** @type {?} */ xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n\n    xhr.onload = function() {\n      // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n      // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n      // by IE10)\n      const /** @type {?} */ response = xhr.response || xhr.responseText;\n\n      // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n      let /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n\n      // fix status code when it is 0 (0 status is undocumented).\n      // Occurs when accessing file resources or on Android 4.1 stock browser\n      // while retrieving files from application cache.\n      if (status === 0) {\n        status = response ? 200 : 0;\n      }\n\n      if (200 <= status && status <= 300) {\n        resolve(response);\n      } else {\n        reject(`Failed to load ${url}`);\n      }\n    };\n\n    xhr.onerror = function() { reject(`Failed to load ${url}`); };\n\n    xhr.send();\n    return promise;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction ResourceLoaderImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nResourceLoaderImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nResourceLoaderImpl.ctorParameters;\n}\n\n"]}