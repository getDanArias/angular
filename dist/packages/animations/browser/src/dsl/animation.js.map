{"version":3,"sources":["../../../../../../packages/animations/browser/src/dsl/animation.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAYH,OALO,EAAA,eAAE,EAAe,MAAA,SAAA,CAAA;AAQxB,OALO,EAAA,iBAAE,EAAiB,MAAA,yBAAA,CAAA;AAM1B,OALO,EAAA,uBAAE,EAAuB,MAAA,8BAAA,CAAA;AAOhC,OALO,EAAA,qBAAE,EAAqB,MAAA,2BAAA,CAAA;AAM9B,MAJC;IAMD;;;OAGG;IACH,YARsB,OAAS,EAAiB,KAA2C;QAArE,YAAA,GAAA,OAAA,CAAS;QAS3B,MAAM,gBAAgB,CARhB,MAAA,GAAgB,EAAA,CAAG;QASzB,MAAM,gBAAgB,CARhB,GAAA,GAAM,iBAAA,CAAkB,KAAC,EAAM,MAAA,CAAO,CAAC;QAS7C,EAAE,CAAC,CAAC,MARC,CAAM,MAAC,CAAM,CAAC,CAAA;YASjB,MAAM,gBAAgB,CARhB,YAAA,GAAe,iCAAA,MAAkC,CAAM,IAAC,CAAI,IAAC,CAAI,EAAC,CAAE;YAS1E,MARM,IAAI,KAAA,CAAM,YAAC,CAAY,CAAC;QAShC,CAAC;QACD,IAAI,CARC,aAAC,GAAe,GAAA,CAAI;IAS3B,CAAC;IACH;;;;;;;OAOG;IACH,cAfG,CAgBG,OAfS,EAAK,cAAsC,EAgBpD,iBAfyC,EAAG,OAAS,EAgBrD,eAfkB;QAgBpB,MAAM,gBAAgB,CAfhB,KAAA,GAAQ,KAAA,CAAM,OAAC,CAAO,cAAC,CAAc,GAAG,eAAA,CAAgB,cAAC,CAAc,GAAC,CACpB,cAAC,CAAA,CAAc;QAgBzE,MAAM,gBAAgB,CAfhB,IAAA,GAAO,KAAA,CAAM,OAAC,CAAO,iBAAC,CAAiB,GAAG,eAAA,CAAgB,iBAAC,CAAiB,GAAC,CACvB,iBAAC,CAAA,CAAiB;QAgB9E,MAAM,gBAAgB,CAfhB,MAAA,GAAc,EAAA,CAAG;QAgBvB,eAAe,GAfG,eAAA,IAAmB,IAAI,qBAAA,EAAsB,CAAE;QAgBjE,MAAM,gBAAgB,CAfhB,MAAA,GAAS,uBAAA,CAgBX,IAAI,CAfC,OAAC,EAAQ,OAAA,EAAS,IAAA,CAAK,aAAC,EAAc,KAAA,EAAO,IAAA,EAAM,OAAA,EAAS,eAAA,EAAiB,MAAA,CAAO,CAAC;QAgB9F,EAAE,CAAC,CAAC,MAfC,CAAM,MAAC,CAAM,CAAC,CAAA;YAgBjB,MAAM,gBAAgB,CAfhB,YAAA,GAAe,+BAAA,MAAgC,CAAM,IAAC,CAAI,IAAC,CAAI,EAAC,CAAE;YAgBxE,MAfM,IAAI,KAAA,CAAM,YAAC,CAAY,CAAC;QAgBhC,CAAC;QACD,MAAM,CAfC,MAAA,CAAO;IAgBhB,CAAC;CAdF;AAiBD;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC;IAClC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;AAC5B,CAAC","file":"animation.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationMetadata, AnimationOptions, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../render/animation_driver';\nimport {normalizeStyles} from '../util';\n\nimport {Ast} from './animation_ast';\nimport {buildAnimationAst} from './animation_ast_builder';\nimport {buildAnimationTimelines} from './animation_timeline_builder';\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\nimport {ElementInstructionMap} from './element_instruction_map';\nexport class Animation {\nprivate _animationAst: Ast;\n/**\n * @param {?} _driver\n * @param {?} input\n */\nconstructor(private _driver: AnimationDriver, input: AnimationMetadata|AnimationMetadata[]) {\n    const /** @type {?} */ errors: any[] = [];\n    const /** @type {?} */ ast = buildAnimationAst(input, errors);\n    if (errors.length) {\n      const /** @type {?} */ errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n      throw new Error(errorMessage);\n    }\n    this._animationAst = ast;\n  }\n/**\n * @param {?} element\n * @param {?} startingStyles\n * @param {?} destinationStyles\n * @param {?} options\n * @param {?=} subInstructions\n * @return {?}\n */\nbuildTimelines(\n      element: any, startingStyles: ɵStyleData|ɵStyleData[],\n      destinationStyles: ɵStyleData|ɵStyleData[], options: AnimationOptions,\n      subInstructions?: ElementInstructionMap): AnimationTimelineInstruction[] {\n    const /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : /** @type {?} */((\n                                                  <ɵStyleData>startingStyles));\n    const /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : /** @type {?} */((\n                                                    <ɵStyleData>destinationStyles));\n    const /** @type {?} */ errors: any = [];\n    subInstructions = subInstructions || new ElementInstructionMap();\n    const /** @type {?} */ result = buildAnimationTimelines(\n        this._driver, element, this._animationAst, start, dest, options, subInstructions, errors);\n    if (errors.length) {\n      const /** @type {?} */ errorMessage = `animation building failed:\\n${errors.join(\"\\n\")}`;\n      throw new Error(errorMessage);\n    }\n    return result;\n  }\n}\n\nfunction Animation_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimation.prototype._animationAst;\n/** @type {?} */\nAnimation.prototype._driver;\n}\n\n"]}