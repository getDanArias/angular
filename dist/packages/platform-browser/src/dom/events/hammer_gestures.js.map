{"version":3,"sources":["../../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts"],"names":[],"mappings":"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","file":"hammer_gestures.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n/**\n * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure\n * Hammer gestures.\n * \n * \\@experimental\n */\nexport const /** @type {?} */ HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n/**\n * @record\n */\nexport function HammerInstance() {}\n\n\nfunction HammerInstance_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerInstance.prototype.on;\n/** @type {?} */\nHammerInstance.prototype.off;\n}\n\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n}\n/**\n * \\@experimental\n */\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n/**\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const /** @type {?} */ eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HammerGestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGestureConfig.ctorParameters;\n/** @type {?} */\nHammerGestureConfig.prototype.events;\n/** @type {?} */\nHammerGestureConfig.prototype.overrides;\n}\n\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n * @param {?} _config\n */\nconstructor(\n       doc: any,\nprivate _config: HammerGestureConfig) {\n    super(doc);\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!( /** @type {?} */((window as any))).Hammer) {\n      throw new Error(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const /** @type {?} */ mc = this._config.buildHammer(element);\n      const /** @type {?} */ callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => mc.off(eventName, callback);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nisCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n\nfunction HammerGesturesPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGesturesPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGesturesPlugin.ctorParameters;\n/** @type {?} */\nHammerGesturesPlugin.prototype._config;\n}\n\n"]}