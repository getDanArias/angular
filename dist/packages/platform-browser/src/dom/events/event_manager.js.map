{"version":3,"sources":["../../../../../../packages/platform-browser/src/dom/events/event_manager.ts"],"names":[],"mappings":"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","file":"event_manager.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n/**\n * \\@stable\n */\nexport const /** @type {?} */ EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n/**\n * \\@stable\n */\nexport class EventManager {\nprivate _plugins: EventManagerPlugin[];\nprivate _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n/**\n * @param {?} plugins\n * @param {?} _zone\n */\nconstructor( plugins: EventManagerPlugin[],\nprivate _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n/**\n * @return {?}\n */\ngetZone(): NgZone { return this._zone; }\n/**\n * \\@internal\n * @param {?} eventName\n * @return {?}\n */\n_findPluginFor(eventName: string): EventManagerPlugin {\n    const /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const /** @type {?} */ plugins = this._plugins;\n    for (let /** @type {?} */ i = 0; i < plugins.length; i++) {\n      const /** @type {?} */ plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction EventManager_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManager.ctorParameters;\n/** @type {?} */\nEventManager.prototype._plugins;\n/** @type {?} */\nEventManager.prototype._eventNameToPlugin;\n/** @type {?} */\nEventManager.prototype._zone;\n}\n\n/**\n * @abstract\n */\nexport abstract class EventManagerPlugin {\n/**\n * @param {?} _doc\n */\nconstructor(private _doc: any) {}\n\n  manager: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  };\n}\n\nfunction EventManagerPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerPlugin.prototype.manager;\n/** @type {?} */\nEventManagerPlugin.prototype._doc;\n\n/**\n * @abstract\n * @param {?} eventName\n * @return {?}\n */\nEventManagerPlugin.prototype.supports = function(eventName) {};\n\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\nEventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {};\n}\n\n"]}