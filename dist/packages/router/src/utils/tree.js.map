{"version":3,"sources":["../../../../../packages/router/src/utils/tree.ts"],"names":[],"mappings":"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","file":"tree.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class Tree<T> {\n/**\n * \\@internal\n */\n_root: TreeNode<T>;\n/**\n * @param {?} root\n */\nconstructor(root: TreeNode<T>) { this._root = root; }\n/**\n * @return {?}\n */\nget root(): T { return this._root.value; }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nparent(t: T): T|null {\n    const /** @type {?} */ p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nchildren(t: T): T[] {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nfirstChild(t: T): T|null {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nsiblings(t: T): T[] {\n    const /** @type {?} */ p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const /** @type {?} */ c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\npathFromRoot(t: T): T[] { return findPath(t, this._root).map(s => s.value); }\n}\n\nfunction Tree_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nTree.prototype._root;\n}\n\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T>|null {\n  if (value === node.value) return node;\n\n  for (const /** @type {?} */ child of node.children) {\n    const /** @type {?} */ node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const /** @type {?} */ child of node.children) {\n    const /** @type {?} */ path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\nexport class TreeNode<T> {\n/**\n * @param {?} value\n * @param {?} children\n */\nconstructor(public value: T,\npublic children: TreeNode<T>[]) {}\n/**\n * @return {?}\n */\ntoString(): string { return `TreeNode(${this.value})`; }\n}\n\nfunction TreeNode_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeNode.prototype.value;\n/** @type {?} */\nTreeNode.prototype.children;\n}\n\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nexport function nodeChildrenAsMap<T extends{outlet: string}>(node: TreeNode<T>| null) {\n  const /** @type {?} */ map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}"]}