{"version":3,"sources":["../../../../../packages/forms/src/directives/control_value_accessor.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AAEH,OALO,EAAA,cAAE,EAAc,MAAA,eAAA,CAAA;AAMvB;;;;;;;;;;GAUG;AACH,MAAM,mCAAkC,CAAC;AAGzC;IACA;;;OAGG;IACH,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC1C;;;OAGG;IACH,oBAAoB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAChD;;;OAGG;IACH,oBAAoB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACjD;;;;;;OAMG;IACH,oBAAoB,CAAC,SAAS,CAAC,gBAAgB,CAAC;AAChD,CAAC;AAqCD;;;;;GAKG;AACH,MA5CC,CAAM,MAAA,gBAAA,CAAM,iBAAA,GAAoB,IAAI,cAAA,CAAoC,iBAAE,CAAiB,CAAC","file":"control_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * A bridge between a control and a native element.\n * \n * A `ControlValueAccessor` abstracts the operations of writing a new value to a\n * DOM element representing an input control.\n * \n * Please see {\\@link DefaultValueAccessor} for more information.\n * \n * \\@stable\n * @record\n */\nexport function ControlValueAccessor() {}\n\n\nfunction ControlValueAccessor_tsickle_Closure_declarations() {\n/**\n * Write a new value to the element.\n * @type {?}\n */\nControlValueAccessor.prototype.writeValue;\n/**\n * Set the function to be called when the control receives a change event.\n * @type {?}\n */\nControlValueAccessor.prototype.registerOnChange;\n/**\n * Set the function to be called when the control receives a touch event.\n * @type {?}\n */\nControlValueAccessor.prototype.registerOnTouched;\n/**\n * This function is called when the control status changes to or from \"DISABLED\".\n * Depending on the value, it will enable or disable the appropriate DOM element.\n * \n * \\@param isDisabled\n * @type {?|undefined}\n */\nControlValueAccessor.prototype.setDisabledState;\n}\n\n\n/**\n * A bridge between a control and a native element.\n *\n * A `ControlValueAccessor` abstracts the operations of writing a new value to a\n * DOM element representing an input control.\n *\n * Please see {@link DefaultValueAccessor} for more information.\n *\n * @stable\n */\nexport interface ControlValueAccessor {\n  /**\n   * Write a new value to the element.\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * Set the function to be called when the control receives a change event.\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * Set the function to be called when the control receives a touch event.\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * This function is called when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it will enable or disable the appropriate DOM element.\n   *\n   * @param isDisabled\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n * \n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nexport const /** @type {?} */ NG_VALUE_ACCESSOR = new InjectionToken<ControlValueAccessor>('NgValueAccessor');\n"]}