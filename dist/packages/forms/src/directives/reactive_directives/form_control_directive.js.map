{"version":3,"sources":["../../../../../../packages/forms/src/directives/reactive_directives/form_control_directive.ts"],"names":[],"mappings":"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","file":"form_control_directive.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n * \n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n * \n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue} or\n * {\\@link AbstractControl#patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n *  \\@stable\n */\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n   form: FormControl;\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(   validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && /** @type {?} */(( this.valueAccessor)).setDisabledState) { /** @type {?} */(( /** @type {?} */((\n                    this.valueAccessor)).setDisabledState))(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @return {?}\n */\nget control(): FormControl { return this.form; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"form\": [{ type: Input, args: ['formControl', ] },],\n\"model\": [{ type: Input, args: ['ngModel', ] },],\n\"update\": [{ type: Output, args: ['ngModelChange', ] },],\n\"isDisabled\": [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlDirective.ctorParameters;\n/** @type {?} */\nFormControlDirective.propDecorators;\n/** @type {?} */\nFormControlDirective.prototype.viewModel;\n/** @type {?} */\nFormControlDirective.prototype.form;\n/** @type {?} */\nFormControlDirective.prototype.model;\n/** @type {?} */\nFormControlDirective.prototype.update;\n}\n\n"]}