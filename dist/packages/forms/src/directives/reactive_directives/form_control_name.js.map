{"version":3,"sources":["../../../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts"],"names":[],"mappings":"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","file":"form_control_name.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const /** @type {?} */ controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n * \n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get} method.\n * Ex: `this.form.get('first');`\n * \n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n * \n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * In this example, we create form controls for first name and last name.\n * \n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n * \n * To see `formControlName` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: {\\@link ReactiveFormsModule}\n * \n *  \\@stable\n */\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\nprivate _added = false;\n/**\n * \\@internal\n */\nviewModel: any;\n/**\n * \\@internal\n */\n_control: FormControl;\n\n   name: string;\n\n  // TODO(kara):  Replace ngModel with reactive API\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(\n         parent: ControlContainer,\n         validators: Array<Validator|ValidatorFn>,\n         asyncValidators:\n          Array<AsyncValidator|AsyncValidatorFn>,\n         valueAccessors: ControlValueAccessor[]) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, /** @type {?} */(( this._parent))); }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n    return /** @type {?} */(( composeAsyncValidators(this._rawAsyncValidators)));\n  }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\n\nprivate _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate _setUpControl() {\n    this._checkParentType();\n    this._control = this.formDirective.addControl(this);\n    if (this.control.disabled && /** @type {?} */(( this.valueAccessor)).setDisabledState) { /** @type {?} */(( /** @type {?} */((\n      this.valueAccessor)).setDisabledState))(true);\n    }\n    this._added = true;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[formControlName]', providers: [controlNameBinding]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"name\": [{ type: Input, args: ['formControlName', ] },],\n\"model\": [{ type: Input, args: ['ngModel', ] },],\n\"update\": [{ type: Output, args: ['ngModelChange', ] },],\n\"isDisabled\": [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlName.ctorParameters;\n/** @type {?} */\nFormControlName.propDecorators;\n/** @type {?} */\nFormControlName.prototype._added;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype.viewModel;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype._control;\n/** @type {?} */\nFormControlName.prototype.name;\n/** @type {?} */\nFormControlName.prototype.model;\n/** @type {?} */\nFormControlName.prototype.update;\n}\n\n"]}