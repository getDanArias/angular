{"version":3,"sources":["../../../../../packages/forms/src/directives/radio_control_value_accessor.ts"],"names":[],"mappings":"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","file":"radio_control_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const /** @type {?} */ RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nexport class RadioControlRegistry {\nprivate _accessors: any[] = [];\n/**\n * @param {?} control\n * @param {?} accessor\n * @return {?}\n */\nadd(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nremove(accessor: RadioControlValueAccessor) {\n    for (let /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nselect(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n/**\n * @param {?} controlPair\n * @param {?} accessor\n * @return {?}\n */\n\nprivate _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction RadioControlRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlRegistry.ctorParameters;\n/** @type {?} */\nRadioControlRegistry.prototype._accessors;\n}\n\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use radio buttons with form directives\n * \n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n * \n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n * \n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n * \n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  \\@stable\n */\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n/**\n * \\@internal\n */\n_state: boolean;\n/**\n * \\@internal\n */\n_control: NgControl;\n/**\n * \\@internal\n */\n_fn: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n   name: string;\n   formControlName: string;\n   value: any;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _registry\n * @param {?} _injector\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _registry: RadioControlRegistry,\nprivate _injector: Injector) {}\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._registry.remove(this); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nfireUncheck(value: any): void { this.writeValue(value); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * @return {?}\n */\n\nprivate _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n/**\n * @return {?}\n */\n\nprivate _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: RadioControlRegistry, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"name\": [{ type: Input },],\n\"formControlName\": [{ type: Input },],\n\"value\": [{ type: Input },],\n};\n}\n\nfunction RadioControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlValueAccessor.ctorParameters;\n/** @type {?} */\nRadioControlValueAccessor.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._state;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._fn;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onChange;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nRadioControlValueAccessor.prototype.name;\n/** @type {?} */\nRadioControlValueAccessor.prototype.formControlName;\n/** @type {?} */\nRadioControlValueAccessor.prototype.value;\n/** @type {?} */\nRadioControlValueAccessor.prototype._renderer;\n/** @type {?} */\nRadioControlValueAccessor.prototype._elementRef;\n/** @type {?} */\nRadioControlValueAccessor.prototype._registry;\n/** @type {?} */\nRadioControlValueAccessor.prototype._injector;\n}\n\n"]}