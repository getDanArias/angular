{"version":3,"file":"content_children_spec.js","sourceRoot":"","sources":["../../../../../../../packages/examples/core/di/ts/contentChildren/e2e_test/content_children_spec.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,2CAA+D;AAC/D,8DAAsE;AAEtE,QAAQ,CAAC,yBAAyB,EAAE;IAClC,SAAS,CAAC,gCAAqB,CAAC,CAAC;IACjC,IAAI,MAAqB,CAAC;IAC1B,IAAI,cAA6B,CAAC;IAClC,IAAI,YAA2B,CAAC;IAEhC,UAAU,CAAC;QACT,oBAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;QACtD,MAAM,GAAG,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnC,cAAc,GAAG,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/C,YAAY,GAAG,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE;QAClC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAElE,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;QAEvE,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementFinder, browser, by, element} from 'protractor';\nimport {verifyNoBrowserErrors} from '../../../../../_common/e2e_util';\n\ndescribe('contentChildren example', () => {\n  afterEach(verifyNoBrowserErrors);\n  let button: ElementFinder;\n  let resultTopLevel: ElementFinder;\n  let resultNested: ElementFinder;\n\n  beforeEach(() => {\n    browser.get('/core/di/ts/contentChildren/index.html');\n    button = element(by.css('button'));\n    resultTopLevel = element(by.css('.top-level'));\n    resultNested = element(by.css('.nested'));\n  });\n\n  it('should query content children', () => {\n    expect(resultTopLevel.getText()).toEqual('Top level panes: 1, 2');\n\n    button.click();\n\n    expect(resultTopLevel.getText()).toEqual('Top level panes: 1, 2, 3');\n  });\n\n  it('should query nested content children', () => {\n    expect(resultNested.getText()).toEqual('Arbitrary nested panes: 1, 2');\n\n    button.click();\n\n    expect(resultNested.getText()).toEqual('Arbitrary nested panes: 1, 2, 3, 3_1, 3_2');\n  });\n});\n"]}