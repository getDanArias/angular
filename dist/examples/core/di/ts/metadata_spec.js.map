{"version":3,"file":"metadata_spec.js","sourceRoot":"","sources":["../../../../../packages/examples/core/di/ts/metadata_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, Host, Inject, Injectable, Optional, ReflectiveInjector, Self, SkipSelf} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\n\nexport function main() {\n  describe('di metadata examples', () => {\n    describe('Inject', () => {\n      it('works', () => {\n        // #docregion Inject\n        class Engine {}\n\n        @Injectable()\n        class Car {\n          constructor(@Inject('MyEngine') public engine: Engine) {}\n        }\n\n        const injector =\n            ReflectiveInjector.resolveAndCreate([{provide: 'MyEngine', useClass: Engine}, Car]);\n\n        expect(injector.get(Car).engine instanceof Engine).toBe(true);\n        // #enddocregion\n      });\n\n      it('works without decorator', () => {\n        // #docregion InjectWithoutDecorator\n        class Engine {}\n\n        @Injectable()\n        class Car {\n          constructor(public engine: Engine) {\n          }  // same as constructor(@Inject(Engine) engine:Engine)\n        }\n\n        const injector = ReflectiveInjector.resolveAndCreate([Engine, Car]);\n        expect(injector.get(Car).engine instanceof Engine).toBe(true);\n        // #enddocregion\n      });\n    });\n\n    describe('Optional', () => {\n      it('works', () => {\n        // #docregion Optional\n        class Engine {}\n\n        @Injectable()\n        class Car {\n          constructor(@Optional() public engine: Engine) {}\n        }\n\n        const injector = ReflectiveInjector.resolveAndCreate([Car]);\n        expect(injector.get(Car).engine).toBeNull();\n        // #enddocregion\n      });\n    });\n\n    describe('Injectable', () => {\n      it('works', () => {\n        // #docregion Injectable\n        @Injectable()\n        class UsefulService {\n        }\n\n        @Injectable()\n        class NeedsService {\n          constructor(public service: UsefulService) {}\n        }\n\n        const injector = ReflectiveInjector.resolveAndCreate([NeedsService, UsefulService]);\n        expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);\n        // #enddocregion\n      });\n\n      it('throws without Injectable', () => {\n        // #docregion InjectableThrows\n        class UsefulService {}\n\n        class NeedsService {\n          constructor(public service: UsefulService) {}\n        }\n\n        expect(() => ReflectiveInjector.resolveAndCreate([NeedsService, UsefulService])).toThrow();\n        // #enddocregion\n      });\n    });\n\n    describe('Self', () => {\n      it('works', () => {\n        // #docregion Self\n        class Dependency {}\n\n        @Injectable()\n        class NeedsDependency {\n          constructor(@Self() public dependency: Dependency) {}\n        }\n\n        let inj = ReflectiveInjector.resolveAndCreate([Dependency, NeedsDependency]);\n        const nd = inj.get(NeedsDependency);\n\n        expect(nd.dependency instanceof Dependency).toBe(true);\n\n        inj = ReflectiveInjector.resolveAndCreate([Dependency]);\n        const child = inj.resolveAndCreateChild([NeedsDependency]);\n        expect(() => child.get(NeedsDependency)).toThrowError();\n        // #enddocregion\n      });\n    });\n\n    describe('SkipSelf', () => {\n      it('works', () => {\n        // #docregion SkipSelf\n        class Dependency {}\n\n        @Injectable()\n        class NeedsDependency {\n          constructor(@SkipSelf() public dependency: Dependency) { this.dependency = dependency; }\n        }\n\n        const parent = ReflectiveInjector.resolveAndCreate([Dependency]);\n        const child = parent.resolveAndCreateChild([NeedsDependency]);\n        expect(child.get(NeedsDependency).dependency instanceof Dependency).toBe(true);\n\n        const inj = ReflectiveInjector.resolveAndCreate([Dependency, NeedsDependency]);\n        expect(() => inj.get(NeedsDependency)).toThrowError();\n        // #enddocregion\n      });\n    });\n\n    describe('Host', () => {\n      it('works', () => {\n        // #docregion Host\n        class OtherService {}\n        class HostService {}\n\n        @Directive({selector: 'child-directive'})\n        class ChildDirective {\n          logs: string[] = [];\n\n          constructor(@Optional() @Host() os: OtherService, @Optional() @Host() hs: HostService) {\n            // os is null: true\n            this.logs.push(`os is null: ${os === null}`);\n            // hs is an instance of HostService: true\n            this.logs.push(`hs is an instance of HostService: ${hs instanceof HostService}`);\n          }\n        }\n\n        @Component({\n          selector: 'parent-cmp',\n          viewProviders: [HostService],\n          template: '<child-directive></child-directive>',\n        })\n        class ParentCmp {\n        }\n\n        @Component({\n          selector: 'app',\n          viewProviders: [OtherService],\n          template: '<parent-cmp></parent-cmp>',\n        })\n        class App {\n        }\n        // #enddocregion\n\n        TestBed.configureTestingModule({\n          declarations: [App, ParentCmp, ChildDirective],\n        });\n\n        let cmp: ComponentFixture<App> = undefined !;\n        expect(() => cmp = TestBed.createComponent(App)).not.toThrow();\n\n        expect(cmp.debugElement.children[0].children[0].injector.get(ChildDirective).logs).toEqual([\n          'os is null: true',\n          'hs is an instance of HostService: true',\n        ]);\n      });\n    });\n\n  });\n}\n"]}