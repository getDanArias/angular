{"version":3,"file":"provider_spec.js","sourceRoot":"","sources":["../../../../../packages/examples/core/di/ts/provider_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Injector, Optional, ReflectiveInjector} from '@angular/core';\n\nexport function main() {\n  describe('Provider examples', () => {\n    describe('TypeProvider', () => {\n      it('works', () => {\n        // #docregion TypeProvider\n        @Injectable()\n        class Greeting {\n          salutation = 'Hello';\n        }\n\n        const injector = ReflectiveInjector.resolveAndCreate([\n          Greeting,  // Shorthand for { provide: Greeting, useClass: Greeting }\n        ]);\n\n        expect(injector.get(Greeting).salutation).toBe('Hello');\n        // #enddocregion\n      });\n    });\n\n    describe('ValueProvider', () => {\n      it('works', () => {\n        // #docregion ValueProvider\n        const injector = Injector.create([{provide: String, useValue: 'Hello'}]);\n\n        expect(injector.get(String)).toEqual('Hello');\n        // #enddocregion\n      });\n    });\n\n    describe('MultiProviderAspect', () => {\n      it('works', () => {\n        // #docregion MultiProviderAspect\n        const locale = new InjectionToken<string[]>('locale');\n        const injector = Injector.create([\n          {provide: locale, multi: true, useValue: 'en'},\n          {provide: locale, multi: true, useValue: 'sk'},\n        ]);\n\n        const locales: string[] = injector.get(locale);\n        expect(locales).toEqual(['en', 'sk']);\n        // #enddocregion\n      });\n    });\n\n    describe('ClassProvider', () => {\n      it('works', () => {\n        // #docregion ClassProvider\n        abstract class Shape { name: string; }\n\n        class Square extends Shape {\n          name = 'square';\n        }\n\n        const injector = ReflectiveInjector.resolveAndCreate([{provide: Shape, useClass: Square}]);\n\n        const shape: Shape = injector.get(Shape);\n        expect(shape.name).toEqual('square');\n        expect(shape instanceof Square).toBe(true);\n        // #enddocregion\n      });\n\n      it('is different then useExisting', () => {\n        // #docregion ClassProviderDifference\n        class Greeting {\n          salutation = 'Hello';\n        }\n\n        class FormalGreeting extends Greeting {\n          salutation = 'Greetings';\n        }\n\n        const injector = ReflectiveInjector.resolveAndCreate(\n            [FormalGreeting, {provide: Greeting, useClass: FormalGreeting}]);\n\n        // The injector returns different instances.\n        // See: {provide: ?, useExisting: ?} if you want the same instance.\n        expect(injector.get(FormalGreeting)).not.toBe(injector.get(Greeting));\n        // #enddocregion\n      });\n    });\n\n    describe('StaticClassProvider', () => {\n      it('works', () => {\n        // #docregion StaticClassProvider\n        abstract class Shape { name: string; }\n\n        class Square extends Shape {\n          name = 'square';\n        }\n\n        const injector = Injector.create([{provide: Shape, useClass: Square, deps: []}]);\n\n        const shape: Shape = injector.get(Shape);\n        expect(shape.name).toEqual('square');\n        expect(shape instanceof Square).toBe(true);\n        // #enddocregion\n      });\n\n      it('is different then useExisting', () => {\n        // #docregion StaticClassProviderDifference\n        class Greeting {\n          salutation = 'Hello';\n        }\n\n        class FormalGreeting extends Greeting {\n          salutation = 'Greetings';\n        }\n\n        const injector = Injector.create([\n          {provide: FormalGreeting, useClass: FormalGreeting, deps: []},\n          {provide: Greeting, useClass: FormalGreeting, deps: []}\n        ]);\n\n        // The injector returns different instances.\n        // See: {provide: ?, useExisting: ?} if you want the same instance.\n        expect(injector.get(FormalGreeting)).not.toBe(injector.get(Greeting));\n        // #enddocregion\n      });\n    });\n\n    describe('ConstructorProvider', () => {\n      it('works', () => {\n        // #docregion ConstructorProvider\n        class Square {\n          name = 'square';\n        }\n\n        const injector = Injector.create([{provide: Square, deps: []}]);\n\n        const shape: Square = injector.get(Square);\n        expect(shape.name).toEqual('square');\n        expect(shape instanceof Square).toBe(true);\n        // #enddocregion\n      });\n    });\n\n    describe('ExistingProvider', () => {\n      it('works', () => {\n        // #docregion ExistingProvider\n        class Greeting {\n          salutation = 'Hello';\n        }\n\n        class FormalGreeting extends Greeting {\n          salutation = 'Greetings';\n        }\n\n        const injector = Injector.create([\n          {provide: FormalGreeting, deps: []}, {provide: Greeting, useExisting: FormalGreeting}\n        ]);\n\n        expect(injector.get(Greeting).salutation).toEqual('Greetings');\n        expect(injector.get(FormalGreeting).salutation).toEqual('Greetings');\n        expect(injector.get(FormalGreeting)).toBe(injector.get(Greeting));\n        // #enddocregion\n      });\n    });\n\n    describe('FactoryProvider', () => {\n      it('works', () => {\n        // #docregion FactoryProvider\n        const Location = new InjectionToken('location');\n        const Hash = new InjectionToken('hash');\n\n        const injector = Injector.create([\n          {provide: Location, useValue: 'http://angular.io/#someLocation'}, {\n            provide: Hash,\n            useFactory: (location: string) => location.split('#')[1],\n            deps: [Location]\n          }\n        ]);\n\n        expect(injector.get(Hash)).toEqual('someLocation');\n        // #enddocregion\n      });\n\n      it('supports optional dependencies', () => {\n        // #docregion FactoryProviderOptionalDeps\n        const Location = new InjectionToken('location');\n        const Hash = new InjectionToken('hash');\n\n        const injector = Injector.create([{\n          provide: Hash,\n          useFactory: (location: string) => `Hash for: ${location}`,\n          // use a nested array to define metadata for dependencies.\n          deps: [[new Optional(), Location]]\n        }]);\n\n        expect(injector.get(Hash)).toEqual('Hash for: null');\n        // #enddocregion\n      });\n    });\n\n  });\n}\n"]}