{"version":3,"file":"nested_form_group_spec.js","sourceRoot":"","sources":["../../../../../../packages/examples/forms/ts/nestedFormGroup/e2e_test/nested_form_group_spec.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,2CAA+D;AAC/D,2DAAmE;AAEnE,QAAQ,CAAC,yBAAyB,EAAE;IAClC,SAAS,CAAC,gCAAqB,CAAC,CAAC;IACjC,IAAI,UAAyB,CAAC;IAC9B,IAAI,SAAwB,CAAC;IAC7B,IAAI,MAAqB,CAAC;IAE1B,UAAU,CAAC;QACT,oBAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QACpD,UAAU,GAAG,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAC1D,SAAS,GAAG,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CAAC;QACxD,MAAM,GAAG,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE;QAC/C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1D,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE;QAC/C,UAAU,CAAC,KAAK,EAAE,CAAC;QACnB,UAAU,CAAC,KAAK,EAAE,CAAC;QACnB,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEzB,MAAM,CAAC,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementFinder, browser, by, element} from 'protractor';\nimport {verifyNoBrowserErrors} from '../../../../_common/e2e_util';\n\ndescribe('nestedFormGroup example', () => {\n  afterEach(verifyNoBrowserErrors);\n  let firstInput: ElementFinder;\n  let lastInput: ElementFinder;\n  let button: ElementFinder;\n\n  beforeEach(() => {\n    browser.get('/forms/ts/nestedFormGroup/index.html');\n    firstInput = element(by.css('[formControlName=\"first\"]'));\n    lastInput = element(by.css('[formControlName=\"last\"]'));\n    button = element(by.css('button:not([type=\"submit\"])'));\n  });\n\n  it('should populate the UI with initial values', () => {\n    expect(firstInput.getAttribute('value')).toEqual('Nancy');\n    expect(lastInput.getAttribute('value')).toEqual('Drew');\n  });\n\n  it('should show the error when name is invalid', () => {\n    firstInput.click();\n    firstInput.clear();\n    firstInput.sendKeys('a');\n\n    expect(element(by.css('p')).getText()).toEqual('Name is invalid.');\n  });\n\n  it('should set the value programmatically', () => {\n    button.click();\n    expect(firstInput.getAttribute('value')).toEqual('Bess');\n    expect(lastInput.getAttribute('value')).toEqual('Marvin');\n  });\n\n});\n"]}